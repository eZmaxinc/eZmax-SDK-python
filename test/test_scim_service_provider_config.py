# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.1
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from eZmaxApi.models.scim_service_provider_config import ScimServiceProviderConfig

class TestScimServiceProviderConfig(unittest.TestCase):
    """ScimServiceProviderConfig unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ScimServiceProviderConfig:
        """Test ScimServiceProviderConfig
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ScimServiceProviderConfig`
        """
        model = ScimServiceProviderConfig()
        if include_optional:
            return ScimServiceProviderConfig(
                authentication_schemes = [
                    eZmaxApi.models.scim_authentication_scheme.Scim-AuthenticationScheme(
                        description = 'Bearer token in the Authorization header', 
                        name = 'Bearer', 
                        type = 'oauthbearertoken', )
                    ],
                bulk = eZmaxApi.models.scim_service_provider_config_bulk.Scim_ServiceProviderConfig_bulk(
                    supported = False, 
                    max_operations = 0, 
                    max_payload_size = 0, ),
                change_password = eZmaxApi.models.scim_service_provider_config_change_password.Scim_ServiceProviderConfig_changePassword(
                    supported = False, ),
                documentation_uri = 'https://github.com/eZmaxinc/eZmax-API',
                etag = eZmaxApi.models.scim_service_provider_config_etag.Scim_ServiceProviderConfig_etag(
                    supported = False, ),
                filter = eZmaxApi.models.scim_service_provider_config_filter.Scim_ServiceProviderConfig_filter(
                    supported = True, 
                    max_results = 10000, ),
                patch = eZmaxApi.models.scim_service_provider_config_patch.Scim_ServiceProviderConfig_patch(
                    supported = False, ),
                sort = eZmaxApi.models.scim_service_provider_config_sort.Scim_ServiceProviderConfig_sort(
                    supported = False, )
            )
        else:
            return ScimServiceProviderConfig(
                authentication_schemes = [
                    eZmaxApi.models.scim_authentication_scheme.Scim-AuthenticationScheme(
                        description = 'Bearer token in the Authorization header', 
                        name = 'Bearer', 
                        type = 'oauthbearertoken', )
                    ],
                bulk = eZmaxApi.models.scim_service_provider_config_bulk.Scim_ServiceProviderConfig_bulk(
                    supported = False, 
                    max_operations = 0, 
                    max_payload_size = 0, ),
                change_password = eZmaxApi.models.scim_service_provider_config_change_password.Scim_ServiceProviderConfig_changePassword(
                    supported = False, ),
                documentation_uri = 'https://github.com/eZmaxinc/eZmax-API',
                etag = eZmaxApi.models.scim_service_provider_config_etag.Scim_ServiceProviderConfig_etag(
                    supported = False, ),
                filter = eZmaxApi.models.scim_service_provider_config_filter.Scim_ServiceProviderConfig_filter(
                    supported = True, 
                    max_results = 10000, ),
                patch = eZmaxApi.models.scim_service_provider_config_patch.Scim_ServiceProviderConfig_patch(
                    supported = False, ),
                sort = eZmaxApi.models.scim_service_provider_config_sort.Scim_ServiceProviderConfig_sort(
                    supported = False, ),
        )
        """

    def testScimServiceProviderConfig(self):
        """Test ScimServiceProviderConfig"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
