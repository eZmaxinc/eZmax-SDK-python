# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.0
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from eZmaxApi.models.ezsignsignature_response import EzsignsignatureResponse  # noqa: E501

class TestEzsignsignatureResponse(unittest.TestCase):
    """EzsignsignatureResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> EzsignsignatureResponse:
        """Test EzsignsignatureResponse
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `EzsignsignatureResponse`
        """
        model = EzsignsignatureResponse()  # noqa: E501
        if include_optional:
            return EzsignsignatureResponse(
                pki_ezsignsignature_id = 49,
                fki_ezsigndocument_id = 97,
                fki_ezsignfoldersignerassociation_id = 20,
                i_ezsignpage_pagenumber = 1,
                i_ezsignsignature_x = 200,
                i_ezsignsignature_y = 300,
                i_ezsignsignature_height = 200,
                i_ezsignsignature_width = 200,
                i_ezsignsignature_step = 1,
                e_ezsignsignature_type = 'Name',
                t_ezsignsignature_tooltip = 'Please sign here if you agree to the terms',
                e_ezsignsignature_tooltipposition = 'TopLeft',
                e_ezsignsignature_font = 'Normal',
                i_ezsignsignature_validationstep = 1,
                s_ezsignsignature_attachmentdescription = 'Attachment',
                e_ezsignsignature_attachmentnamesource = 'Description',
                b_ezsignsignature_required = True,
                fki_ezsignfoldersignerassociation_id_validation = 20,
                dt_ezsignsignature_date = '2020-12-31 23:59:59',
                i_ezsignsignatureattachment_count = 7,
                s_ezsignsignature_description = 'Montreal',
                i_ezsignsignature_maxlength = 75,
                e_ezsignsignature_textvalidation = 'None',
                e_ezsignsignature_dependencyrequirement = 'AllOf',
                s_ezsignsignature_regexp = '/[-0-9a-zA-Z.+_]+@[-0-9a-zA-Z.+_]+.[a-zA-Z]{2,4}/',
                obj_contact_name = eZmaxApi.models.custom_contact_name_response.Custom-ContactName-Response(
                    s_contact_firstname = 'John', 
                    s_contact_lastname = 'Doe', 
                    s_contact_company = 'eZmax Solutions Inc.', ),
                obj_contact_name_delegation = eZmaxApi.models.custom_contact_name_response.Custom-ContactName-Response(
                    s_contact_firstname = 'John', 
                    s_contact_lastname = 'Doe', 
                    s_contact_company = 'eZmax Solutions Inc.', ),
                obj_signature = eZmaxApi.models.signature_response_compound.signature-ResponseCompound()
            )
        else:
            return EzsignsignatureResponse(
                pki_ezsignsignature_id = 49,
                fki_ezsigndocument_id = 97,
                fki_ezsignfoldersignerassociation_id = 20,
                i_ezsignpage_pagenumber = 1,
                i_ezsignsignature_x = 200,
                i_ezsignsignature_y = 300,
                i_ezsignsignature_step = 1,
                e_ezsignsignature_type = 'Name',
                obj_contact_name = eZmaxApi.models.custom_contact_name_response.Custom-ContactName-Response(
                    s_contact_firstname = 'John', 
                    s_contact_lastname = 'Doe', 
                    s_contact_company = 'eZmax Solutions Inc.', ),
        )
        """

    def testEzsignsignatureResponse(self):
        """Test EzsignsignatureResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
