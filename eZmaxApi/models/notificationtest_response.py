# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.0
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictStr, conint
from eZmaxApi.models.multilingual_notificationtest_name import MultilingualNotificationtestName

class NotificationtestResponse(BaseModel):
    """
    A Notificationtest Object  # noqa: E501
    """
    pki_notificationtest_id: conint(strict=True, ge=0) = Field(..., alias="pkiNotificationtestID", description="The unique ID of the Notificationtest")
    obj_notificationtest_name: MultilingualNotificationtestName = Field(..., alias="objNotificationtestName")
    fki_notificationsubsection_id: conint(strict=True, ge=0) = Field(..., alias="fkiNotificationsubsectionID", description="The unique ID of the Notificationsubsection")
    s_notificationtest_function: StrictStr = Field(..., alias="sNotificationtestFunction", description="The function name of the Notificationtest")
    s_notificationtest_name_x: StrictStr = Field(..., alias="sNotificationtestNameX", description="The name of the Notificationtest in the language of the requester")
    __properties = ["pkiNotificationtestID", "objNotificationtestName", "fkiNotificationsubsectionID", "sNotificationtestFunction", "sNotificationtestNameX"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> NotificationtestResponse:
        """Create an instance of NotificationtestResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of obj_notificationtest_name
        if self.obj_notificationtest_name:
            _dict['objNotificationtestName'] = self.obj_notificationtest_name.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> NotificationtestResponse:
        """Create an instance of NotificationtestResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return NotificationtestResponse.parse_obj(obj)

        _obj = NotificationtestResponse.parse_obj({
            "pki_notificationtest_id": obj.get("pkiNotificationtestID"),
            "obj_notificationtest_name": MultilingualNotificationtestName.from_dict(obj.get("objNotificationtestName")) if obj.get("objNotificationtestName") is not None else None,
            "fki_notificationsubsection_id": obj.get("fkiNotificationsubsectionID"),
            "s_notificationtest_function": obj.get("sNotificationtestFunction"),
            "s_notificationtest_name_x": obj.get("sNotificationtestNameX")
        })
        return _obj


