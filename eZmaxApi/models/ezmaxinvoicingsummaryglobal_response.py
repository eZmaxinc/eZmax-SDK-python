# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.0
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conint, constr, validator

class EzmaxinvoicingsummaryglobalResponse(BaseModel):
    """
    A Ezmaxinvoicingsummaryglobal Object  # noqa: E501
    """
    pki_ezmaxinvoicingsummaryglobal_id: Optional[conint(strict=True, ge=0)] = Field(None, alias="pkiEzmaxinvoicingsummaryglobalID", description="The unique ID of the Ezmaxinvoicingsummaryglobal")
    fki_ezmaxinvoicing_id: Optional[conint(strict=True, ge=0)] = Field(None, alias="fkiEzmaxinvoicingID", description="The unique ID of the Ezmaxinvoicing")
    fki_ezmaxproduct_id: conint(strict=True, ge=1) = Field(..., alias="fkiEzmaxproductID", description="The unique ID of the Ezmaxproduct")
    s_ezmaxproduct_description_x: StrictStr = Field(..., alias="sEzmaxproductDescriptionX", description="The description of the Ezmaxproduct in the language of the requester")
    dt_ezmaxinvoicingsummaryglobal_start: StrictStr = Field(..., alias="dtEzmaxinvoicingsummaryglobalStart", description="The start date for the Ezmaxinvoicingsummaryglobal")
    dt_ezmaxinvoicingsummaryglobal_end: StrictStr = Field(..., alias="dtEzmaxinvoicingsummaryglobalEnd", description="The end date for the Ezmaxinvoicingsummaryglobal")
    i_ezmaxinvoicingsummaryglobal_days: conint(strict=True, ge=1) = Field(..., alias="iEzmaxinvoicingsummaryglobalDays", description="The number of days for the Ezmaxinvoicingsummaryglobal")
    d_ezmaxinvoicingsummaryglobal_countreal: constr(strict=True) = Field(..., alias="dEzmaxinvoicingsummaryglobalCountreal", description="The count item calculated")
    d_ezmaxinvoicingsummaryglobal_countbilled: constr(strict=True) = Field(..., alias="dEzmaxinvoicingsummaryglobalCountbilled", description="The count item billed")
    d_ezmaxinvoicingsummaryglobal_subtotal: constr(strict=True) = Field(..., alias="dEzmaxinvoicingsummaryglobalSubtotal", description="The Ezmaxinvoicingsummaryglobal subtotal")
    d_ezmaxinvoicingsummaryglobal_rebateamount: constr(strict=True) = Field(..., alias="dEzmaxinvoicingsummaryglobalRebateamount", description="The rebate amount for the Ezmaxinvoicingsummaryglobal")
    d_ezmaxinvoicingsummaryglobal_rebatepercent: constr(strict=True) = Field(..., alias="dEzmaxinvoicingsummaryglobalRebatepercent", description="The rebate percentage of the Ezmaxinvoicingsummaryglobal")
    d_ezmaxinvoicingsummaryglobal_rebatetotal: constr(strict=True) = Field(..., alias="dEzmaxinvoicingsummaryglobalRebatetotal", description="The rebate amount total for the Ezmaxinvoicingsummaryglobal")
    d_ezmaxinvoicingsummaryglobal_total: constr(strict=True) = Field(..., alias="dEzmaxinvoicingsummaryglobalTotal", description="The Ezmaxinvoicingsummaryglobal total")
    d_ezmaxinvoicingsummaryglobal_representative: Optional[constr(strict=True)] = Field(None, alias="dEzmaxinvoicingsummaryglobalRepresentative", description="The amount of commission for the representative")
    d_ezmaxinvoicingsummaryglobal_partner: Optional[constr(strict=True)] = Field(None, alias="dEzmaxinvoicingsummaryglobalPartner", description="The amount of commission for the partner")
    d_ezmaxinvoicingsummaryglobal_net: Optional[constr(strict=True)] = Field(None, alias="dEzmaxinvoicingsummaryglobalNet", description="The net amount of the Ezmaxinvoicingsummaryglobal")
    b_ezmaxinvoicingsummaryglobal_adjustment: StrictBool = Field(..., alias="bEzmaxinvoicingsummaryglobalAdjustment", description="Whether it is adjustment for the Ezmaxinvoicingsummaryglobal")
    t_ezmaxproduct_help_x: StrictStr = Field(..., alias="tEzmaxproductHelpX", description="The help message of the Ezmaxproduct in the language of the requester")
    __properties = ["pkiEzmaxinvoicingsummaryglobalID", "fkiEzmaxinvoicingID", "fkiEzmaxproductID", "sEzmaxproductDescriptionX", "dtEzmaxinvoicingsummaryglobalStart", "dtEzmaxinvoicingsummaryglobalEnd", "iEzmaxinvoicingsummaryglobalDays", "dEzmaxinvoicingsummaryglobalCountreal", "dEzmaxinvoicingsummaryglobalCountbilled", "dEzmaxinvoicingsummaryglobalSubtotal", "dEzmaxinvoicingsummaryglobalRebateamount", "dEzmaxinvoicingsummaryglobalRebatepercent", "dEzmaxinvoicingsummaryglobalRebatetotal", "dEzmaxinvoicingsummaryglobalTotal", "dEzmaxinvoicingsummaryglobalRepresentative", "dEzmaxinvoicingsummaryglobalPartner", "dEzmaxinvoicingsummaryglobalNet", "bEzmaxinvoicingsummaryglobalAdjustment", "tEzmaxproductHelpX"]

    @validator('d_ezmaxinvoicingsummaryglobal_countreal')
    def d_ezmaxinvoicingsummaryglobal_countreal_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^-{0,1}[\d]{1,6}?\.[\d]{2}$", value):
            raise ValueError(r"must validate the regular expression /^-{0,1}[\d]{1,6}?\.[\d]{2}$/")
        return value

    @validator('d_ezmaxinvoicingsummaryglobal_countbilled')
    def d_ezmaxinvoicingsummaryglobal_countbilled_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^-{0,1}[\d]{1,6}?\.[\d]{2}$", value):
            raise ValueError(r"must validate the regular expression /^-{0,1}[\d]{1,6}?\.[\d]{2}$/")
        return value

    @validator('d_ezmaxinvoicingsummaryglobal_subtotal')
    def d_ezmaxinvoicingsummaryglobal_subtotal_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^-{0,1}[\d]{1,9}?\.[\d]{2}$", value):
            raise ValueError(r"must validate the regular expression /^-{0,1}[\d]{1,9}?\.[\d]{2}$/")
        return value

    @validator('d_ezmaxinvoicingsummaryglobal_rebateamount')
    def d_ezmaxinvoicingsummaryglobal_rebateamount_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^-{0,1}[\d]{1,9}?\.[\d]{2}$", value):
            raise ValueError(r"must validate the regular expression /^-{0,1}[\d]{1,9}?\.[\d]{2}$/")
        return value

    @validator('d_ezmaxinvoicingsummaryglobal_rebatepercent')
    def d_ezmaxinvoicingsummaryglobal_rebatepercent_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^-{0,1}[\d]{1,3}?\.[\d]{2}$", value):
            raise ValueError(r"must validate the regular expression /^-{0,1}[\d]{1,3}?\.[\d]{2}$/")
        return value

    @validator('d_ezmaxinvoicingsummaryglobal_rebatetotal')
    def d_ezmaxinvoicingsummaryglobal_rebatetotal_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^-{0,1}[\d]{1,9}?\.[\d]{2}$", value):
            raise ValueError(r"must validate the regular expression /^-{0,1}[\d]{1,9}?\.[\d]{2}$/")
        return value

    @validator('d_ezmaxinvoicingsummaryglobal_total')
    def d_ezmaxinvoicingsummaryglobal_total_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^-{0,1}[\d]{1,9}?\.[\d]{2}$", value):
            raise ValueError(r"must validate the regular expression /^-{0,1}[\d]{1,9}?\.[\d]{2}$/")
        return value

    @validator('d_ezmaxinvoicingsummaryglobal_representative')
    def d_ezmaxinvoicingsummaryglobal_representative_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^-{0,1}[\d]{1,9}?\.[\d]{2}$", value):
            raise ValueError(r"must validate the regular expression /^-{0,1}[\d]{1,9}?\.[\d]{2}$/")
        return value

    @validator('d_ezmaxinvoicingsummaryglobal_partner')
    def d_ezmaxinvoicingsummaryglobal_partner_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^-{0,1}[\d]{1,9}?\.[\d]{2}$", value):
            raise ValueError(r"must validate the regular expression /^-{0,1}[\d]{1,9}?\.[\d]{2}$/")
        return value

    @validator('d_ezmaxinvoicingsummaryglobal_net')
    def d_ezmaxinvoicingsummaryglobal_net_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^-{0,1}[\d]{1,9}?\.[\d]{2}$", value):
            raise ValueError(r"must validate the regular expression /^-{0,1}[\d]{1,9}?\.[\d]{2}$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> EzmaxinvoicingsummaryglobalResponse:
        """Create an instance of EzmaxinvoicingsummaryglobalResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> EzmaxinvoicingsummaryglobalResponse:
        """Create an instance of EzmaxinvoicingsummaryglobalResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return EzmaxinvoicingsummaryglobalResponse.parse_obj(obj)

        _obj = EzmaxinvoicingsummaryglobalResponse.parse_obj({
            "pki_ezmaxinvoicingsummaryglobal_id": obj.get("pkiEzmaxinvoicingsummaryglobalID"),
            "fki_ezmaxinvoicing_id": obj.get("fkiEzmaxinvoicingID"),
            "fki_ezmaxproduct_id": obj.get("fkiEzmaxproductID"),
            "s_ezmaxproduct_description_x": obj.get("sEzmaxproductDescriptionX"),
            "dt_ezmaxinvoicingsummaryglobal_start": obj.get("dtEzmaxinvoicingsummaryglobalStart"),
            "dt_ezmaxinvoicingsummaryglobal_end": obj.get("dtEzmaxinvoicingsummaryglobalEnd"),
            "i_ezmaxinvoicingsummaryglobal_days": obj.get("iEzmaxinvoicingsummaryglobalDays"),
            "d_ezmaxinvoicingsummaryglobal_countreal": obj.get("dEzmaxinvoicingsummaryglobalCountreal"),
            "d_ezmaxinvoicingsummaryglobal_countbilled": obj.get("dEzmaxinvoicingsummaryglobalCountbilled"),
            "d_ezmaxinvoicingsummaryglobal_subtotal": obj.get("dEzmaxinvoicingsummaryglobalSubtotal"),
            "d_ezmaxinvoicingsummaryglobal_rebateamount": obj.get("dEzmaxinvoicingsummaryglobalRebateamount"),
            "d_ezmaxinvoicingsummaryglobal_rebatepercent": obj.get("dEzmaxinvoicingsummaryglobalRebatepercent"),
            "d_ezmaxinvoicingsummaryglobal_rebatetotal": obj.get("dEzmaxinvoicingsummaryglobalRebatetotal"),
            "d_ezmaxinvoicingsummaryglobal_total": obj.get("dEzmaxinvoicingsummaryglobalTotal"),
            "d_ezmaxinvoicingsummaryglobal_representative": obj.get("dEzmaxinvoicingsummaryglobalRepresentative"),
            "d_ezmaxinvoicingsummaryglobal_partner": obj.get("dEzmaxinvoicingsummaryglobalPartner"),
            "d_ezmaxinvoicingsummaryglobal_net": obj.get("dEzmaxinvoicingsummaryglobalNet"),
            "b_ezmaxinvoicingsummaryglobal_adjustment": obj.get("bEzmaxinvoicingsummaryglobalAdjustment"),
            "t_ezmaxproduct_help_x": obj.get("tEzmaxproductHelpX")
        })
        return _obj


