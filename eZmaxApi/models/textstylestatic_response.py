# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.0
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, conint

class TextstylestaticResponse(BaseModel):
    """
    A Textstylestatic Object  # noqa: E501
    """
    pki_textstylestatic_id: Optional[conint(strict=True, ge=0)] = Field(None, alias="pkiTextstylestaticID", description="The unique ID of the Textstylestatic")
    fki_font_id: conint(strict=True, ge=0) = Field(..., alias="fkiFontID", description="The unique ID of the Font")
    b_textstylestatic_bold: StrictBool = Field(..., alias="bTextstylestaticBold", description="Whether the Textstylestatic is Bold or not")
    b_textstylestatic_underline: StrictBool = Field(..., alias="bTextstylestaticUnderline", description="Whether the Textstylestatic is Underline or not")
    b_textstylestatic_italic: StrictBool = Field(..., alias="bTextstylestaticItalic", description="Whether the Textstylestatic is Italic or not")
    b_textstylestatic_strikethrough: StrictBool = Field(..., alias="bTextstylestaticStrikethrough", description="Whether the Textstylestatic is Strikethrough or not")
    i_textstylestatic_fontcolor: conint(strict=True, le=16777215, ge=0) = Field(..., alias="iTextstylestaticFontcolor", description="The int32 representation of the Fontcolor. For example, RGB color #39435B would be 3752795")
    i_textstylestatic_size: conint(strict=True, le=255, ge=1) = Field(..., alias="iTextstylestaticSize", description="The Size for the Font of the Textstylestatic")
    __properties = ["pkiTextstylestaticID", "fkiFontID", "bTextstylestaticBold", "bTextstylestaticUnderline", "bTextstylestaticItalic", "bTextstylestaticStrikethrough", "iTextstylestaticFontcolor", "iTextstylestaticSize"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TextstylestaticResponse:
        """Create an instance of TextstylestaticResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TextstylestaticResponse:
        """Create an instance of TextstylestaticResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TextstylestaticResponse.parse_obj(obj)

        _obj = TextstylestaticResponse.parse_obj({
            "pki_textstylestatic_id": obj.get("pkiTextstylestaticID"),
            "fki_font_id": obj.get("fkiFontID"),
            "b_textstylestatic_bold": obj.get("bTextstylestaticBold"),
            "b_textstylestatic_underline": obj.get("bTextstylestaticUnderline"),
            "b_textstylestatic_italic": obj.get("bTextstylestaticItalic"),
            "b_textstylestatic_strikethrough": obj.get("bTextstylestaticStrikethrough"),
            "i_textstylestatic_fontcolor": obj.get("iTextstylestaticFontcolor"),
            "i_textstylestatic_size": obj.get("iTextstylestaticSize")
        })
        return _obj


