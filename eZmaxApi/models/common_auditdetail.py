# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.0
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, conint, constr, validator

class CommonAuditdetail(BaseModel):
    """
    Gives informations about the user that created the object or the last user to have modified it.  If the object was never modified after creation, both Created and Modified informations will be the same.   # noqa: E501
    """
    fki_user_id: conint(strict=True, ge=0) = Field(..., alias="fkiUserID", description="The unique ID of the User")
    fki_apikey_id: Optional[conint(strict=True, ge=0)] = Field(None, alias="fkiApikeyID", description="The unique ID of the Apikey")
    s_user_loginname: constr(strict=True) = Field(..., alias="sUserLoginname", description="The login name of the User.")
    s_user_lastname: StrictStr = Field(..., alias="sUserLastname", description="The last name of the user")
    s_user_firstname: StrictStr = Field(..., alias="sUserFirstname", description="The first name of the user")
    s_apikey_description_x: Optional[StrictStr] = Field(None, alias="sApikeyDescriptionX", description="The description of the Apikey in the language of the requester")
    dt_auditdetail_date: StrictStr = Field(..., alias="dtAuditdetailDate", description="Represent a Date Time. The timezone is the one configured in the User's profile.")
    __properties = ["fkiUserID", "fkiApikeyID", "sUserLoginname", "sUserLastname", "sUserFirstname", "sApikeyDescriptionX", "dtAuditdetailDate"]

    @validator('s_user_loginname')
    def s_user_loginname_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^(?:([\w\.-]+@[\w\.-]+\.\w{2,20})|([a-zA-Z0-9]){1,32})$", value):
            raise ValueError(r"must validate the regular expression /^(?:([\w\.-]+@[\w\.-]+\.\w{2,20})|([a-zA-Z0-9]){1,32})$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CommonAuditdetail:
        """Create an instance of CommonAuditdetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CommonAuditdetail:
        """Create an instance of CommonAuditdetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CommonAuditdetail.parse_obj(obj)

        _obj = CommonAuditdetail.parse_obj({
            "fki_user_id": obj.get("fkiUserID"),
            "fki_apikey_id": obj.get("fkiApikeyID"),
            "s_user_loginname": obj.get("sUserLoginname"),
            "s_user_lastname": obj.get("sUserLastname"),
            "s_user_firstname": obj.get("sUserFirstname"),
            "s_apikey_description_x": obj.get("sApikeyDescriptionX"),
            "dt_auditdetail_date": obj.get("dtAuditdetailDate")
        })
        return _obj


