# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.2
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from eZmaxApi.models.common_audit import CommonAudit
from eZmaxApi.models.custom_ezsignfoldertransmission_response import CustomEzsignfoldertransmissionResponse
from typing import Optional, Set
from typing_extensions import Self

class EzsignbulksendtransmissionResponseCompound(BaseModel):
    """
    An Ezsignbulksendtransmission Object and children to create a complete structure
    """ # noqa: E501
    pki_ezsignbulksendtransmission_id: Annotated[int, Field(strict=True, ge=0)] = Field(description="The unique ID of the Ezsignbulksendtransmission", alias="pkiEzsignbulksendtransmissionID")
    fki_ezsignbulksend_id: Annotated[int, Field(strict=True, ge=0)] = Field(description="The unique ID of the Ezsignbulksend", alias="fkiEzsignbulksendID")
    s_ezsignbulksendtransmission_description: StrictStr = Field(description="The description of the Ezsignbulksendtransmission", alias="sEzsignbulksendtransmissionDescription")
    i_ezsignbulksendtransmission_errors: Annotated[int, Field(strict=True, ge=0)] = Field(description="The number of errors during the Ezsignbulksendtransmission", alias="iEzsignbulksendtransmissionErrors")
    obj_audit: CommonAudit = Field(alias="objAudit")
    a_obj_ezsignfoldertransmission: List[CustomEzsignfoldertransmissionResponse] = Field(alias="a_objEzsignfoldertransmission")
    __properties: ClassVar[List[str]] = ["pkiEzsignbulksendtransmissionID", "fkiEzsignbulksendID", "sEzsignbulksendtransmissionDescription", "iEzsignbulksendtransmissionErrors", "objAudit", "a_objEzsignfoldertransmission"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EzsignbulksendtransmissionResponseCompound from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of obj_audit
        if self.obj_audit:
            _dict['objAudit'] = self.obj_audit.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in a_obj_ezsignfoldertransmission (list)
        _items = []
        if self.a_obj_ezsignfoldertransmission:
            for _item_a_obj_ezsignfoldertransmission in self.a_obj_ezsignfoldertransmission:
                if _item_a_obj_ezsignfoldertransmission:
                    _items.append(_item_a_obj_ezsignfoldertransmission.to_dict())
            _dict['a_objEzsignfoldertransmission'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EzsignbulksendtransmissionResponseCompound from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "pkiEzsignbulksendtransmissionID": obj.get("pkiEzsignbulksendtransmissionID"),
            "fkiEzsignbulksendID": obj.get("fkiEzsignbulksendID"),
            "sEzsignbulksendtransmissionDescription": obj.get("sEzsignbulksendtransmissionDescription"),
            "iEzsignbulksendtransmissionErrors": obj.get("iEzsignbulksendtransmissionErrors"),
            "objAudit": CommonAudit.from_dict(obj["objAudit"]) if obj.get("objAudit") is not None else None,
            "a_objEzsignfoldertransmission": [CustomEzsignfoldertransmissionResponse.from_dict(_item) for _item in obj["a_objEzsignfoldertransmission"]] if obj.get("a_objEzsignfoldertransmission") is not None else None
        })
        return _obj


