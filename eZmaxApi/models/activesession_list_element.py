# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.1
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class ActivesessionListElement(BaseModel):
    """
    A Activesession List Element
    """ # noqa: E501
    pki_activesession_id: StrictInt = Field(description="The unique ID of the Activesession", alias="pkiActivesessionID")
    fki_user_id: Annotated[int, Field(strict=True, ge=0)] = Field(description="The unique ID of the User", alias="fkiUserID")
    fki_computer_id: Annotated[int, Field(le=65535, strict=True, ge=1)] = Field(description="The unique ID of the Computer", alias="fkiComputerID")
    fki_company_id: Annotated[int, Field(le=255, strict=True, ge=1)] = Field(description="The unique ID of the Company", alias="fkiCompanyID")
    fki_department_id: Annotated[int, Field(strict=True, ge=0)] = Field(description="The unique ID of the Department", alias="fkiDepartmentID")
    s_company_name_x: StrictStr = Field(description="The Name of the Company in the language of the requester", alias="sCompanyNameX")
    s_department_name_x: StrictStr = Field(description="The Name of the Department in the language of the requester", alias="sDepartmentNameX")
    s_activesession_loginname: Annotated[str, Field(strict=True)] = Field(description="The loginname of the Activesession", alias="sActivesessionLoginname")
    s_computer_description: Annotated[str, Field(strict=True)] = Field(description="The description of the Computer", alias="sComputerDescription")
    dt_activesession_firsthit: Annotated[str, Field(strict=True)] = Field(description="The first hit of the Activesession", alias="dtActivesessionFirsthit")
    dt_activesession_lasthit: Annotated[str, Field(strict=True)] = Field(description="The last hit of the Activesession", alias="dtActivesessionLasthit")
    s_activesession_ip: StrictStr = Field(description="Represent an IP address.", alias="sActivesessionIP")
    __properties: ClassVar[List[str]] = ["pkiActivesessionID", "fkiUserID", "fkiComputerID", "fkiCompanyID", "fkiDepartmentID", "sCompanyNameX", "sDepartmentNameX", "sActivesessionLoginname", "sComputerDescription", "dtActivesessionFirsthit", "dtActivesessionLasthit", "sActivesessionIP"]

    @field_validator('s_activesession_loginname')
    def s_activesession_loginname_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^.{0,32}$", value):
            raise ValueError(r"must validate the regular expression /^.{0,32}$/")
        return value

    @field_validator('s_computer_description')
    def s_computer_description_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^.{0,50}$", value):
            raise ValueError(r"must validate the regular expression /^.{0,50}$/")
        return value

    @field_validator('dt_activesession_firsthit')
    def dt_activesession_firsthit_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) ([01]?[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$", value):
            raise ValueError(r"must validate the regular expression /^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) ([01]?[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$/")
        return value

    @field_validator('dt_activesession_lasthit')
    def dt_activesession_lasthit_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) ([01]?[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$", value):
            raise ValueError(r"must validate the regular expression /^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) ([01]?[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ActivesessionListElement from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ActivesessionListElement from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "pkiActivesessionID": obj.get("pkiActivesessionID"),
            "fkiUserID": obj.get("fkiUserID"),
            "fkiComputerID": obj.get("fkiComputerID"),
            "fkiCompanyID": obj.get("fkiCompanyID"),
            "fkiDepartmentID": obj.get("fkiDepartmentID"),
            "sCompanyNameX": obj.get("sCompanyNameX"),
            "sDepartmentNameX": obj.get("sDepartmentNameX"),
            "sActivesessionLoginname": obj.get("sActivesessionLoginname"),
            "sComputerDescription": obj.get("sComputerDescription"),
            "dtActivesessionFirsthit": obj.get("dtActivesessionFirsthit"),
            "dtActivesessionLasthit": obj.get("dtActivesessionLasthit"),
            "sActivesessionIP": obj.get("sActivesessionIP")
        })
        return _obj


