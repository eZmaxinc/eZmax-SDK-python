# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.0
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictBool, StrictStr, conint

class EzsigntsarequirementAutocompleteElementResponse(BaseModel):
    """
    A Ezsigntsarequirement AutocompleteElement Response  # noqa: E501
    """
    s_ezsigntsarequirement_description_x: StrictStr = Field(..., alias="sEzsigntsarequirementDescriptionX", description="The description of the Ezsigntsarequirement in the language of the requester")
    pki_ezsigntsarequirement_id: conint(strict=True, le=3, ge=1) = Field(..., alias="pkiEzsigntsarequirementID", description="The unique ID of the Ezsigntsarequirement.  Determine if a Time Stamping Authority should add a timestamp on each of the signature. Valid values:  |Value|Description| |-|-| |1|No. TSA Timestamping will requested. This will make all signatures a lot faster since no round-trip to the TSA server will be required. Timestamping will be made using eZsign server's time.| |2|Best effort. Timestamping from a Time Stamping Authority will be requested but is not mandatory. In the very improbable case it cannot be completed, the timestamping will be made using eZsign server's time. **Additional fee applies**| |3|Mandatory. Timestamping from a Time Stamping Authority will be requested and is mandatory. In the very improbable case it cannot be completed, the signature will fail and the user will be asked to retry. **Additional fee applies**|")
    b_ezsigntsarequirement_isactive: StrictBool = Field(..., alias="bEzsigntsarequirementIsactive", description="Whether the Ezsigntsarequirement is active or not")
    b_disabled: StrictBool = Field(..., alias="bDisabled", description="Indicates if the element is disabled in the context")
    __properties = ["sEzsigntsarequirementDescriptionX", "pkiEzsigntsarequirementID", "bEzsigntsarequirementIsactive", "bDisabled"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> EzsigntsarequirementAutocompleteElementResponse:
        """Create an instance of EzsigntsarequirementAutocompleteElementResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> EzsigntsarequirementAutocompleteElementResponse:
        """Create an instance of EzsigntsarequirementAutocompleteElementResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return EzsigntsarequirementAutocompleteElementResponse.parse_obj(obj)

        _obj = EzsigntsarequirementAutocompleteElementResponse.parse_obj({
            "s_ezsigntsarequirement_description_x": obj.get("sEzsigntsarequirementDescriptionX"),
            "pki_ezsigntsarequirement_id": obj.get("pkiEzsigntsarequirementID"),
            "b_ezsigntsarequirement_isactive": obj.get("bEzsigntsarequirementIsactive"),
            "b_disabled": obj.get("bDisabled")
        })
        return _obj


