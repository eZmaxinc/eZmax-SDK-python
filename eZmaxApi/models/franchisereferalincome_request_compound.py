# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.0
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conint, conlist
from eZmaxApi.models.address_request import AddressRequest
from eZmaxApi.models.contact_request_compound import ContactRequestCompound

class FranchisereferalincomeRequestCompound(BaseModel):
    """
    A Franchisereferalincome Object and children to create a complete structure  # noqa: E501
    """
    pki_franchisereferalincome_id: Optional[conint(strict=True, ge=0)] = Field(None, alias="pkiFranchisereferalincomeID", description="The unique ID of the Franchisereferalincome")
    fki_franchisebroker_id: conint(strict=True, ge=0) = Field(..., alias="fkiFranchisebrokerID", description="The unique ID of the Franchisebroker")
    fki_franchisereferalincomeprogram_id: conint(strict=True, ge=0) = Field(..., alias="fkiFranchisereferalincomeprogramID", description="The unique ID of the Franchisereferalincomeprogram")
    fki_period_id: conint(strict=True, ge=0) = Field(..., alias="fkiPeriodID", description="The unique ID of the Period")
    d_franchisereferalincome_loan: StrictStr = Field(..., alias="dFranchisereferalincomeLoan", description="The loan amount")
    d_franchisereferalincome_franchiseamount: StrictStr = Field(..., alias="dFranchisereferalincomeFranchiseamount", description="The amount that will be given to the franchise")
    d_franchisereferalincome_franchisoramount: StrictStr = Field(..., alias="dFranchisereferalincomeFranchisoramount", description="The amount that will be kept by the franchisor")
    d_franchisereferalincome_agentamount: StrictStr = Field(..., alias="dFranchisereferalincomeAgentamount", description="The amount that will be given to the agent")
    dt_franchisereferalincome_disbursed: StrictStr = Field(..., alias="dtFranchisereferalincomeDisbursed", description="The date the amounts were disbursed")
    t_franchisereferalincome_comment: StrictStr = Field(..., alias="tFranchisereferalincomeComment", description="Comment about the transaction")
    fki_franchiseoffice_id: conint(strict=True, ge=0) = Field(..., alias="fkiFranchiseofficeID", description="The unique ID of the Franchisereoffice")
    s_franchisereferalincome_remoteid: StrictStr = Field(..., alias="sFranchisereferalincomeRemoteid")
    obj_address: AddressRequest = Field(..., alias="objAddress")
    a_obj_contact: conlist(ContactRequestCompound) = Field(..., alias="a_objContact")
    __properties = ["pkiFranchisereferalincomeID", "fkiFranchisebrokerID", "fkiFranchisereferalincomeprogramID", "fkiPeriodID", "dFranchisereferalincomeLoan", "dFranchisereferalincomeFranchiseamount", "dFranchisereferalincomeFranchisoramount", "dFranchisereferalincomeAgentamount", "dtFranchisereferalincomeDisbursed", "tFranchisereferalincomeComment", "fkiFranchiseofficeID", "sFranchisereferalincomeRemoteid", "objAddress", "a_objContact"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> FranchisereferalincomeRequestCompound:
        """Create an instance of FranchisereferalincomeRequestCompound from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of obj_address
        if self.obj_address:
            _dict['objAddress'] = self.obj_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in a_obj_contact (list)
        _items = []
        if self.a_obj_contact:
            for _item in self.a_obj_contact:
                if _item:
                    _items.append(_item.to_dict())
            _dict['a_objContact'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> FranchisereferalincomeRequestCompound:
        """Create an instance of FranchisereferalincomeRequestCompound from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return FranchisereferalincomeRequestCompound.parse_obj(obj)

        _obj = FranchisereferalincomeRequestCompound.parse_obj({
            "pki_franchisereferalincome_id": obj.get("pkiFranchisereferalincomeID"),
            "fki_franchisebroker_id": obj.get("fkiFranchisebrokerID"),
            "fki_franchisereferalincomeprogram_id": obj.get("fkiFranchisereferalincomeprogramID"),
            "fki_period_id": obj.get("fkiPeriodID"),
            "d_franchisereferalincome_loan": obj.get("dFranchisereferalincomeLoan"),
            "d_franchisereferalincome_franchiseamount": obj.get("dFranchisereferalincomeFranchiseamount"),
            "d_franchisereferalincome_franchisoramount": obj.get("dFranchisereferalincomeFranchisoramount"),
            "d_franchisereferalincome_agentamount": obj.get("dFranchisereferalincomeAgentamount"),
            "dt_franchisereferalincome_disbursed": obj.get("dtFranchisereferalincomeDisbursed"),
            "t_franchisereferalincome_comment": obj.get("tFranchisereferalincomeComment"),
            "fki_franchiseoffice_id": obj.get("fkiFranchiseofficeID"),
            "s_franchisereferalincome_remoteid": obj.get("sFranchisereferalincomeRemoteid"),
            "obj_address": AddressRequest.from_dict(obj.get("objAddress")) if obj.get("objAddress") is not None else None,
            "a_obj_contact": [ContactRequestCompound.from_dict(_item) for _item in obj.get("a_objContact")] if obj.get("a_objContact") is not None else None
        })
        return _obj


