# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.1
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from eZmaxApi.models.field_e_activesession_ezsign import FieldEActivesessionEzsign
from eZmaxApi.models.field_e_activesession_ezsignaccess import FieldEActivesessionEzsignaccess
from eZmaxApi.models.field_e_activesession_ezsignprepaid import FieldEActivesessionEzsignprepaid
from eZmaxApi.models.field_e_activesession_origin import FieldEActivesessionOrigin
from eZmaxApi.models.field_e_activesession_realestateinprogress import FieldEActivesessionRealestateinprogress
from eZmaxApi.models.field_e_activesession_usertype import FieldEActivesessionUsertype
from eZmaxApi.models.field_e_activesession_weekdaystart import FieldEActivesessionWeekdaystart
from typing import Optional, Set
from typing_extensions import Self

class ActivesessionResponse(BaseModel):
    """
    An Activesession Object
    """ # noqa: E501
    e_activesession_usertype: FieldEActivesessionUsertype = Field(alias="eActivesessionUsertype")
    e_activesession_origin: FieldEActivesessionOrigin = Field(alias="eActivesessionOrigin")
    e_activesession_weekdaystart: FieldEActivesessionWeekdaystart = Field(alias="eActivesessionWeekdaystart")
    fki_language_id: Annotated[int, Field(le=2, strict=True, ge=1)] = Field(description="The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|", alias="fkiLanguageID")
    s_company_name_x: StrictStr = Field(description="The Name of the Company in the language of the requester", alias="sCompanyNameX")
    s_department_name_x: StrictStr = Field(description="The Name of the Department in the language of the requester", alias="sDepartmentNameX")
    b_activesession_debug: StrictBool = Field(description="Whether the active session is in debug or not", alias="bActivesessionDebug")
    b_activesession_issuperadmin: StrictBool = Field(description="Whether the active session is superadmin or not", alias="bActivesessionIssuperadmin")
    b_activesession_attachment: Optional[StrictBool] = Field(default=None, description="Can access attachment when we clone a user", alias="bActivesessionAttachment")
    b_activesession_canafe: Optional[StrictBool] = Field(default=None, description="Can access canafe when we clone a user", alias="bActivesessionCanafe")
    b_activesession_financial: Optional[StrictBool] = Field(default=None, description="Can access financial element when we clone a user", alias="bActivesessionFinancial")
    b_activesession_realestatecompleted: Optional[StrictBool] = Field(default=None, description="Can access closed realestate folders when we clone a user", alias="bActivesessionRealestatecompleted")
    e_activesession_ezsign: Optional[FieldEActivesessionEzsign] = Field(default=None, alias="eActivesessionEzsign")
    e_activesession_ezsignaccess: FieldEActivesessionEzsignaccess = Field(alias="eActivesessionEzsignaccess")
    e_activesession_ezsignprepaid: Optional[FieldEActivesessionEzsignprepaid] = Field(default=None, alias="eActivesessionEzsignprepaid")
    e_activesession_realestateinprogress: Optional[FieldEActivesessionRealestateinprogress] = Field(default=None, alias="eActivesessionRealestateinprogress")
    pks_customer_code: Annotated[str, Field(min_length=2, strict=True, max_length=6)] = Field(description="The customer code assigned to your account", alias="pksCustomerCode")
    fki_systemconfigurationtype_id: Annotated[int, Field(strict=True, ge=1)] = Field(description="The unique ID of the Systemconfigurationtype", alias="fkiSystemconfigurationtypeID")
    fki_signature_id: Optional[Annotated[int, Field(le=16777215, strict=True, ge=0)]] = Field(default=None, description="The unique ID of the Signature", alias="fkiSignatureID")
    __properties: ClassVar[List[str]] = ["eActivesessionUsertype", "eActivesessionOrigin", "eActivesessionWeekdaystart", "fkiLanguageID", "sCompanyNameX", "sDepartmentNameX", "bActivesessionDebug", "bActivesessionIssuperadmin", "bActivesessionAttachment", "bActivesessionCanafe", "bActivesessionFinancial", "bActivesessionRealestatecompleted", "eActivesessionEzsign", "eActivesessionEzsignaccess", "eActivesessionEzsignprepaid", "eActivesessionRealestateinprogress", "pksCustomerCode", "fkiSystemconfigurationtypeID", "fkiSignatureID"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ActivesessionResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Optional[Self]:
        """Create an instance of ActivesessionResponse from a dict"""


