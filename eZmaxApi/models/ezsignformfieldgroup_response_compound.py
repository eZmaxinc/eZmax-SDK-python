# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.1
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from eZmaxApi.models.custom_dropdown_element_response import CustomDropdownElementResponse
from eZmaxApi.models.enum_textvalidation import EnumTextvalidation
from eZmaxApi.models.ezsignformfield_response_compound import EzsignformfieldResponseCompound
from eZmaxApi.models.ezsignformfieldgroup_response import EzsignformfieldgroupResponse
from eZmaxApi.models.ezsignformfieldgroupsigner_response import EzsignformfieldgroupsignerResponse
from eZmaxApi.models.field_e_ezsignformfieldgroup_signerrequirement import FieldEEzsignformfieldgroupSignerrequirement
from eZmaxApi.models.field_e_ezsignformfieldgroup_tooltipposition import FieldEEzsignformfieldgroupTooltipposition
from eZmaxApi.models.field_e_ezsignformfieldgroup_type import FieldEEzsignformfieldgroupType
from typing import Optional, Set
from typing_extensions import Self

class EzsignformfieldgroupResponseCompound(EzsignformfieldgroupResponse):
    """
    An Ezsignformfieldgroup Object and children to create a complete structure
    """ # noqa: E501
    a_obj_ezsignformfield: List[EzsignformfieldResponseCompound] = Field(alias="a_objEzsignformfield")
    a_obj_dropdown_element: Optional[List[CustomDropdownElementResponse]] = Field(default=None, alias="a_objDropdownElement")
    a_obj_ezsignformfieldgroupsigner: List[EzsignformfieldgroupsignerResponse] = Field(alias="a_objEzsignformfieldgroupsigner")
    __properties: ClassVar[List[str]] = ["pkiEzsignformfieldgroupID", "fkiEzsigndocumentID", "eEzsignformfieldgroupType", "eEzsignformfieldgroupSignerrequirement", "sEzsignformfieldgroupLabel", "iEzsignformfieldgroupStep", "sEzsignformfieldgroupDefaultvalue", "iEzsignformfieldgroupFilledmin", "iEzsignformfieldgroupFilledmax", "bEzsignformfieldgroupReadonly", "iEzsignformfieldgroupMaxlength", "bEzsignformfieldgroupEncrypted", "eEzsignformfieldgroupTextvalidation", "sEzsignformfieldgroupRegexp", "sEzsignformfieldgroupTextvalidationcustommessage", "tEzsignformfieldgroupTooltip", "eEzsignformfieldgroupTooltipposition", "a_objEzsignformfield", "a_objDropdownElement", "a_objEzsignformfieldgroupsigner"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EzsignformfieldgroupResponseCompound from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in a_obj_ezsignformfield (list)
        _items = []
        if self.a_obj_ezsignformfield:
            for _item_a_obj_ezsignformfield in self.a_obj_ezsignformfield:
                if _item_a_obj_ezsignformfield:
                    _items.append(_item_a_obj_ezsignformfield.to_dict())
            _dict['a_objEzsignformfield'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in a_obj_dropdown_element (list)
        _items = []
        if self.a_obj_dropdown_element:
            for _item_a_obj_dropdown_element in self.a_obj_dropdown_element:
                if _item_a_obj_dropdown_element:
                    _items.append(_item_a_obj_dropdown_element.to_dict())
            _dict['a_objDropdownElement'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in a_obj_ezsignformfieldgroupsigner (list)
        _items = []
        if self.a_obj_ezsignformfieldgroupsigner:
            for _item_a_obj_ezsignformfieldgroupsigner in self.a_obj_ezsignformfieldgroupsigner:
                if _item_a_obj_ezsignformfieldgroupsigner:
                    _items.append(_item_a_obj_ezsignformfieldgroupsigner.to_dict())
            _dict['a_objEzsignformfieldgroupsigner'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EzsignformfieldgroupResponseCompound from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "pkiEzsignformfieldgroupID": obj.get("pkiEzsignformfieldgroupID"),
            "fkiEzsigndocumentID": obj.get("fkiEzsigndocumentID"),
            "eEzsignformfieldgroupType": obj.get("eEzsignformfieldgroupType"),
            "eEzsignformfieldgroupSignerrequirement": obj.get("eEzsignformfieldgroupSignerrequirement"),
            "sEzsignformfieldgroupLabel": obj.get("sEzsignformfieldgroupLabel"),
            "iEzsignformfieldgroupStep": obj.get("iEzsignformfieldgroupStep"),
            "sEzsignformfieldgroupDefaultvalue": obj.get("sEzsignformfieldgroupDefaultvalue"),
            "iEzsignformfieldgroupFilledmin": obj.get("iEzsignformfieldgroupFilledmin"),
            "iEzsignformfieldgroupFilledmax": obj.get("iEzsignformfieldgroupFilledmax"),
            "bEzsignformfieldgroupReadonly": obj.get("bEzsignformfieldgroupReadonly"),
            "iEzsignformfieldgroupMaxlength": obj.get("iEzsignformfieldgroupMaxlength"),
            "bEzsignformfieldgroupEncrypted": obj.get("bEzsignformfieldgroupEncrypted"),
            "eEzsignformfieldgroupTextvalidation": obj.get("eEzsignformfieldgroupTextvalidation"),
            "sEzsignformfieldgroupRegexp": obj.get("sEzsignformfieldgroupRegexp"),
            "sEzsignformfieldgroupTextvalidationcustommessage": obj.get("sEzsignformfieldgroupTextvalidationcustommessage"),
            "tEzsignformfieldgroupTooltip": obj.get("tEzsignformfieldgroupTooltip"),
            "eEzsignformfieldgroupTooltipposition": obj.get("eEzsignformfieldgroupTooltipposition"),
            "a_objEzsignformfield": [EzsignformfieldResponseCompound.from_dict(_item) for _item in obj["a_objEzsignformfield"]] if obj.get("a_objEzsignformfield") is not None else None,
            "a_objDropdownElement": [CustomDropdownElementResponse.from_dict(_item) for _item in obj["a_objDropdownElement"]] if obj.get("a_objDropdownElement") is not None else None,
            "a_objEzsignformfieldgroupsigner": [EzsignformfieldgroupsignerResponse.from_dict(_item) for _item in obj["a_objEzsignformfieldgroupsigner"]] if obj.get("a_objEzsignformfieldgroupsigner") is not None else None
        })
        return _obj


