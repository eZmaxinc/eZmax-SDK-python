# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.1
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import ConfigDict, Field
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from eZmaxApi.models.communication_request import CommunicationRequest
from eZmaxApi.models.communicationexternalrecipient_request_compound import CommunicationexternalrecipientRequestCompound
from eZmaxApi.models.communicationrecipient_request_compound import CommunicationrecipientRequestCompound
from eZmaxApi.models.communicationreference_request import CommunicationreferenceRequest
from eZmaxApi.models.custom_communicationattachment_request import CustomCommunicationattachmentRequest
from eZmaxApi.models.custom_communicationsender_request import CustomCommunicationsenderRequest
from eZmaxApi.models.field_e_communication_importance import FieldECommunicationImportance
from eZmaxApi.models.field_e_communication_type import FieldECommunicationType
from typing import Optional, Set
from typing_extensions import Self

class CommunicationRequestCompound(CommunicationRequest):
    """
    Request for POST /1/object/communication
    """ # noqa: E501
    a_obj_communicationattachment: Annotated[List[CustomCommunicationattachmentRequest], Field(min_length=0)] = Field(alias="a_objCommunicationattachment")
    a_obj_communicationrecipient: Annotated[List[CommunicationrecipientRequestCompound], Field(min_length=0)] = Field(alias="a_objCommunicationrecipient")
    a_obj_communicationreference: Annotated[List[CommunicationreferenceRequest], Field(min_length=0)] = Field(alias="a_objCommunicationreference")
    a_obj_communicationexternalrecipient: Annotated[List[CommunicationexternalrecipientRequestCompound], Field(min_length=0)] = Field(alias="a_objCommunicationexternalrecipient")
    __properties: ClassVar[List[str]] = ["pkiCommunicationID", "eCommunicationImportance", "eCommunicationType", "objCommunicationsender", "sCommunicationSubject", "tCommunicationBody", "bCommunicationPrivate", "eCommunicationAttachmenttype", "iCommunicationAttachmentlinkexpiration", "bCommunicationReadreceipt", "a_objCommunicationattachment", "a_objCommunicationrecipient", "a_objCommunicationreference", "a_objCommunicationexternalrecipient"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CommunicationRequestCompound from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of obj_communicationsender
        if self.obj_communicationsender:
            _dict['objCommunicationsender'] = self.obj_communicationsender.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in a_obj_communicationattachment (list)
        _items = []
        if self.a_obj_communicationattachment:
            for _item_a_obj_communicationattachment in self.a_obj_communicationattachment:
                if _item_a_obj_communicationattachment:
                    _items.append(_item_a_obj_communicationattachment.to_dict())
            _dict['a_objCommunicationattachment'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in a_obj_communicationrecipient (list)
        _items = []
        if self.a_obj_communicationrecipient:
            for _item_a_obj_communicationrecipient in self.a_obj_communicationrecipient:
                if _item_a_obj_communicationrecipient:
                    _items.append(_item_a_obj_communicationrecipient.to_dict())
            _dict['a_objCommunicationrecipient'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in a_obj_communicationreference (list)
        _items = []
        if self.a_obj_communicationreference:
            for _item_a_obj_communicationreference in self.a_obj_communicationreference:
                if _item_a_obj_communicationreference:
                    _items.append(_item_a_obj_communicationreference.to_dict())
            _dict['a_objCommunicationreference'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in a_obj_communicationexternalrecipient (list)
        _items = []
        if self.a_obj_communicationexternalrecipient:
            for _item_a_obj_communicationexternalrecipient in self.a_obj_communicationexternalrecipient:
                if _item_a_obj_communicationexternalrecipient:
                    _items.append(_item_a_obj_communicationexternalrecipient.to_dict())
            _dict['a_objCommunicationexternalrecipient'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CommunicationRequestCompound from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "pkiCommunicationID": obj.get("pkiCommunicationID"),
            "eCommunicationImportance": obj.get("eCommunicationImportance"),
            "eCommunicationType": obj.get("eCommunicationType"),
            "objCommunicationsender": CustomCommunicationsenderRequest.from_dict(obj["objCommunicationsender"]) if obj.get("objCommunicationsender") is not None else None,
            "sCommunicationSubject": obj.get("sCommunicationSubject"),
            "tCommunicationBody": obj.get("tCommunicationBody"),
            "bCommunicationPrivate": obj.get("bCommunicationPrivate"),
            "eCommunicationAttachmenttype": obj.get("eCommunicationAttachmenttype"),
            "iCommunicationAttachmentlinkexpiration": obj.get("iCommunicationAttachmentlinkexpiration"),
            "bCommunicationReadreceipt": obj.get("bCommunicationReadreceipt"),
            "a_objCommunicationattachment": [CustomCommunicationattachmentRequest.from_dict(_item) for _item in obj["a_objCommunicationattachment"]] if obj.get("a_objCommunicationattachment") is not None else None,
            "a_objCommunicationrecipient": [CommunicationrecipientRequestCompound.from_dict(_item) for _item in obj["a_objCommunicationrecipient"]] if obj.get("a_objCommunicationrecipient") is not None else None,
            "a_objCommunicationreference": [CommunicationreferenceRequest.from_dict(_item) for _item in obj["a_objCommunicationreference"]] if obj.get("a_objCommunicationreference") is not None else None,
            "a_objCommunicationexternalrecipient": [CommunicationexternalrecipientRequestCompound.from_dict(_item) for _item in obj["a_objCommunicationexternalrecipient"]] if obj.get("a_objCommunicationexternalrecipient") is not None else None
        })
        return _obj


