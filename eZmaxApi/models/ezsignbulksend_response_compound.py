# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.0
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import BaseModel, Field, StrictBool, StrictStr, conint, conlist
from eZmaxApi.models.common_audit import CommonAudit
from eZmaxApi.models.ezsignbulksenddocumentmapping_response_compound import EzsignbulksenddocumentmappingResponseCompound
from eZmaxApi.models.ezsignbulksendsignermapping_response import EzsignbulksendsignermappingResponse
from eZmaxApi.models.field_e_ezsignfoldertype_privacylevel import FieldEEzsignfoldertypePrivacylevel

class EzsignbulksendResponseCompound(BaseModel):
    """
    An Ezsignbulksend Object and children to create a complete structure  # noqa: E501
    """
    pki_ezsignbulksend_id: conint(strict=True, ge=0) = Field(..., alias="pkiEzsignbulksendID", description="The unique ID of the Ezsignbulksend")
    fki_ezsignfoldertype_id: conint(strict=True, ge=0) = Field(..., alias="fkiEzsignfoldertypeID", description="The unique ID of the Ezsignfoldertype.")
    fki_language_id: conint(strict=True, le=2, ge=1) = Field(..., alias="fkiLanguageID", description="The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|")
    s_language_name_x: StrictStr = Field(..., alias="sLanguageNameX", description="The Name of the Language in the language of the requester")
    e_ezsignfoldertype_privacylevel: FieldEEzsignfoldertypePrivacylevel = Field(..., alias="eEzsignfoldertypePrivacylevel")
    s_ezsignfoldertype_name_x: StrictStr = Field(..., alias="sEzsignfoldertypeNameX", description="The name of the Ezsignfoldertype in the language of the requester")
    s_ezsignbulksend_description: StrictStr = Field(..., alias="sEzsignbulksendDescription", description="The description of the Ezsignbulksend")
    t_ezsignbulksend_note: StrictStr = Field(..., alias="tEzsignbulksendNote", description="Note about the Ezsignbulksend")
    b_ezsignbulksend_needvalidation: StrictBool = Field(..., alias="bEzsignbulksendNeedvalidation", description="Whether the Ezsigntemplatepackage was automatically modified and needs a manual validation")
    b_ezsignbulksend_isactive: StrictBool = Field(..., alias="bEzsignbulksendIsactive", description="Whether the Ezsignbulksend is active or not")
    obj_audit: CommonAudit = Field(..., alias="objAudit")
    a_obj_ezsignbulksenddocumentmapping: conlist(EzsignbulksenddocumentmappingResponseCompound) = Field(..., alias="a_objEzsignbulksenddocumentmapping")
    a_obj_ezsignbulksendsignermapping: conlist(EzsignbulksendsignermappingResponse) = Field(..., alias="a_objEzsignbulksendsignermapping")
    __properties = ["pkiEzsignbulksendID", "fkiEzsignfoldertypeID", "fkiLanguageID", "sLanguageNameX", "eEzsignfoldertypePrivacylevel", "sEzsignfoldertypeNameX", "sEzsignbulksendDescription", "tEzsignbulksendNote", "bEzsignbulksendNeedvalidation", "bEzsignbulksendIsactive", "objAudit", "a_objEzsignbulksenddocumentmapping", "a_objEzsignbulksendsignermapping"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> EzsignbulksendResponseCompound:
        """Create an instance of EzsignbulksendResponseCompound from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of obj_audit
        if self.obj_audit:
            _dict['objAudit'] = self.obj_audit.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in a_obj_ezsignbulksenddocumentmapping (list)
        _items = []
        if self.a_obj_ezsignbulksenddocumentmapping:
            for _item in self.a_obj_ezsignbulksenddocumentmapping:
                if _item:
                    _items.append(_item.to_dict())
            _dict['a_objEzsignbulksenddocumentmapping'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in a_obj_ezsignbulksendsignermapping (list)
        _items = []
        if self.a_obj_ezsignbulksendsignermapping:
            for _item in self.a_obj_ezsignbulksendsignermapping:
                if _item:
                    _items.append(_item.to_dict())
            _dict['a_objEzsignbulksendsignermapping'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> EzsignbulksendResponseCompound:
        """Create an instance of EzsignbulksendResponseCompound from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return EzsignbulksendResponseCompound.parse_obj(obj)

        _obj = EzsignbulksendResponseCompound.parse_obj({
            "pki_ezsignbulksend_id": obj.get("pkiEzsignbulksendID"),
            "fki_ezsignfoldertype_id": obj.get("fkiEzsignfoldertypeID"),
            "fki_language_id": obj.get("fkiLanguageID"),
            "s_language_name_x": obj.get("sLanguageNameX"),
            "e_ezsignfoldertype_privacylevel": obj.get("eEzsignfoldertypePrivacylevel"),
            "s_ezsignfoldertype_name_x": obj.get("sEzsignfoldertypeNameX"),
            "s_ezsignbulksend_description": obj.get("sEzsignbulksendDescription"),
            "t_ezsignbulksend_note": obj.get("tEzsignbulksendNote"),
            "b_ezsignbulksend_needvalidation": obj.get("bEzsignbulksendNeedvalidation"),
            "b_ezsignbulksend_isactive": obj.get("bEzsignbulksendIsactive"),
            "obj_audit": CommonAudit.from_dict(obj.get("objAudit")) if obj.get("objAudit") is not None else None,
            "a_obj_ezsignbulksenddocumentmapping": [EzsignbulksenddocumentmappingResponseCompound.from_dict(_item) for _item in obj.get("a_objEzsignbulksenddocumentmapping")] if obj.get("a_objEzsignbulksenddocumentmapping") is not None else None,
            "a_obj_ezsignbulksendsignermapping": [EzsignbulksendsignermappingResponse.from_dict(_item) for _item in obj.get("a_objEzsignbulksendsignermapping")] if obj.get("a_objEzsignbulksendsignermapping") is not None else None
        })
        return _obj


