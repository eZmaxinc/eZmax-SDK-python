# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.0
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conint, conlist
from eZmaxApi.models.permission_response_compound import PermissionResponseCompound

class ModulesectionResponseCompound(BaseModel):
    """
    A Modulesection Object  # noqa: E501
    """
    pki_modulesection_id: conint(strict=True, ge=0) = Field(..., alias="pkiModulesectionID", description="The unique ID of the Modulesection")
    fki_module_id: conint(strict=True, ge=0) = Field(..., alias="fkiModuleID", description="The unique ID of the Module")
    s_modulesection_internalname: StrictStr = Field(..., alias="sModulesectionInternalname", description="The Internal name of the Module section.")
    s_modulesection_name_x: StrictStr = Field(..., alias="sModulesectionNameX", description="The Name of the Modulesection in the language of the requester")
    a_obj_permission: Optional[conlist(PermissionResponseCompound)] = Field(None, alias="a_objPermission")
    __properties = ["pkiModulesectionID", "fkiModuleID", "sModulesectionInternalname", "sModulesectionNameX", "a_objPermission"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ModulesectionResponseCompound:
        """Create an instance of ModulesectionResponseCompound from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in a_obj_permission (list)
        _items = []
        if self.a_obj_permission:
            for _item in self.a_obj_permission:
                if _item:
                    _items.append(_item.to_dict())
            _dict['a_objPermission'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ModulesectionResponseCompound:
        """Create an instance of ModulesectionResponseCompound from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ModulesectionResponseCompound.parse_obj(obj)

        _obj = ModulesectionResponseCompound.parse_obj({
            "pki_modulesection_id": obj.get("pkiModulesectionID"),
            "fki_module_id": obj.get("fkiModuleID"),
            "s_modulesection_internalname": obj.get("sModulesectionInternalname"),
            "s_modulesection_name_x": obj.get("sModulesectionNameX"),
            "a_obj_permission": [PermissionResponseCompound.from_dict(_item) for _item in obj.get("a_objPermission")] if obj.get("a_objPermission") is not None else None
        })
        return _obj


