# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.0
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conint, constr
from eZmaxApi.models.field_e_webhook_ezsignevent import FieldEWebhookEzsignevent
from eZmaxApi.models.field_e_webhook_managementevent import FieldEWebhookManagementevent
from eZmaxApi.models.field_e_webhook_module import FieldEWebhookModule

class CustomWebhookResponse(BaseModel):
    """
    A custom Webhook object  # noqa: E501
    """
    pki_webhook_id: StrictInt = Field(..., alias="pkiWebhookID", description="The unique ID of the Webhook")
    s_webhook_description: StrictStr = Field(..., alias="sWebhookDescription", description="The description of the Webhook")
    fki_ezsignfoldertype_id: Optional[conint(strict=True, ge=0)] = Field(None, alias="fkiEzsignfoldertypeID", description="The unique ID of the Ezsignfoldertype.")
    s_ezsignfoldertype_name_x: Optional[StrictStr] = Field(None, alias="sEzsignfoldertypeNameX", description="The name of the Ezsignfoldertype in the language of the requester")
    e_webhook_module: FieldEWebhookModule = Field(..., alias="eWebhookModule")
    e_webhook_ezsignevent: Optional[FieldEWebhookEzsignevent] = Field(None, alias="eWebhookEzsignevent")
    e_webhook_managementevent: Optional[FieldEWebhookManagementevent] = Field(None, alias="eWebhookManagementevent")
    s_webhook_url: StrictStr = Field(..., alias="sWebhookUrl", description="The URL of the Webhook callback")
    s_webhook_emailfailed: StrictStr = Field(..., alias="sWebhookEmailfailed", description="The email that will receive the Webhook in case all attempts fail")
    b_webhook_isactive: StrictBool = Field(..., alias="bWebhookIsactive", description="Whether the Webhook is active or not")
    b_webhook_skipsslvalidation: StrictBool = Field(..., alias="bWebhookSkipsslvalidation", description="Wheter the server's SSL certificate should be validated or not. Not recommended to skip for production use")
    pks_customer_code: constr(strict=True, max_length=6, min_length=2) = Field(..., alias="pksCustomerCode", description="The customer code assigned to your account")
    b_webhook_test: StrictBool = Field(..., alias="bWebhookTest", description="Wheter the webhook received is a manual test or a real event")
    __properties = ["pkiWebhookID", "sWebhookDescription", "fkiEzsignfoldertypeID", "sEzsignfoldertypeNameX", "eWebhookModule", "eWebhookEzsignevent", "eWebhookManagementevent", "sWebhookUrl", "sWebhookEmailfailed", "bWebhookIsactive", "bWebhookSkipsslvalidation", "pksCustomerCode", "bWebhookTest"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CustomWebhookResponse:
        """Create an instance of CustomWebhookResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CustomWebhookResponse:
        """Create an instance of CustomWebhookResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CustomWebhookResponse.parse_obj(obj)

        _obj = CustomWebhookResponse.parse_obj({
            "pki_webhook_id": obj.get("pkiWebhookID"),
            "s_webhook_description": obj.get("sWebhookDescription"),
            "fki_ezsignfoldertype_id": obj.get("fkiEzsignfoldertypeID"),
            "s_ezsignfoldertype_name_x": obj.get("sEzsignfoldertypeNameX"),
            "e_webhook_module": obj.get("eWebhookModule"),
            "e_webhook_ezsignevent": obj.get("eWebhookEzsignevent"),
            "e_webhook_managementevent": obj.get("eWebhookManagementevent"),
            "s_webhook_url": obj.get("sWebhookUrl"),
            "s_webhook_emailfailed": obj.get("sWebhookEmailfailed"),
            "b_webhook_isactive": obj.get("bWebhookIsactive"),
            "b_webhook_skipsslvalidation": obj.get("bWebhookSkipsslvalidation"),
            "pks_customer_code": obj.get("pksCustomerCode"),
            "b_webhook_test": obj.get("bWebhookTest")
        })
        return _obj


