# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.0
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from pydantic import Field
from typing_extensions import Annotated
from eZmaxApi.models.common_audit import CommonAudit
from eZmaxApi.models.field_e_webhook_ezsignevent import FieldEWebhookEzsignevent
from eZmaxApi.models.field_e_webhook_managementevent import FieldEWebhookManagementevent
from eZmaxApi.models.field_e_webhook_module import FieldEWebhookModule
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class CustomWebhookResponse(BaseModel):
    """
    A custom Webhook object
    """ # noqa: E501
    pki_webhook_id: StrictInt = Field(description="The unique ID of the Webhook", alias="pkiWebhookID")
    s_webhook_description: StrictStr = Field(description="The description of the Webhook", alias="sWebhookDescription")
    fki_ezsignfoldertype_id: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The unique ID of the Ezsignfoldertype.", alias="fkiEzsignfoldertypeID")
    s_ezsignfoldertype_name_x: Optional[StrictStr] = Field(default=None, description="The name of the Ezsignfoldertype in the language of the requester", alias="sEzsignfoldertypeNameX")
    e_webhook_module: FieldEWebhookModule = Field(alias="eWebhookModule")
    e_webhook_ezsignevent: Optional[FieldEWebhookEzsignevent] = Field(default=None, alias="eWebhookEzsignevent")
    e_webhook_managementevent: Optional[FieldEWebhookManagementevent] = Field(default=None, alias="eWebhookManagementevent")
    s_webhook_url: StrictStr = Field(description="The URL of the Webhook callback", alias="sWebhookUrl")
    s_webhook_emailfailed: StrictStr = Field(description="The email that will receive the Webhook in case all attempts fail", alias="sWebhookEmailfailed")
    s_webhook_apikey: Optional[StrictStr] = Field(default=None, description="The Apikey for the Webhook.  This will be hidden if we are not creating or regenerating the Apikey.", alias="sWebhookApikey")
    s_webhook_secret: Optional[StrictStr] = Field(default=None, description="The Secret for the Webhook.  This will be hidden if we are not creating or regenerating the Apikey.", alias="sWebhookSecret")
    b_webhook_isactive: StrictBool = Field(description="Whether the Webhook is active or not", alias="bWebhookIsactive")
    b_webhook_issigned: StrictBool = Field(description="Whether the requests will be signed or not", alias="bWebhookIssigned")
    b_webhook_skipsslvalidation: StrictBool = Field(description="Wheter the server's SSL certificate should be validated or not. Not recommended to skip for production use", alias="bWebhookSkipsslvalidation")
    obj_audit: CommonAudit = Field(alias="objAudit")
    pks_customer_code: Annotated[str, Field(min_length=2, strict=True, max_length=6)] = Field(description="The customer code assigned to your account", alias="pksCustomerCode")
    b_webhook_test: StrictBool = Field(description="Wheter the webhook received is a manual test or a real event", alias="bWebhookTest")
    __properties: ClassVar[List[str]] = ["pkiWebhookID", "sWebhookDescription", "fkiEzsignfoldertypeID", "sEzsignfoldertypeNameX", "eWebhookModule", "eWebhookEzsignevent", "eWebhookManagementevent", "sWebhookUrl", "sWebhookEmailfailed", "sWebhookApikey", "sWebhookSecret", "bWebhookIsactive", "bWebhookIssigned", "bWebhookSkipsslvalidation", "objAudit", "pksCustomerCode", "bWebhookTest"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of CustomWebhookResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of obj_audit
        if self.obj_audit:
            _dict['objAudit'] = self.obj_audit.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of CustomWebhookResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "pkiWebhookID": obj.get("pkiWebhookID"),
            "sWebhookDescription": obj.get("sWebhookDescription"),
            "fkiEzsignfoldertypeID": obj.get("fkiEzsignfoldertypeID"),
            "sEzsignfoldertypeNameX": obj.get("sEzsignfoldertypeNameX"),
            "eWebhookModule": obj.get("eWebhookModule"),
            "eWebhookEzsignevent": obj.get("eWebhookEzsignevent"),
            "eWebhookManagementevent": obj.get("eWebhookManagementevent"),
            "sWebhookUrl": obj.get("sWebhookUrl"),
            "sWebhookEmailfailed": obj.get("sWebhookEmailfailed"),
            "sWebhookApikey": obj.get("sWebhookApikey"),
            "sWebhookSecret": obj.get("sWebhookSecret"),
            "bWebhookIsactive": obj.get("bWebhookIsactive"),
            "bWebhookIssigned": obj.get("bWebhookIssigned"),
            "bWebhookSkipsslvalidation": obj.get("bWebhookSkipsslvalidation"),
            "objAudit": CommonAudit.from_dict(obj.get("objAudit")) if obj.get("objAudit") is not None else None,
            "pksCustomerCode": obj.get("pksCustomerCode"),
            "bWebhookTest": obj.get("bWebhookTest")
        })
        return _obj


