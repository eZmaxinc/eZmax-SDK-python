# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.0
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, conlist
from eZmaxApi.models.common_response_obj_debug import CommonResponseObjDebug
from eZmaxApi.models.common_response_obj_debug_payload import CommonResponseObjDebugPayload
from eZmaxApi.models.custom_autocomplete_element_response import CustomAutocompleteElementResponse

class CommonGetAutocompleteV1Response(BaseModel):
    """
    Response for GET /1/object/xxx/getAutocomplete  # noqa: E501
    """
    obj_debug_payload: CommonResponseObjDebugPayload = Field(..., alias="objDebugPayload")
    obj_debug: Optional[CommonResponseObjDebug] = Field(None, alias="objDebug")
    m_payload: conlist(CustomAutocompleteElementResponse) = Field(..., alias="mPayload", description="Generic Autocomplete Response")
    __properties = ["objDebugPayload", "objDebug", "mPayload"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CommonGetAutocompleteV1Response:
        """Create an instance of CommonGetAutocompleteV1Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of obj_debug_payload
        if self.obj_debug_payload:
            _dict['objDebugPayload'] = self.obj_debug_payload.to_dict()
        # override the default output from pydantic by calling `to_dict()` of obj_debug
        if self.obj_debug:
            _dict['objDebug'] = self.obj_debug.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in m_payload (list)
        _items = []
        if self.m_payload:
            for _item in self.m_payload:
                if _item:
                    _items.append(_item.to_dict())
            _dict['mPayload'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CommonGetAutocompleteV1Response:
        """Create an instance of CommonGetAutocompleteV1Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CommonGetAutocompleteV1Response.parse_obj(obj)

        _obj = CommonGetAutocompleteV1Response.parse_obj({
            "obj_debug_payload": CommonResponseObjDebugPayload.from_dict(obj.get("objDebugPayload")) if obj.get("objDebugPayload") is not None else None,
            "obj_debug": CommonResponseObjDebug.from_dict(obj.get("objDebug")) if obj.get("objDebug") is not None else None,
            "m_payload": [CustomAutocompleteElementResponse.from_dict(_item) for _item in obj.get("mPayload")] if obj.get("mPayload") is not None else None
        })
        return _obj


