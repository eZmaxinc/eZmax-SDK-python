# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.0
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conint, conlist
from eZmaxApi.models.common_audit import CommonAudit
from eZmaxApi.models.communicationattachment_response_compound import CommunicationattachmentResponseCompound
from eZmaxApi.models.communicationexternalrecipient_response_compound import CommunicationexternalrecipientResponseCompound
from eZmaxApi.models.communicationrecipient_response_compound import CommunicationrecipientResponseCompound
from eZmaxApi.models.computed_e_communication_direction import ComputedECommunicationDirection
from eZmaxApi.models.descriptionstatic_response import DescriptionstaticResponse
from eZmaxApi.models.emailstatic_response import EmailstaticResponse
from eZmaxApi.models.field_e_communication_importance import FieldECommunicationImportance
from eZmaxApi.models.field_e_communication_type import FieldECommunicationType
from eZmaxApi.models.phonestatic_response import PhonestaticResponse

class CommunicationResponseCompound(BaseModel):
    """
    A Communication Object  # noqa: E501
    """
    pki_communication_id: conint(strict=True, ge=0) = Field(..., alias="pkiCommunicationID", description="The unique ID of the Communication.")
    e_communication_importance: FieldECommunicationImportance = Field(..., alias="eCommunicationImportance")
    e_communication_type: FieldECommunicationType = Field(..., alias="eCommunicationType")
    s_communication_subject: StrictStr = Field(..., alias="sCommunicationSubject", description="The subject of the Communication")
    s_communication_bodyurl: Optional[StrictStr] = Field(None, alias="sCommunicationBodyurl", description="The url of the body used as body in the Communication")
    e_communication_direction: ComputedECommunicationDirection = Field(..., alias="eCommunicationDirection")
    i_communicationrecipient_count: StrictInt = Field(..., alias="iCommunicationrecipientCount", description="The count of Communicationrecipient")
    b_communication_private: StrictBool = Field(..., alias="bCommunicationPrivate", description="Whether the Communication is private or not")
    obj_descriptionstatic_sender: Optional[DescriptionstaticResponse] = Field(None, alias="objDescriptionstaticSender")
    obj_emailstatic_sender: Optional[EmailstaticResponse] = Field(None, alias="objEmailstaticSender")
    obj_phonestatic_sender: Optional[PhonestaticResponse] = Field(None, alias="objPhonestaticSender")
    obj_audit: CommonAudit = Field(..., alias="objAudit")
    a_obj_communicationattachment: conlist(CommunicationattachmentResponseCompound) = Field(..., alias="a_objCommunicationattachment")
    a_obj_communicationrecipient: conlist(CommunicationrecipientResponseCompound) = Field(..., alias="a_objCommunicationrecipient")
    a_obj_communicationexternalrecipient: conlist(CommunicationexternalrecipientResponseCompound) = Field(..., alias="a_objCommunicationexternalrecipient")
    __properties = ["pkiCommunicationID", "eCommunicationImportance", "eCommunicationType", "sCommunicationSubject", "sCommunicationBodyurl", "eCommunicationDirection", "iCommunicationrecipientCount", "bCommunicationPrivate", "objDescriptionstaticSender", "objEmailstaticSender", "objPhonestaticSender", "objAudit", "a_objCommunicationattachment", "a_objCommunicationrecipient", "a_objCommunicationexternalrecipient"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CommunicationResponseCompound:
        """Create an instance of CommunicationResponseCompound from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of obj_descriptionstatic_sender
        if self.obj_descriptionstatic_sender:
            _dict['objDescriptionstaticSender'] = self.obj_descriptionstatic_sender.to_dict()
        # override the default output from pydantic by calling `to_dict()` of obj_emailstatic_sender
        if self.obj_emailstatic_sender:
            _dict['objEmailstaticSender'] = self.obj_emailstatic_sender.to_dict()
        # override the default output from pydantic by calling `to_dict()` of obj_phonestatic_sender
        if self.obj_phonestatic_sender:
            _dict['objPhonestaticSender'] = self.obj_phonestatic_sender.to_dict()
        # override the default output from pydantic by calling `to_dict()` of obj_audit
        if self.obj_audit:
            _dict['objAudit'] = self.obj_audit.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in a_obj_communicationattachment (list)
        _items = []
        if self.a_obj_communicationattachment:
            for _item in self.a_obj_communicationattachment:
                if _item:
                    _items.append(_item.to_dict())
            _dict['a_objCommunicationattachment'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in a_obj_communicationrecipient (list)
        _items = []
        if self.a_obj_communicationrecipient:
            for _item in self.a_obj_communicationrecipient:
                if _item:
                    _items.append(_item.to_dict())
            _dict['a_objCommunicationrecipient'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in a_obj_communicationexternalrecipient (list)
        _items = []
        if self.a_obj_communicationexternalrecipient:
            for _item in self.a_obj_communicationexternalrecipient:
                if _item:
                    _items.append(_item.to_dict())
            _dict['a_objCommunicationexternalrecipient'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CommunicationResponseCompound:
        """Create an instance of CommunicationResponseCompound from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CommunicationResponseCompound.parse_obj(obj)

        _obj = CommunicationResponseCompound.parse_obj({
            "pki_communication_id": obj.get("pkiCommunicationID"),
            "e_communication_importance": obj.get("eCommunicationImportance"),
            "e_communication_type": obj.get("eCommunicationType"),
            "s_communication_subject": obj.get("sCommunicationSubject"),
            "s_communication_bodyurl": obj.get("sCommunicationBodyurl"),
            "e_communication_direction": obj.get("eCommunicationDirection"),
            "i_communicationrecipient_count": obj.get("iCommunicationrecipientCount"),
            "b_communication_private": obj.get("bCommunicationPrivate"),
            "obj_descriptionstatic_sender": DescriptionstaticResponse.from_dict(obj.get("objDescriptionstaticSender")) if obj.get("objDescriptionstaticSender") is not None else None,
            "obj_emailstatic_sender": EmailstaticResponse.from_dict(obj.get("objEmailstaticSender")) if obj.get("objEmailstaticSender") is not None else None,
            "obj_phonestatic_sender": PhonestaticResponse.from_dict(obj.get("objPhonestaticSender")) if obj.get("objPhonestaticSender") is not None else None,
            "obj_audit": CommonAudit.from_dict(obj.get("objAudit")) if obj.get("objAudit") is not None else None,
            "a_obj_communicationattachment": [CommunicationattachmentResponseCompound.from_dict(_item) for _item in obj.get("a_objCommunicationattachment")] if obj.get("a_objCommunicationattachment") is not None else None,
            "a_obj_communicationrecipient": [CommunicationrecipientResponseCompound.from_dict(_item) for _item in obj.get("a_objCommunicationrecipient")] if obj.get("a_objCommunicationrecipient") is not None else None,
            "a_obj_communicationexternalrecipient": [CommunicationexternalrecipientResponseCompound.from_dict(_item) for _item in obj.get("a_objCommunicationexternalrecipient")] if obj.get("a_objCommunicationexternalrecipient") is not None else None
        })
        return _obj


