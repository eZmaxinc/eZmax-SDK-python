# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.1
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class EzsignpageResponseCompound(BaseModel):
    """
    An Ezsignpage Object and children to create a complete structure
    """ # noqa: E501
    pki_ezsignpage_id: Annotated[int, Field(strict=True, ge=0)] = Field(description="The unique ID of the Ezsignpage", alias="pkiEzsignpageID")
    i_ezsignpage_widthimage: Annotated[int, Field(strict=True, ge=0)] = Field(description="The Width of the page's image in pixels calculated at 100 DPI", alias="iEzsignpageWidthimage")
    i_ezsignpage_heightimage: Annotated[int, Field(strict=True, ge=0)] = Field(description="The Height of the page's image in pixels calculated at 100 DPI", alias="iEzsignpageHeightimage")
    i_ezsignpage_widthpdf: Annotated[int, Field(strict=True, ge=0)] = Field(description="The Width of the page in points calculated at 72 DPI", alias="iEzsignpageWidthpdf")
    i_ezsignpage_heightpdf: Annotated[int, Field(strict=True, ge=0)] = Field(description="The Height of the page in points calculated at 72 DPI", alias="iEzsignpageHeightpdf")
    i_ezsignpage_pagenumber: Annotated[int, Field(strict=True, ge=1)] = Field(description="The page number in the Ezsigndocument", alias="iEzsignpagePagenumber")
    s_computed_imageurl: StrictStr = Field(description="The Url to the Ezsignpage's rasterized image.  Url will expire after 5 minutes.", alias="sComputedImageurl")
    __properties: ClassVar[List[str]] = ["pkiEzsignpageID", "iEzsignpageWidthimage", "iEzsignpageHeightimage", "iEzsignpageWidthpdf", "iEzsignpageHeightpdf", "iEzsignpagePagenumber", "sComputedImageurl"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EzsignpageResponseCompound from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EzsignpageResponseCompound from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "pkiEzsignpageID": obj.get("pkiEzsignpageID"),
            "iEzsignpageWidthimage": obj.get("iEzsignpageWidthimage"),
            "iEzsignpageHeightimage": obj.get("iEzsignpageHeightimage"),
            "iEzsignpageWidthpdf": obj.get("iEzsignpageWidthpdf"),
            "iEzsignpageHeightpdf": obj.get("iEzsignpageHeightpdf"),
            "iEzsignpagePagenumber": obj.get("iEzsignpagePagenumber"),
            "sComputedImageurl": obj.get("sComputedImageurl")
        })
        return _obj


