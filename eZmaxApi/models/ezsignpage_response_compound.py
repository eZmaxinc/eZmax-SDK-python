# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.0
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictStr, conint

class EzsignpageResponseCompound(BaseModel):
    """
    An Ezsignpage Object and children to create a complete structure  # noqa: E501
    """
    pki_ezsignpage_id: conint(strict=True, ge=0) = Field(..., alias="pkiEzsignpageID", description="The unique ID of the Ezsignpage")
    i_ezsignpage_widthimage: conint(strict=True, ge=0) = Field(..., alias="iEzsignpageWidthimage", description="The Width of the page's image in pixels calculated at 100 DPI")
    i_ezsignpage_heightimage: conint(strict=True, ge=0) = Field(..., alias="iEzsignpageHeightimage", description="The Height of the page's image in pixels calculated at 100 DPI")
    i_ezsignpage_widthpdf: conint(strict=True, ge=0) = Field(..., alias="iEzsignpageWidthpdf", description="The Width of the page in points calculated at 72 DPI")
    i_ezsignpage_heightpdf: conint(strict=True, ge=0) = Field(..., alias="iEzsignpageHeightpdf", description="The Height of the page in points calculated at 72 DPI")
    i_ezsignpage_pagenumber: conint(strict=True, ge=1) = Field(..., alias="iEzsignpagePagenumber", description="The page number in the Ezsigndocument")
    s_computed_imageurl: StrictStr = Field(..., alias="sComputedImageurl", description="The Url to the Ezsignpage's rasterized image.  Url will expire after 5 minutes.")
    __properties = ["pkiEzsignpageID", "iEzsignpageWidthimage", "iEzsignpageHeightimage", "iEzsignpageWidthpdf", "iEzsignpageHeightpdf", "iEzsignpagePagenumber", "sComputedImageurl"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> EzsignpageResponseCompound:
        """Create an instance of EzsignpageResponseCompound from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> EzsignpageResponseCompound:
        """Create an instance of EzsignpageResponseCompound from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return EzsignpageResponseCompound.parse_obj(obj)

        _obj = EzsignpageResponseCompound.parse_obj({
            "pki_ezsignpage_id": obj.get("pkiEzsignpageID"),
            "i_ezsignpage_widthimage": obj.get("iEzsignpageWidthimage"),
            "i_ezsignpage_heightimage": obj.get("iEzsignpageHeightimage"),
            "i_ezsignpage_widthpdf": obj.get("iEzsignpageWidthpdf"),
            "i_ezsignpage_heightpdf": obj.get("iEzsignpageHeightpdf"),
            "i_ezsignpage_pagenumber": obj.get("iEzsignpagePagenumber"),
            "s_computed_imageurl": obj.get("sComputedImageurl")
        })
        return _obj


