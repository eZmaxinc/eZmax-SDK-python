# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.0
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conint, conlist
from eZmaxApi.models.common_audit import CommonAudit
from eZmaxApi.models.ezsigntemplatedocument_response import EzsigntemplatedocumentResponse
from eZmaxApi.models.ezsigntemplatesigner_response_compound import EzsigntemplatesignerResponseCompound

class EzsigntemplateGetObjectV1ResponseMPayload(BaseModel):
    """
    Payload for GET /1/object/ezsigntemplate/{pkiEzsigntemplateID}  # noqa: E501
    """
    pki_ezsigntemplate_id: conint(strict=True, ge=0) = Field(..., alias="pkiEzsigntemplateID", description="The unique ID of the Ezsigntemplate")
    fki_ezsigntemplatedocument_id: Optional[conint(strict=True, ge=0)] = Field(None, alias="fkiEzsigntemplatedocumentID", description="The unique ID of the Ezsigntemplatedocument")
    fki_ezsignfoldertype_id: conint(strict=True, ge=0) = Field(..., alias="fkiEzsignfoldertypeID", description="The unique ID of the Ezsignfoldertype.")
    fki_language_id: conint(strict=True, le=2, ge=1) = Field(..., alias="fkiLanguageID", description="The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|")
    s_language_name_x: StrictStr = Field(..., alias="sLanguageNameX", description="The Name of the Language in the language of the requester")
    s_ezsigntemplate_description: StrictStr = Field(..., alias="sEzsigntemplateDescription", description="The description of the Ezsigntemplate")
    b_ezsigntemplate_adminonly: StrictBool = Field(..., alias="bEzsigntemplateAdminonly", description="Whether the Ezsigntemplate can be accessed by admin users only (eUserType=Normal)")
    s_ezsignfoldertype_name_x: StrictStr = Field(..., alias="sEzsignfoldertypeNameX", description="The name of the Ezsignfoldertype in the language of the requester")
    obj_audit: CommonAudit = Field(..., alias="objAudit")
    obj_ezsigntemplatedocument: Optional[EzsigntemplatedocumentResponse] = Field(None, alias="objEzsigntemplatedocument")
    a_obj_ezsigntemplatesigner: conlist(EzsigntemplatesignerResponseCompound) = Field(..., alias="a_objEzsigntemplatesigner")
    __properties = ["pkiEzsigntemplateID", "fkiEzsigntemplatedocumentID", "fkiEzsignfoldertypeID", "fkiLanguageID", "sLanguageNameX", "sEzsigntemplateDescription", "bEzsigntemplateAdminonly", "sEzsignfoldertypeNameX", "objAudit", "objEzsigntemplatedocument", "a_objEzsigntemplatesigner"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> EzsigntemplateGetObjectV1ResponseMPayload:
        """Create an instance of EzsigntemplateGetObjectV1ResponseMPayload from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of obj_audit
        if self.obj_audit:
            _dict['objAudit'] = self.obj_audit.to_dict()
        # override the default output from pydantic by calling `to_dict()` of obj_ezsigntemplatedocument
        if self.obj_ezsigntemplatedocument:
            _dict['objEzsigntemplatedocument'] = self.obj_ezsigntemplatedocument.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in a_obj_ezsigntemplatesigner (list)
        _items = []
        if self.a_obj_ezsigntemplatesigner:
            for _item in self.a_obj_ezsigntemplatesigner:
                if _item:
                    _items.append(_item.to_dict())
            _dict['a_objEzsigntemplatesigner'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> EzsigntemplateGetObjectV1ResponseMPayload:
        """Create an instance of EzsigntemplateGetObjectV1ResponseMPayload from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return EzsigntemplateGetObjectV1ResponseMPayload.parse_obj(obj)

        _obj = EzsigntemplateGetObjectV1ResponseMPayload.parse_obj({
            "pki_ezsigntemplate_id": obj.get("pkiEzsigntemplateID"),
            "fki_ezsigntemplatedocument_id": obj.get("fkiEzsigntemplatedocumentID"),
            "fki_ezsignfoldertype_id": obj.get("fkiEzsignfoldertypeID"),
            "fki_language_id": obj.get("fkiLanguageID"),
            "s_language_name_x": obj.get("sLanguageNameX"),
            "s_ezsigntemplate_description": obj.get("sEzsigntemplateDescription"),
            "b_ezsigntemplate_adminonly": obj.get("bEzsigntemplateAdminonly"),
            "s_ezsignfoldertype_name_x": obj.get("sEzsignfoldertypeNameX"),
            "obj_audit": CommonAudit.from_dict(obj.get("objAudit")) if obj.get("objAudit") is not None else None,
            "obj_ezsigntemplatedocument": EzsigntemplatedocumentResponse.from_dict(obj.get("objEzsigntemplatedocument")) if obj.get("objEzsigntemplatedocument") is not None else None,
            "a_obj_ezsigntemplatesigner": [EzsigntemplatesignerResponseCompound.from_dict(_item) for _item in obj.get("a_objEzsigntemplatesigner")] if obj.get("a_objEzsigntemplatesigner") is not None else None
        })
        return _obj


