# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.0
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import BaseModel, Field, StrictBool, StrictStr, conint, conlist
from eZmaxApi.models.modulesection_response_compound import ModulesectionResponseCompound

class ModuleResponseCompound(BaseModel):
    """
    A Module Object  # noqa: E501
    """
    pki_module_id: conint(strict=True, ge=0) = Field(..., alias="pkiModuleID", description="The unique ID of the Module")
    fki_modulegroup_id: conint(strict=True, le=255, ge=1) = Field(..., alias="fkiModulegroupID", description="The unique ID of the Modulegroup")
    e_module_internalname: StrictStr = Field(..., alias="eModuleInternalname", description="The Internal name of the Module.  This is theoretically an enum field but there are so many possibles values we decided not to list them all.")
    s_module_name_x: StrictStr = Field(..., alias="sModuleNameX", description="The Name of the Module in the language of the requester")
    b_module_registered: StrictBool = Field(..., alias="bModuleRegistered", description="Whether the Module is registered or not")
    b_module_registeredapi: StrictBool = Field(..., alias="bModuleRegisteredapi", description="Whether the Module is registered or not for api use")
    a_obj_modulesection: conlist(ModulesectionResponseCompound) = Field(..., alias="a_objModulesection")
    __properties = ["pkiModuleID", "fkiModulegroupID", "eModuleInternalname", "sModuleNameX", "bModuleRegistered", "bModuleRegisteredapi", "a_objModulesection"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ModuleResponseCompound:
        """Create an instance of ModuleResponseCompound from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in a_obj_modulesection (list)
        _items = []
        if self.a_obj_modulesection:
            for _item in self.a_obj_modulesection:
                if _item:
                    _items.append(_item.to_dict())
            _dict['a_objModulesection'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ModuleResponseCompound:
        """Create an instance of ModuleResponseCompound from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ModuleResponseCompound.parse_obj(obj)

        _obj = ModuleResponseCompound.parse_obj({
            "pki_module_id": obj.get("pkiModuleID"),
            "fki_modulegroup_id": obj.get("fkiModulegroupID"),
            "e_module_internalname": obj.get("eModuleInternalname"),
            "s_module_name_x": obj.get("sModuleNameX"),
            "b_module_registered": obj.get("bModuleRegistered"),
            "b_module_registeredapi": obj.get("bModuleRegisteredapi"),
            "a_obj_modulesection": [ModulesectionResponseCompound.from_dict(_item) for _item in obj.get("a_objModulesection")] if obj.get("a_objModulesection") is not None else None
        })
        return _obj


