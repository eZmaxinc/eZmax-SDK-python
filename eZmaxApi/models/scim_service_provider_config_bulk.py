# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.0
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictBool, StrictInt

class ScimServiceProviderConfigBulk(BaseModel):
    """
    A complex type that specifies bulk configuration options.  # noqa: E501
    """
    supported: StrictBool = Field(..., description="A Boolean value specifying whether or not the operation is supported.")
    max_operations: StrictInt = Field(..., alias="maxOperations", description="An integer value specifying the maximum number of operations.")
    max_payload_size: StrictInt = Field(..., alias="maxPayloadSize", description="An integer value specifying the maximum payload size in bytes.")
    __properties = ["supported", "maxOperations", "maxPayloadSize"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ScimServiceProviderConfigBulk:
        """Create an instance of ScimServiceProviderConfigBulk from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ScimServiceProviderConfigBulk:
        """Create an instance of ScimServiceProviderConfigBulk from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ScimServiceProviderConfigBulk.parse_obj(obj)

        _obj = ScimServiceProviderConfigBulk.parse_obj({
            "supported": obj.get("supported"),
            "max_operations": obj.get("maxOperations"),
            "max_payload_size": obj.get("maxPayloadSize")
        })
        return _obj


