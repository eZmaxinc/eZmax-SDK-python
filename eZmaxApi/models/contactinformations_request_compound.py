# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.0
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import BaseModel, Field, StrictInt, conlist
from eZmaxApi.models.address_request_compound import AddressRequestCompound
from eZmaxApi.models.email_request_compound import EmailRequestCompound
from eZmaxApi.models.phone_request_compound import PhoneRequestCompound
from eZmaxApi.models.website_request_compound import WebsiteRequestCompound

class ContactinformationsRequestCompound(BaseModel):
    """
    A Contactinformations Object and children to create a complete structure  # noqa: E501
    """
    i_address_default: StrictInt = Field(..., alias="iAddressDefault", description="The index in the a_objAddress array (zero based index) representing the Address object that should become the default one.  You can leave the value to 0 if the array is empty.")
    i_phone_default: StrictInt = Field(..., alias="iPhoneDefault", description="The index in the a_objPhone array (zero based index) representing the Phone object that should become the default one.  You can leave the value to 0 if the array is empty.")
    i_email_default: StrictInt = Field(..., alias="iEmailDefault", description="The index in the a_objEmail array (zero based index) representing the Email object that should become the default one.  You can leave the value to 0 if the array is empty.")
    i_website_default: StrictInt = Field(..., alias="iWebsiteDefault", description="The index in the a_objWebsite array (zero based index) representing the Website object that should become the default one.  You can leave the value to 0 if the array is empty.")
    a_obj_address: conlist(AddressRequestCompound) = Field(..., alias="a_objAddress")
    a_obj_phone: conlist(PhoneRequestCompound) = Field(..., alias="a_objPhone")
    a_obj_email: conlist(EmailRequestCompound) = Field(..., alias="a_objEmail")
    a_obj_website: conlist(WebsiteRequestCompound) = Field(..., alias="a_objWebsite")
    __properties = ["iAddressDefault", "iPhoneDefault", "iEmailDefault", "iWebsiteDefault", "a_objAddress", "a_objPhone", "a_objEmail", "a_objWebsite"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ContactinformationsRequestCompound:
        """Create an instance of ContactinformationsRequestCompound from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in a_obj_address (list)
        _items = []
        if self.a_obj_address:
            for _item in self.a_obj_address:
                if _item:
                    _items.append(_item.to_dict())
            _dict['a_objAddress'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in a_obj_phone (list)
        _items = []
        if self.a_obj_phone:
            for _item in self.a_obj_phone:
                if _item:
                    _items.append(_item.to_dict())
            _dict['a_objPhone'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in a_obj_email (list)
        _items = []
        if self.a_obj_email:
            for _item in self.a_obj_email:
                if _item:
                    _items.append(_item.to_dict())
            _dict['a_objEmail'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in a_obj_website (list)
        _items = []
        if self.a_obj_website:
            for _item in self.a_obj_website:
                if _item:
                    _items.append(_item.to_dict())
            _dict['a_objWebsite'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ContactinformationsRequestCompound:
        """Create an instance of ContactinformationsRequestCompound from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ContactinformationsRequestCompound.parse_obj(obj)

        _obj = ContactinformationsRequestCompound.parse_obj({
            "i_address_default": obj.get("iAddressDefault"),
            "i_phone_default": obj.get("iPhoneDefault"),
            "i_email_default": obj.get("iEmailDefault"),
            "i_website_default": obj.get("iWebsiteDefault"),
            "a_obj_address": [AddressRequestCompound.from_dict(_item) for _item in obj.get("a_objAddress")] if obj.get("a_objAddress") is not None else None,
            "a_obj_phone": [PhoneRequestCompound.from_dict(_item) for _item in obj.get("a_objPhone")] if obj.get("a_objPhone") is not None else None,
            "a_obj_email": [EmailRequestCompound.from_dict(_item) for _item in obj.get("a_objEmail")] if obj.get("a_objEmail") is not None else None,
            "a_obj_website": [WebsiteRequestCompound.from_dict(_item) for _item in obj.get("a_objWebsite")] if obj.get("a_objWebsite") is not None else None
        })
        return _obj


