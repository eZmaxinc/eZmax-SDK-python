# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.0
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import BaseModel, Field, StrictBool, StrictInt, conlist

class CommonResponseObjDebugPayload(BaseModel):
    """
    This is a debug object containing debugging information on the actual function  # noqa: E501
    """
    i_version_min: StrictInt = Field(..., alias="iVersionMin", description="The minimum version of the function that can be called")
    i_version_max: StrictInt = Field(..., alias="iVersionMax", description="The maximum version of the function that can be called")
    a_required_permission: conlist(StrictInt) = Field(..., alias="a_RequiredPermission", description="An array of permissions required to access this function.  If the value \"0\" is present in the array, anyone can call this function.  You must have one of the permission to access the function. You don't need to have all of them.")
    b_version_deprecated: StrictBool = Field(..., alias="bVersionDeprecated", description="Wheter the current route is deprecated or not")
    __properties = ["iVersionMin", "iVersionMax", "a_RequiredPermission", "bVersionDeprecated"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CommonResponseObjDebugPayload:
        """Create an instance of CommonResponseObjDebugPayload from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CommonResponseObjDebugPayload:
        """Create an instance of CommonResponseObjDebugPayload from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CommonResponseObjDebugPayload.parse_obj(obj)

        _obj = CommonResponseObjDebugPayload.parse_obj({
            "i_version_min": obj.get("iVersionMin"),
            "i_version_max": obj.get("iVersionMax"),
            "a_required_permission": obj.get("a_RequiredPermission"),
            "b_version_deprecated": obj.get("bVersionDeprecated")
        })
        return _obj


