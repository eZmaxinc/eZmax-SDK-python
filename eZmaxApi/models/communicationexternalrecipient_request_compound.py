# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.0
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, constr, validator
from eZmaxApi.models.field_e_communicationexternalrecipient_type import FieldECommunicationexternalrecipientType

class CommunicationexternalrecipientRequestCompound(BaseModel):
    """
    A Communicationexternalrecipient Object and children  # noqa: E501
    """
    pki_communicationexternalrecipient_id: Optional[StrictInt] = Field(None, alias="pkiCommunicationexternalrecipientID", description="The unique ID of the Communicationexternalrecipient")
    s_email_address: Optional[StrictStr] = Field(None, alias="sEmailAddress", description="The email address.")
    s_phone_e164: Optional[constr(strict=True)] = Field(None, alias="sPhoneE164", description="A phone number in E.164 Format")
    e_communicationexternalrecipient_type: Optional[FieldECommunicationexternalrecipientType] = Field(None, alias="eCommunicationexternalrecipientType")
    s_communicationexternalrecipient_name: constr(strict=True) = Field(..., alias="sCommunicationexternalrecipientName", description="The name of the Communicationexternalrecipient")
    __properties = ["pkiCommunicationexternalrecipientID", "sEmailAddress", "sPhoneE164", "eCommunicationexternalrecipientType", "sCommunicationexternalrecipientName"]

    @validator('s_phone_e164')
    def s_phone_e164_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^\+[1-9]\d{1,14}$", value):
            raise ValueError(r"must validate the regular expression /^\+[1-9]\d{1,14}$/")
        return value

    @validator('s_communicationexternalrecipient_name')
    def s_communicationexternalrecipient_name_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^.{0,50}$", value):
            raise ValueError(r"must validate the regular expression /^.{0,50}$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CommunicationexternalrecipientRequestCompound:
        """Create an instance of CommunicationexternalrecipientRequestCompound from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CommunicationexternalrecipientRequestCompound:
        """Create an instance of CommunicationexternalrecipientRequestCompound from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CommunicationexternalrecipientRequestCompound.parse_obj(obj)

        _obj = CommunicationexternalrecipientRequestCompound.parse_obj({
            "pki_communicationexternalrecipient_id": obj.get("pkiCommunicationexternalrecipientID"),
            "s_email_address": obj.get("sEmailAddress"),
            "s_phone_e164": obj.get("sPhoneE164"),
            "e_communicationexternalrecipient_type": obj.get("eCommunicationexternalrecipientType"),
            "s_communicationexternalrecipient_name": obj.get("sCommunicationexternalrecipientName")
        })
        return _obj


