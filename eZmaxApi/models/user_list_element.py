# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.0
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conint, constr, validator
from eZmaxApi.models.field_e_user_ezsignaccess import FieldEUserEzsignaccess
from eZmaxApi.models.field_e_user_origin import FieldEUserOrigin
from eZmaxApi.models.field_e_user_type import FieldEUserType

class UserListElement(BaseModel):
    """
    A User List Element  # noqa: E501
    """
    pki_user_id: conint(strict=True, ge=0) = Field(..., alias="pkiUserID", description="The unique ID of the User")
    s_user_firstname: StrictStr = Field(..., alias="sUserFirstname", description="The first name of the user")
    s_user_lastname: StrictStr = Field(..., alias="sUserLastname", description="The last name of the user")
    s_user_loginname: constr(strict=True) = Field(..., alias="sUserLoginname", description="The login name of the User.")
    b_user_isactive: StrictBool = Field(..., alias="bUserIsactive", description="Whether the User is active or not")
    e_user_type: FieldEUserType = Field(..., alias="eUserType")
    e_user_origin: FieldEUserOrigin = Field(..., alias="eUserOrigin")
    e_user_ezsignaccess: FieldEUserEzsignaccess = Field(..., alias="eUserEzsignaccess")
    dt_user_ezsignprepaidexpiration: Optional[constr(strict=True)] = Field(None, alias="dtUserEzsignprepaidexpiration", description="The eZsign prepaid expiration date")
    s_email_address: StrictStr = Field(..., alias="sEmailAddress", description="The email address.")
    __properties = ["pkiUserID", "sUserFirstname", "sUserLastname", "sUserLoginname", "bUserIsactive", "eUserType", "eUserOrigin", "eUserEzsignaccess", "dtUserEzsignprepaidexpiration", "sEmailAddress"]

    @validator('s_user_loginname')
    def s_user_loginname_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^(?:([\w\.-]+@[\w\.-]+\.\w{2,20})|([a-zA-Z0-9]){1,32})$", value):
            raise ValueError(r"must validate the regular expression /^(?:([\w\.-]+@[\w\.-]+\.\w{2,20})|([a-zA-Z0-9]){1,32})$/")
        return value

    @validator('dt_user_ezsignprepaidexpiration')
    def dt_user_ezsignprepaidexpiration_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$", value):
            raise ValueError(r"must validate the regular expression /^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UserListElement:
        """Create an instance of UserListElement from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UserListElement:
        """Create an instance of UserListElement from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UserListElement.parse_obj(obj)

        _obj = UserListElement.parse_obj({
            "pki_user_id": obj.get("pkiUserID"),
            "s_user_firstname": obj.get("sUserFirstname"),
            "s_user_lastname": obj.get("sUserLastname"),
            "s_user_loginname": obj.get("sUserLoginname"),
            "b_user_isactive": obj.get("bUserIsactive"),
            "e_user_type": obj.get("eUserType"),
            "e_user_origin": obj.get("eUserOrigin"),
            "e_user_ezsignaccess": obj.get("eUserEzsignaccess"),
            "dt_user_ezsignprepaidexpiration": obj.get("dtUserEzsignprepaidexpiration"),
            "s_email_address": obj.get("sEmailAddress")
        })
        return _obj


