# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.0
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, conint, validator
from eZmaxApi.models.custom_contact_name_response import CustomContactNameResponse
from eZmaxApi.models.email_response_compound import EmailResponseCompound
from eZmaxApi.models.phone_response_compound import PhoneResponseCompound

class CustomCommunicationrecipientsrecipientResponse(BaseModel):
    """
    Generic AutocompleteElement Response  # noqa: E501
    """
    fki_agent_id: Optional[conint(strict=True, ge=0)] = Field(None, alias="fkiAgentID", description="The unique ID of the Agent.")
    fki_broker_id: Optional[conint(strict=True, ge=0)] = Field(None, alias="fkiBrokerID", description="The unique ID of the Broker.")
    fki_contact_id: Optional[conint(strict=True, ge=0)] = Field(None, alias="fkiContactID", description="The unique ID of the Contact")
    fki_customer_id: Optional[conint(strict=True, ge=0)] = Field(None, alias="fkiCustomerID", description="The unique ID of the Customer.")
    fki_employee_id: Optional[conint(strict=True, ge=0)] = Field(None, alias="fkiEmployeeID", description="The unique ID of the Employee.")
    fki_ezsignsigner_id: Optional[conint(strict=True, ge=0)] = Field(None, alias="fkiEzsignsignerID", description="The unique ID of the Ezsignsigner")
    fki_franchiseoffice_id: Optional[conint(strict=True, ge=0)] = Field(None, alias="fkiFranchiseofficeID", description="The unique ID of the Franchisereoffice")
    fki_user_id: Optional[conint(strict=True, ge=0)] = Field(None, alias="fkiUserID", description="The unique ID of the User")
    fki_agentincorporation_id: Optional[conint(strict=True, ge=0)] = Field(None, alias="fkiAgentincorporationID", description="The unique ID of the Agentincorporation.")
    fki_assistant_id: Optional[conint(strict=True, ge=0)] = Field(None, alias="fkiAssistantID", description="The unique ID of the Assistant.")
    fki_externalbroker_id: Optional[conint(strict=True, ge=0)] = Field(None, alias="fkiExternalbrokerID", description="The unique ID of the Externalbroker.")
    fki_ezcomagent_id: Optional[conint(strict=True, ge=0)] = Field(None, alias="fkiEzcomagentID", description="The unique ID of the Ezcomagent.")
    fki_notary_id: Optional[conint(strict=True, ge=0)] = Field(None, alias="fkiNotaryID", description="The unique ID of the Notary.")
    fki_rewardmember_id: Optional[conint(strict=True, ge=0)] = Field(None, alias="fkiRewardmemberID", description="The unique ID of the Rewardmember.")
    fki_supplier_id: Optional[conint(strict=True, ge=0)] = Field(None, alias="fkiSupplierID", description="The unique ID of the Supplier.")
    e_communicationrecipientsrecipient_objecttype: StrictStr = Field(..., alias="eCommunicationrecipientsrecipientObjecttype")
    obj_contact_name: CustomContactNameResponse = Field(..., alias="objContactName")
    obj_email: Optional[EmailResponseCompound] = Field(None, alias="objEmail")
    obj_phone_fax: Optional[PhoneResponseCompound] = Field(None, alias="objPhoneFax")
    obj_phone_sms: Optional[PhoneResponseCompound] = Field(None, alias="objPhoneSMS")
    __properties = ["fkiAgentID", "fkiBrokerID", "fkiContactID", "fkiCustomerID", "fkiEmployeeID", "fkiEzsignsignerID", "fkiFranchiseofficeID", "fkiUserID", "fkiAgentincorporationID", "fkiAssistantID", "fkiExternalbrokerID", "fkiEzcomagentID", "fkiNotaryID", "fkiRewardmemberID", "fkiSupplierID", "eCommunicationrecipientsrecipientObjecttype", "objContactName", "objEmail", "objPhoneFax", "objPhoneSMS"]

    @validator('e_communicationrecipientsrecipient_objecttype')
    def e_communicationrecipientsrecipient_objecttype_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('Agent', 'Agentincorporation', 'Assistant', 'Broker', 'Contact', 'Customer', 'Employee', 'Externalbroker', 'Ezcomagent', 'Ezcomcompany', 'Ezsignsigner', 'Franchiseoffice', 'Notary', 'Rewardmember', 'Supplier', 'User'):
            raise ValueError("must be one of enum values ('Agent', 'Agentincorporation', 'Assistant', 'Broker', 'Contact', 'Customer', 'Employee', 'Externalbroker', 'Ezcomagent', 'Ezcomcompany', 'Ezsignsigner', 'Franchiseoffice', 'Notary', 'Rewardmember', 'Supplier', 'User')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CustomCommunicationrecipientsrecipientResponse:
        """Create an instance of CustomCommunicationrecipientsrecipientResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of obj_contact_name
        if self.obj_contact_name:
            _dict['objContactName'] = self.obj_contact_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of obj_email
        if self.obj_email:
            _dict['objEmail'] = self.obj_email.to_dict()
        # override the default output from pydantic by calling `to_dict()` of obj_phone_fax
        if self.obj_phone_fax:
            _dict['objPhoneFax'] = self.obj_phone_fax.to_dict()
        # override the default output from pydantic by calling `to_dict()` of obj_phone_sms
        if self.obj_phone_sms:
            _dict['objPhoneSMS'] = self.obj_phone_sms.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CustomCommunicationrecipientsrecipientResponse:
        """Create an instance of CustomCommunicationrecipientsrecipientResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CustomCommunicationrecipientsrecipientResponse.parse_obj(obj)

        _obj = CustomCommunicationrecipientsrecipientResponse.parse_obj({
            "fki_agent_id": obj.get("fkiAgentID"),
            "fki_broker_id": obj.get("fkiBrokerID"),
            "fki_contact_id": obj.get("fkiContactID"),
            "fki_customer_id": obj.get("fkiCustomerID"),
            "fki_employee_id": obj.get("fkiEmployeeID"),
            "fki_ezsignsigner_id": obj.get("fkiEzsignsignerID"),
            "fki_franchiseoffice_id": obj.get("fkiFranchiseofficeID"),
            "fki_user_id": obj.get("fkiUserID"),
            "fki_agentincorporation_id": obj.get("fkiAgentincorporationID"),
            "fki_assistant_id": obj.get("fkiAssistantID"),
            "fki_externalbroker_id": obj.get("fkiExternalbrokerID"),
            "fki_ezcomagent_id": obj.get("fkiEzcomagentID"),
            "fki_notary_id": obj.get("fkiNotaryID"),
            "fki_rewardmember_id": obj.get("fkiRewardmemberID"),
            "fki_supplier_id": obj.get("fkiSupplierID"),
            "e_communicationrecipientsrecipient_objecttype": obj.get("eCommunicationrecipientsrecipientObjecttype"),
            "obj_contact_name": CustomContactNameResponse.from_dict(obj.get("objContactName")) if obj.get("objContactName") is not None else None,
            "obj_email": EmailResponseCompound.from_dict(obj.get("objEmail")) if obj.get("objEmail") is not None else None,
            "obj_phone_fax": PhoneResponseCompound.from_dict(obj.get("objPhoneFax")) if obj.get("objPhoneFax") is not None else None,
            "obj_phone_sms": PhoneResponseCompound.from_dict(obj.get("objPhoneSMS")) if obj.get("objPhoneSMS") is not None else None
        })
        return _obj


