# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.0
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from pydantic import Field
from typing_extensions import Annotated
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class EzsignbulksendListElement(BaseModel):
    """
    An Ezsignbulksend List Element
    """ # noqa: E501
    pki_ezsignbulksend_id: Annotated[int, Field(strict=True, ge=0)] = Field(description="The unique ID of the Ezsignbulksend", alias="pkiEzsignbulksendID")
    fki_ezsignfoldertype_id: Annotated[int, Field(strict=True, ge=0)] = Field(description="The unique ID of the Ezsignfoldertype.", alias="fkiEzsignfoldertypeID")
    s_ezsignbulksend_description: StrictStr = Field(description="The description of the Ezsignbulksend", alias="sEzsignbulksendDescription")
    s_ezsignfoldertype_name_x: StrictStr = Field(description="The name of the Ezsignfoldertype in the language of the requester", alias="sEzsignfoldertypeNameX")
    b_ezsignbulksend_needvalidation: StrictBool = Field(description="Whether the Ezsigntemplatepackage was automatically modified and needs a manual validation", alias="bEzsignbulksendNeedvalidation")
    i_ezsignbulksendtransmission: StrictInt = Field(description="The total number of Ezsignbulksendtransmissions in the Ezsignbulksend", alias="iEzsignbulksendtransmission")
    i_ezsignfolder: StrictInt = Field(description="The total number of Ezsignfolders in the Ezsignbulksend", alias="iEzsignfolder")
    i_ezsigndocument: StrictInt = Field(description="The total number of Ezsigndocuments in the Ezsignbulksend", alias="iEzsigndocument")
    i_ezsignsignature: StrictInt = Field(description="The total number of Ezsignsignature in the Ezsignbulksend", alias="iEzsignsignature")
    i_ezsignsignature_signed: StrictInt = Field(description="The total number of already signed Ezsignsignature blocks in the Ezsignbulksend", alias="iEzsignsignatureSigned")
    b_ezsignbulksend_isactive: StrictBool = Field(description="Whether the Ezsignbulksend is active or not", alias="bEzsignbulksendIsactive")
    __properties: ClassVar[List[str]] = ["pkiEzsignbulksendID", "fkiEzsignfoldertypeID", "sEzsignbulksendDescription", "sEzsignfoldertypeNameX", "bEzsignbulksendNeedvalidation", "iEzsignbulksendtransmission", "iEzsignfolder", "iEzsigndocument", "iEzsignsignature", "iEzsignsignatureSigned", "bEzsignbulksendIsactive"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of EzsignbulksendListElement from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of EzsignbulksendListElement from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "pkiEzsignbulksendID": obj.get("pkiEzsignbulksendID"),
            "fkiEzsignfoldertypeID": obj.get("fkiEzsignfoldertypeID"),
            "sEzsignbulksendDescription": obj.get("sEzsignbulksendDescription"),
            "sEzsignfoldertypeNameX": obj.get("sEzsignfoldertypeNameX"),
            "bEzsignbulksendNeedvalidation": obj.get("bEzsignbulksendNeedvalidation"),
            "iEzsignbulksendtransmission": obj.get("iEzsignbulksendtransmission"),
            "iEzsignfolder": obj.get("iEzsignfolder"),
            "iEzsigndocument": obj.get("iEzsigndocument"),
            "iEzsignsignature": obj.get("iEzsignsignature"),
            "iEzsignsignatureSigned": obj.get("iEzsignsignatureSigned"),
            "bEzsignbulksendIsactive": obj.get("bEzsignbulksendIsactive")
        })
        return _obj


