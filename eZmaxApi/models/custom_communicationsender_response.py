# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.0
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, conint, constr, validator
from eZmaxApi.models.custom_contact_name_response import CustomContactNameResponse

class CustomCommunicationsenderResponse(BaseModel):
    """
    Generic Communicationsender Response  # noqa: E501
    """
    fki_agent_id: Optional[conint(strict=True, ge=0)] = Field(None, alias="fkiAgentID", description="The unique ID of the Agent.")
    fki_broker_id: Optional[conint(strict=True, ge=0)] = Field(None, alias="fkiBrokerID", description="The unique ID of the Broker.")
    fki_user_id: Optional[conint(strict=True, ge=0)] = Field(None, alias="fkiUserID", description="The unique ID of the User")
    fki_mailboxshared_id: Optional[conint(strict=True, le=255, ge=0)] = Field(None, alias="fkiMailboxsharedID", description="The unique ID of the Mailboxshared")
    e_communicationsender_objecttype: StrictStr = Field(..., alias="eCommunicationsenderObjecttype")
    obj_contact_name: CustomContactNameResponse = Field(..., alias="objContactName")
    s_email_address: Optional[StrictStr] = Field(None, alias="sEmailAddress", description="The email address.")
    s_phone_e164: Optional[constr(strict=True)] = Field(None, alias="sPhoneE164", description="A phone number in E.164 Format")
    __properties = ["fkiAgentID", "fkiBrokerID", "fkiUserID", "fkiMailboxsharedID", "eCommunicationsenderObjecttype", "objContactName", "sEmailAddress", "sPhoneE164"]

    @validator('e_communicationsender_objecttype')
    def e_communicationsender_objecttype_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('Agent', 'Broker', 'User', 'Mailboxshared'):
            raise ValueError("must be one of enum values ('Agent', 'Broker', 'User', 'Mailboxshared')")
        return value

    @validator('s_phone_e164')
    def s_phone_e164_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^\+[1-9]\d{1,14}$", value):
            raise ValueError(r"must validate the regular expression /^\+[1-9]\d{1,14}$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CustomCommunicationsenderResponse:
        """Create an instance of CustomCommunicationsenderResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of obj_contact_name
        if self.obj_contact_name:
            _dict['objContactName'] = self.obj_contact_name.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CustomCommunicationsenderResponse:
        """Create an instance of CustomCommunicationsenderResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CustomCommunicationsenderResponse.parse_obj(obj)

        _obj = CustomCommunicationsenderResponse.parse_obj({
            "fki_agent_id": obj.get("fkiAgentID"),
            "fki_broker_id": obj.get("fkiBrokerID"),
            "fki_user_id": obj.get("fkiUserID"),
            "fki_mailboxshared_id": obj.get("fkiMailboxsharedID"),
            "e_communicationsender_objecttype": obj.get("eCommunicationsenderObjecttype"),
            "obj_contact_name": CustomContactNameResponse.from_dict(obj.get("objContactName")) if obj.get("objContactName") is not None else None,
            "s_email_address": obj.get("sEmailAddress"),
            "s_phone_e164": obj.get("sPhoneE164")
        })
        return _obj


