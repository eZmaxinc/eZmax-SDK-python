# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.1
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import ConfigDict, Field
from typing import Any, ClassVar, Dict, List
from eZmaxApi.models.custom_create_ezsignelements_positioned_by_word_request import CustomCreateEzsignelementsPositionedByWordRequest
from eZmaxApi.models.enum_textvalidation import EnumTextvalidation
from eZmaxApi.models.ezsignelementdependency_request import EzsignelementdependencyRequest
from eZmaxApi.models.ezsignsignature_request_compound import EzsignsignatureRequestCompound
from eZmaxApi.models.ezsignsignaturecustomdate_request import EzsignsignaturecustomdateRequest
from eZmaxApi.models.field_e_ezsignsignature_attachmentnamesource import FieldEEzsignsignatureAttachmentnamesource
from eZmaxApi.models.field_e_ezsignsignature_consultationtrigger import FieldEEzsignsignatureConsultationtrigger
from eZmaxApi.models.field_e_ezsignsignature_dependencyrequirement import FieldEEzsignsignatureDependencyrequirement
from eZmaxApi.models.field_e_ezsignsignature_font import FieldEEzsignsignatureFont
from eZmaxApi.models.field_e_ezsignsignature_tooltipposition import FieldEEzsignsignatureTooltipposition
from eZmaxApi.models.field_e_ezsignsignature_type import FieldEEzsignsignatureType
from typing import Optional, Set
from typing_extensions import Self

class CustomEzsignsignatureCreateEzsignelementsPositionedByWordRequest(EzsignsignatureRequestCompound):
    """
    An Ezsignsignature Object in the context of an CreateEzsignelementsPositionedByWord path
    """ # noqa: E501
    obj_createezsignelementspositionedbyword: CustomCreateEzsignelementsPositionedByWordRequest = Field(alias="objCreateezsignelementspositionedbyword")
    __properties: ClassVar[List[str]] = ["pkiEzsignsignatureID", "fkiEzsignfoldersignerassociationID", "iEzsignpagePagenumber", "iEzsignsignatureX", "iEzsignsignatureY", "iEzsignsignatureWidth", "iEzsignsignatureHeight", "iEzsignsignatureStep", "eEzsignsignatureType", "fkiEzsigndocumentID", "tEzsignsignatureTooltip", "eEzsignsignatureTooltipposition", "eEzsignsignatureFont", "fkiEzsignfoldersignerassociationIDValidation", "bEzsignsignatureHandwritten", "bEzsignsignatureReason", "bEzsignsignatureRequired", "eEzsignsignatureAttachmentnamesource", "sEzsignsignatureAttachmentdescription", "eEzsignsignatureConsultationtrigger", "iEzsignsignatureValidationstep", "iEzsignsignatureMaxlength", "sEzsignsignatureDefaultvalue", "eEzsignsignatureTextvalidation", "sEzsignsignatureTextvalidationcustommessage", "sEzsignsignatureRegexp", "eEzsignsignatureDependencyrequirement", "bEzsignsignatureCustomdate", "a_objEzsignsignaturecustomdate", "a_objEzsignelementdependency", "objCreateezsignelementspositionedbyword"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CustomEzsignsignatureCreateEzsignelementsPositionedByWordRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in a_obj_ezsignsignaturecustomdate (list)
        _items = []
        if self.a_obj_ezsignsignaturecustomdate:
            for _item_a_obj_ezsignsignaturecustomdate in self.a_obj_ezsignsignaturecustomdate:
                if _item_a_obj_ezsignsignaturecustomdate:
                    _items.append(_item_a_obj_ezsignsignaturecustomdate.to_dict())
            _dict['a_objEzsignsignaturecustomdate'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in a_obj_ezsignelementdependency (list)
        _items = []
        if self.a_obj_ezsignelementdependency:
            for _item_a_obj_ezsignelementdependency in self.a_obj_ezsignelementdependency:
                if _item_a_obj_ezsignelementdependency:
                    _items.append(_item_a_obj_ezsignelementdependency.to_dict())
            _dict['a_objEzsignelementdependency'] = _items
        # override the default output from pydantic by calling `to_dict()` of obj_createezsignelementspositionedbyword
        if self.obj_createezsignelementspositionedbyword:
            _dict['objCreateezsignelementspositionedbyword'] = self.obj_createezsignelementspositionedbyword.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CustomEzsignsignatureCreateEzsignelementsPositionedByWordRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "pkiEzsignsignatureID": obj.get("pkiEzsignsignatureID"),
            "fkiEzsignfoldersignerassociationID": obj.get("fkiEzsignfoldersignerassociationID"),
            "iEzsignpagePagenumber": obj.get("iEzsignpagePagenumber"),
            "iEzsignsignatureX": obj.get("iEzsignsignatureX"),
            "iEzsignsignatureY": obj.get("iEzsignsignatureY"),
            "iEzsignsignatureWidth": obj.get("iEzsignsignatureWidth"),
            "iEzsignsignatureHeight": obj.get("iEzsignsignatureHeight"),
            "iEzsignsignatureStep": obj.get("iEzsignsignatureStep"),
            "eEzsignsignatureType": obj.get("eEzsignsignatureType"),
            "fkiEzsigndocumentID": obj.get("fkiEzsigndocumentID"),
            "tEzsignsignatureTooltip": obj.get("tEzsignsignatureTooltip"),
            "eEzsignsignatureTooltipposition": obj.get("eEzsignsignatureTooltipposition"),
            "eEzsignsignatureFont": obj.get("eEzsignsignatureFont"),
            "fkiEzsignfoldersignerassociationIDValidation": obj.get("fkiEzsignfoldersignerassociationIDValidation"),
            "bEzsignsignatureHandwritten": obj.get("bEzsignsignatureHandwritten"),
            "bEzsignsignatureReason": obj.get("bEzsignsignatureReason"),
            "bEzsignsignatureRequired": obj.get("bEzsignsignatureRequired"),
            "eEzsignsignatureAttachmentnamesource": obj.get("eEzsignsignatureAttachmentnamesource"),
            "sEzsignsignatureAttachmentdescription": obj.get("sEzsignsignatureAttachmentdescription"),
            "eEzsignsignatureConsultationtrigger": obj.get("eEzsignsignatureConsultationtrigger"),
            "iEzsignsignatureValidationstep": obj.get("iEzsignsignatureValidationstep"),
            "iEzsignsignatureMaxlength": obj.get("iEzsignsignatureMaxlength"),
            "sEzsignsignatureDefaultvalue": obj.get("sEzsignsignatureDefaultvalue"),
            "eEzsignsignatureTextvalidation": obj.get("eEzsignsignatureTextvalidation"),
            "sEzsignsignatureTextvalidationcustommessage": obj.get("sEzsignsignatureTextvalidationcustommessage"),
            "sEzsignsignatureRegexp": obj.get("sEzsignsignatureRegexp"),
            "eEzsignsignatureDependencyrequirement": obj.get("eEzsignsignatureDependencyrequirement"),
            "bEzsignsignatureCustomdate": obj.get("bEzsignsignatureCustomdate"),
            "a_objEzsignsignaturecustomdate": [EzsignsignaturecustomdateRequest.from_dict(_item) for _item in obj["a_objEzsignsignaturecustomdate"]] if obj.get("a_objEzsignsignaturecustomdate") is not None else None,
            "a_objEzsignelementdependency": [EzsignelementdependencyRequest.from_dict(_item) for _item in obj["a_objEzsignelementdependency"]] if obj.get("a_objEzsignelementdependency") is not None else None,
            "objCreateezsignelementspositionedbyword": CustomCreateEzsignelementsPositionedByWordRequest.from_dict(obj["objCreateezsignelementspositionedbyword"]) if obj.get("objCreateezsignelementspositionedbyword") is not None else None
        })
        return _obj


