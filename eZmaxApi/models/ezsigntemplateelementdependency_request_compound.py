# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.0
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conint, constr, validator
from eZmaxApi.models.field_e_ezsigntemplateelementdependency_operator import FieldEEzsigntemplateelementdependencyOperator
from eZmaxApi.models.field_e_ezsigntemplateelementdependency_validation import FieldEEzsigntemplateelementdependencyValidation

class EzsigntemplateelementdependencyRequestCompound(BaseModel):
    """
    An Ezsigntemplateelementdependency Object and children to create a complete structure  # noqa: E501
    """
    pki_ezsigntemplateelementdependency_id: Optional[conint(strict=True, le=65535, ge=0)] = Field(None, alias="pkiEzsigntemplateelementdependencyID", description="The unique ID of the Ezsigntemplateelementdependency")
    fki_ezsigntemplateformfield_id_validation: Optional[conint(strict=True, ge=0)] = Field(None, alias="fkiEzsigntemplateformfieldIDValidation", description="The unique ID of the Ezsigntemplateformfield")
    fki_ezsigntemplateformfieldgroup_id_validation: Optional[conint(strict=True, ge=0)] = Field(None, alias="fkiEzsigntemplateformfieldgroupIDValidation", description="The unique ID of the Ezsigntemplateformfieldgroup")
    s_ezsigntemplateelementdependency_ezsigntemplateformfieldgrouplabel: Optional[constr(strict=True, max_length=50, min_length=1)] = Field(None, alias="sEzsigntemplateelementdependencyEzsigntemplateformfieldgrouplabel", description="The Label for the Ezsigntemplateformfieldgroup")
    s_ezsigntemplateelementdependency_ezsigntemplateformfieldlabel: Optional[StrictStr] = Field(None, alias="sEzsigntemplateelementdependencyEzsigntemplateformfieldlabel", description="The Label for the Ezsigntemplateformfield")
    e_ezsigntemplateelementdependency_validation: FieldEEzsigntemplateelementdependencyValidation = Field(..., alias="eEzsigntemplateelementdependencyValidation")
    b_ezsigntemplateelementdependency_selected: Optional[StrictBool] = Field(None, alias="bEzsigntemplateelementdependencySelected", description="Whether if it's selected or not when using eEzsigntemplateelementdependencyValidation = Selected")
    e_ezsigntemplateelementdependency_operator: Optional[FieldEEzsigntemplateelementdependencyOperator] = Field(None, alias="eEzsigntemplateelementdependencyOperator")
    s_ezsigntemplateelementdependency_value: Optional[constr(strict=True)] = Field(None, alias="sEzsigntemplateelementdependencyValue", description="The value of the Ezsignelementdependency")
    __properties = ["pkiEzsigntemplateelementdependencyID", "fkiEzsigntemplateformfieldIDValidation", "fkiEzsigntemplateformfieldgroupIDValidation", "sEzsigntemplateelementdependencyEzsigntemplateformfieldgrouplabel", "sEzsigntemplateelementdependencyEzsigntemplateformfieldlabel", "eEzsigntemplateelementdependencyValidation", "bEzsigntemplateelementdependencySelected", "eEzsigntemplateelementdependencyOperator", "sEzsigntemplateelementdependencyValue"]

    @validator('s_ezsigntemplateelementdependency_value')
    def s_ezsigntemplateelementdependency_value_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^.{0,50}$", value):
            raise ValueError(r"must validate the regular expression /^.{0,50}$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> EzsigntemplateelementdependencyRequestCompound:
        """Create an instance of EzsigntemplateelementdependencyRequestCompound from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> EzsigntemplateelementdependencyRequestCompound:
        """Create an instance of EzsigntemplateelementdependencyRequestCompound from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return EzsigntemplateelementdependencyRequestCompound.parse_obj(obj)

        _obj = EzsigntemplateelementdependencyRequestCompound.parse_obj({
            "pki_ezsigntemplateelementdependency_id": obj.get("pkiEzsigntemplateelementdependencyID"),
            "fki_ezsigntemplateformfield_id_validation": obj.get("fkiEzsigntemplateformfieldIDValidation"),
            "fki_ezsigntemplateformfieldgroup_id_validation": obj.get("fkiEzsigntemplateformfieldgroupIDValidation"),
            "s_ezsigntemplateelementdependency_ezsigntemplateformfieldgrouplabel": obj.get("sEzsigntemplateelementdependencyEzsigntemplateformfieldgrouplabel"),
            "s_ezsigntemplateelementdependency_ezsigntemplateformfieldlabel": obj.get("sEzsigntemplateelementdependencyEzsigntemplateformfieldlabel"),
            "e_ezsigntemplateelementdependency_validation": obj.get("eEzsigntemplateelementdependencyValidation"),
            "b_ezsigntemplateelementdependency_selected": obj.get("bEzsigntemplateelementdependencySelected"),
            "e_ezsigntemplateelementdependency_operator": obj.get("eEzsigntemplateelementdependencyOperator"),
            "s_ezsigntemplateelementdependency_value": obj.get("sEzsigntemplateelementdependencyValue")
        })
        return _obj


