# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.1
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import ConfigDict
from typing import Any, ClassVar, Dict, List
from eZmaxApi.models.email_request import EmailRequest
from eZmaxApi.models.field_e_user_ezsignaccess import FieldEUserEzsignaccess
from eZmaxApi.models.field_e_user_logintype import FieldEUserLogintype
from eZmaxApi.models.field_e_user_type import FieldEUserType
from eZmaxApi.models.phone_request_v2 import PhoneRequestV2
from eZmaxApi.models.user_request_v2 import UserRequestV2
from typing import Optional, Set
from typing_extensions import Self

class UserRequestCompoundV2(UserRequestV2):
    """
    A User Object and children
    """ # noqa: E501
    __properties: ClassVar[List[str]] = ["pkiUserID", "fkiAgentID", "fkiBrokerID", "fkiAssistantID", "fkiEmployeeID", "fkiCompanyIDDefault", "fkiDepartmentIDDefault", "fkiTimezoneID", "fkiLanguageID", "objEmail", "fkiBillingentityinternalID", "objPhoneHome", "objPhoneSMS", "fkiSecretquestionID", "sUserSecretresponse", "fkiModuleIDForm", "eUserType", "eUserLogintype", "sUserFirstname", "sUserLastname", "sUserLoginname", "sUserJobtitle", "eUserEzsignaccess", "bUserIsactive", "bUserValidatebyadministration", "bUserValidatebydirector", "bUserAttachmentautoverified", "bUserChangepassword"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserRequestCompoundV2 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of obj_email
        if self.obj_email:
            _dict['objEmail'] = self.obj_email.to_dict()
        # override the default output from pydantic by calling `to_dict()` of obj_phone_home
        if self.obj_phone_home:
            _dict['objPhoneHome'] = self.obj_phone_home.to_dict()
        # override the default output from pydantic by calling `to_dict()` of obj_phone_sms
        if self.obj_phone_sms:
            _dict['objPhoneSMS'] = self.obj_phone_sms.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserRequestCompoundV2 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "pkiUserID": obj.get("pkiUserID"),
            "fkiAgentID": obj.get("fkiAgentID"),
            "fkiBrokerID": obj.get("fkiBrokerID"),
            "fkiAssistantID": obj.get("fkiAssistantID"),
            "fkiEmployeeID": obj.get("fkiEmployeeID"),
            "fkiCompanyIDDefault": obj.get("fkiCompanyIDDefault"),
            "fkiDepartmentIDDefault": obj.get("fkiDepartmentIDDefault"),
            "fkiTimezoneID": obj.get("fkiTimezoneID"),
            "fkiLanguageID": obj.get("fkiLanguageID"),
            "objEmail": EmailRequest.from_dict(obj["objEmail"]) if obj.get("objEmail") is not None else None,
            "fkiBillingentityinternalID": obj.get("fkiBillingentityinternalID"),
            "objPhoneHome": PhoneRequestV2.from_dict(obj["objPhoneHome"]) if obj.get("objPhoneHome") is not None else None,
            "objPhoneSMS": PhoneRequestV2.from_dict(obj["objPhoneSMS"]) if obj.get("objPhoneSMS") is not None else None,
            "fkiSecretquestionID": obj.get("fkiSecretquestionID"),
            "sUserSecretresponse": obj.get("sUserSecretresponse"),
            "fkiModuleIDForm": obj.get("fkiModuleIDForm"),
            "eUserType": obj.get("eUserType"),
            "eUserLogintype": obj.get("eUserLogintype"),
            "sUserFirstname": obj.get("sUserFirstname"),
            "sUserLastname": obj.get("sUserLastname"),
            "sUserLoginname": obj.get("sUserLoginname"),
            "sUserJobtitle": obj.get("sUserJobtitle"),
            "eUserEzsignaccess": obj.get("eUserEzsignaccess"),
            "bUserIsactive": obj.get("bUserIsactive"),
            "bUserValidatebyadministration": obj.get("bUserValidatebyadministration"),
            "bUserValidatebydirector": obj.get("bUserValidatebydirector"),
            "bUserAttachmentautoverified": obj.get("bUserAttachmentautoverified"),
            "bUserChangepassword": obj.get("bUserChangepassword")
        })
        return _obj


