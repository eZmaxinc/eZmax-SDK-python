# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.2
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, field_validator
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from eZmaxApi.models.ezsignsigner_request_compound import EzsignsignerRequestCompound
from typing import Optional, Set
from typing_extensions import Self

class EzsigntemplatepublicCreateEzsignfolderV1Request(BaseModel):
    """
    Request for POST /1/object/ezsigntemplatepublic/createEzsignfolder
    """ # noqa: E501
    pks_ezmaxcustomer_code: Annotated[str, Field(min_length=2, strict=True, max_length=6)] = Field(description="The Ezmaxcustomer code", alias="pksEzmaxcustomerCode")
    s_ezsigntemplatepublic_referenceid: Annotated[str, Field(strict=True)] = Field(description="The referenceid of the Ezsigntemplatepublic", alias="sEzsigntemplatepublicReferenceid")
    a_s_ezsigntemplatesigner_description: List[Annotated[str, Field(strict=True)]] = Field(alias="a_sEzsigntemplatesignerDescription")
    a_obj_ezsignsigner: List[EzsignsignerRequestCompound] = Field(alias="a_objEzsignsigner")
    __properties: ClassVar[List[str]] = ["pksEzmaxcustomerCode", "sEzsigntemplatepublicReferenceid", "a_sEzsigntemplatesignerDescription", "a_objEzsignsigner"]

    @field_validator('pks_ezmaxcustomer_code')
    def pks_ezmaxcustomer_code_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-z\d]{2,6}$", value):
            raise ValueError(r"must validate the regular expression /^[a-z\d]{2,6}$/")
        return value

    @field_validator('s_ezsigntemplatepublic_referenceid')
    def s_ezsigntemplatepublic_referenceid_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^.{0,36}$", value):
            raise ValueError(r"must validate the regular expression /^.{0,36}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EzsigntemplatepublicCreateEzsignfolderV1Request from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in a_obj_ezsignsigner (list)
        _items = []
        if self.a_obj_ezsignsigner:
            for _item_a_obj_ezsignsigner in self.a_obj_ezsignsigner:
                if _item_a_obj_ezsignsigner:
                    _items.append(_item_a_obj_ezsignsigner.to_dict())
            _dict['a_objEzsignsigner'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EzsigntemplatepublicCreateEzsignfolderV1Request from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "pksEzmaxcustomerCode": obj.get("pksEzmaxcustomerCode"),
            "sEzsigntemplatepublicReferenceid": obj.get("sEzsigntemplatepublicReferenceid"),
            "a_sEzsigntemplatesignerDescription": obj.get("a_sEzsigntemplatesignerDescription"),
            "a_objEzsignsigner": [EzsignsignerRequestCompound.from_dict(_item) for _item in obj["a_objEzsignsigner"]] if obj.get("a_objEzsignsigner") is not None else None
        })
        return _obj


