# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.0
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictInt, StrictStr, validator

class CustomEzsignsignaturestatusResponse(BaseModel):
    """
    A Ezsignsignaturestatus Object and children to create a complete structure  # noqa: E501
    """
    e_ezsignsignaturestatus_steptype: StrictStr = Field(..., alias="eEzsignsignaturestatusSteptype", description="Type of step")
    i_ezsignsignaturestatus_step: StrictInt = Field(..., alias="iEzsignsignaturestatusStep", description="The step at which the Ezsignsigner will be invited to sign or fill the form fields")
    i_ezsignsignaturestatus_total: StrictInt = Field(..., alias="iEzsignsignaturestatusTotal", description="The total number of signature or form fields the Ezsignsigner must process at the current step")
    i_ezsignsignaturestatus_signed: StrictInt = Field(..., alias="iEzsignsignaturestatusSigned", description="The number of signature or form fields the Ezsignsigner has already processed at the current step")
    __properties = ["eEzsignsignaturestatusSteptype", "iEzsignsignaturestatusStep", "iEzsignsignaturestatusTotal", "iEzsignsignaturestatusSigned"]

    @validator('e_ezsignsignaturestatus_steptype')
    def e_ezsignsignaturestatus_steptype_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('Form', 'Signature'):
            raise ValueError("must be one of enum values ('Form', 'Signature')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CustomEzsignsignaturestatusResponse:
        """Create an instance of CustomEzsignsignaturestatusResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CustomEzsignsignaturestatusResponse:
        """Create an instance of CustomEzsignsignaturestatusResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CustomEzsignsignaturestatusResponse.parse_obj(obj)

        _obj = CustomEzsignsignaturestatusResponse.parse_obj({
            "e_ezsignsignaturestatus_steptype": obj.get("eEzsignsignaturestatusSteptype"),
            "i_ezsignsignaturestatus_step": obj.get("iEzsignsignaturestatusStep"),
            "i_ezsignsignaturestatus_total": obj.get("iEzsignsignaturestatusTotal"),
            "i_ezsignsignaturestatus_signed": obj.get("iEzsignsignaturestatusSigned")
        })
        return _obj


