# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.0
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, constr, validator
from eZmaxApi.models.field_e_creditcardtype_codename import FieldECreditcardtypeCodename

class CustomCreditcardtransactionResponse(BaseModel):
    """
    A custom Creditcardtransaction Object  # noqa: E501
    """
    e_creditcardtype_codename: Optional[FieldECreditcardtypeCodename] = Field(None, alias="eCreditcardtypeCodename")
    d_creditcardtransaction_amount: constr(strict=True) = Field(..., alias="dCreditcardtransactionAmount", description="The amount of the Creditcardtransaction")
    s_creditcardtransaction_partiallydecryptednumber: constr(strict=True) = Field(..., alias="sCreditcardtransactionPartiallydecryptednumber", description="The partially decrypted credit card number used in the Creditcardtransaction")
    s_creditcardtransaction_referencenumber: constr(strict=True) = Field(..., alias="sCreditcardtransactionReferencenumber", description="The reference number on the creditcard service for the Creditcardtransaction")
    __properties = ["eCreditcardtypeCodename", "dCreditcardtransactionAmount", "sCreditcardtransactionPartiallydecryptednumber", "sCreditcardtransactionReferencenumber"]

    @validator('d_creditcardtransaction_amount')
    def d_creditcardtransaction_amount_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^-{0,1}[\d]{1,9}?\.[\d]{2}$", value):
            raise ValueError(r"must validate the regular expression /^-{0,1}[\d]{1,9}?\.[\d]{2}$/")
        return value

    @validator('s_creditcardtransaction_partiallydecryptednumber')
    def s_creditcardtransaction_partiallydecryptednumber_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^([X]{4}[ ]){3}(\d){4}$", value):
            raise ValueError(r"must validate the regular expression /^([X]{4}[ ]){3}(\d){4}$/")
        return value

    @validator('s_creditcardtransaction_referencenumber')
    def s_creditcardtransaction_referencenumber_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[\d]{18}$", value):
            raise ValueError(r"must validate the regular expression /^[\d]{18}$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CustomCreditcardtransactionResponse:
        """Create an instance of CustomCreditcardtransactionResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CustomCreditcardtransactionResponse:
        """Create an instance of CustomCreditcardtransactionResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CustomCreditcardtransactionResponse.parse_obj(obj)

        _obj = CustomCreditcardtransactionResponse.parse_obj({
            "e_creditcardtype_codename": obj.get("eCreditcardtypeCodename"),
            "d_creditcardtransaction_amount": obj.get("dCreditcardtransactionAmount"),
            "s_creditcardtransaction_partiallydecryptednumber": obj.get("sCreditcardtransactionPartiallydecryptednumber"),
            "s_creditcardtransaction_referencenumber": obj.get("sCreditcardtransactionReferencenumber")
        })
        return _obj


