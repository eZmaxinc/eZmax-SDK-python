# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.0
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, conint, constr, validator
from eZmaxApi.models.field_e_sessionhistory_endby import FieldESessionhistoryEndby

class SessionhistoryListElement(BaseModel):
    """
    A Sessionhistory List Element  # noqa: E501
    """
    pki_sessionhistory_id: conint(strict=True, le=2147483647, ge=1) = Field(..., alias="pkiSessionhistoryID", description="The unique ID of the Sessionhistory")
    fki_computer_id: Optional[conint(strict=True, le=65535, ge=1)] = Field(None, alias="fkiComputerID", description="The unique ID of the Computer")
    fki_user_id: Optional[conint(strict=True, ge=0)] = Field(None, alias="fkiUserID", description="The unique ID of the User")
    dt_sessionhistory_firsthit: constr(strict=True) = Field(..., alias="dtSessionhistoryFirsthit", description="The first hit of the Sessionhistory")
    dt_sessionhistory_lasthit: constr(strict=True) = Field(..., alias="dtSessionhistoryLasthit", description="The last hit of the Sessionhistory")
    e_sessionhistory_endby: FieldESessionhistoryEndby = Field(..., alias="eSessionhistoryEndby")
    s_computer_description: Optional[constr(strict=True)] = Field(None, alias="sComputerDescription", description="The description of the Computer")
    s_sessionhistory_duration: constr(strict=True) = Field(..., alias="sSessionhistoryDuration", description="The duration of the session")
    s_sessionhistory_ip: StrictStr = Field(..., alias="sSessionhistoryIP", description="Represent an IP address.")
    s_user_loginname: Optional[constr(strict=True)] = Field(None, alias="sUserLoginname", description="The login name of the User.")
    __properties = ["pkiSessionhistoryID", "fkiComputerID", "fkiUserID", "dtSessionhistoryFirsthit", "dtSessionhistoryLasthit", "eSessionhistoryEndby", "sComputerDescription", "sSessionhistoryDuration", "sSessionhistoryIP", "sUserLoginname"]

    @validator('dt_sessionhistory_firsthit')
    def dt_sessionhistory_firsthit_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) ([01]?[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$", value):
            raise ValueError(r"must validate the regular expression /^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) ([01]?[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$/")
        return value

    @validator('dt_sessionhistory_lasthit')
    def dt_sessionhistory_lasthit_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) ([01]?[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$", value):
            raise ValueError(r"must validate the regular expression /^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) ([01]?[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$/")
        return value

    @validator('s_computer_description')
    def s_computer_description_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^.{0,50}$", value):
            raise ValueError(r"must validate the regular expression /^.{0,50}$/")
        return value

    @validator('s_sessionhistory_duration')
    def s_sessionhistory_duration_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^(0[0-9]{1}|\d{2,}):([0-5][0-9]):([0-5][0-9])$", value):
            raise ValueError(r"must validate the regular expression /^(0[0-9]{1}|\d{2,}):([0-5][0-9]):([0-5][0-9])$/")
        return value

    @validator('s_user_loginname')
    def s_user_loginname_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^(?:([\w\.-]+@[\w\.-]+\.\w{2,20})|([a-zA-Z0-9]){1,32})$", value):
            raise ValueError(r"must validate the regular expression /^(?:([\w\.-]+@[\w\.-]+\.\w{2,20})|([a-zA-Z0-9]){1,32})$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SessionhistoryListElement:
        """Create an instance of SessionhistoryListElement from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SessionhistoryListElement:
        """Create an instance of SessionhistoryListElement from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SessionhistoryListElement.parse_obj(obj)

        _obj = SessionhistoryListElement.parse_obj({
            "pki_sessionhistory_id": obj.get("pkiSessionhistoryID"),
            "fki_computer_id": obj.get("fkiComputerID"),
            "fki_user_id": obj.get("fkiUserID"),
            "dt_sessionhistory_firsthit": obj.get("dtSessionhistoryFirsthit"),
            "dt_sessionhistory_lasthit": obj.get("dtSessionhistoryLasthit"),
            "e_sessionhistory_endby": obj.get("eSessionhistoryEndby"),
            "s_computer_description": obj.get("sComputerDescription"),
            "s_sessionhistory_duration": obj.get("sSessionhistoryDuration"),
            "s_sessionhistory_ip": obj.get("sSessionhistoryIP"),
            "s_user_loginname": obj.get("sUserLoginname")
        })
        return _obj


