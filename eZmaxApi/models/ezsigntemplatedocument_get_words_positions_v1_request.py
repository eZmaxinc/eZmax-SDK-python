# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.0
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist, validator

class EzsigntemplatedocumentGetWordsPositionsV1Request(BaseModel):
    """
    Request for POST /1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}/getWordsPositions  # noqa: E501
    """
    e_get: StrictStr = Field(..., alias="eGet", description="Specify if you want to retrieve *All* words or specific *Words* from the document. If you specify *Words*, you must send the list of words to search for in *a_sWord*.")
    b_word_case_sensitive: StrictBool = Field(..., alias="bWordCaseSensitive", description="IF *true*, words will be searched case-sensitive and results will be returned case-sensitive. IF *false*, words will be searched case-insensitive and results will be returned case-insensitive.")
    a_s_word: Optional[conlist(StrictStr)] = Field(None, alias="a_sWord", description="Array of words to find in the document")
    __properties = ["eGet", "bWordCaseSensitive", "a_sWord"]

    @validator('e_get')
    def e_get_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('All', 'Words'):
            raise ValueError("must be one of enum values ('All', 'Words')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> EzsigntemplatedocumentGetWordsPositionsV1Request:
        """Create an instance of EzsigntemplatedocumentGetWordsPositionsV1Request from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> EzsigntemplatedocumentGetWordsPositionsV1Request:
        """Create an instance of EzsigntemplatedocumentGetWordsPositionsV1Request from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return EzsigntemplatedocumentGetWordsPositionsV1Request.parse_obj(obj)

        _obj = EzsigntemplatedocumentGetWordsPositionsV1Request.parse_obj({
            "e_get": obj.get("eGet"),
            "b_word_case_sensitive": obj.get("bWordCaseSensitive"),
            "a_s_word": obj.get("a_sWord")
        })
        return _obj


