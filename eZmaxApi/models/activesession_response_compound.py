# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.1
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from eZmaxApi.models.activesession_response import ActivesessionResponse
from eZmaxApi.models.activesession_response_compound_apikey import ActivesessionResponseCompoundApikey
from eZmaxApi.models.activesession_response_compound_user import ActivesessionResponseCompoundUser
from eZmaxApi.models.field_e_activesession_ezsign import FieldEActivesessionEzsign
from eZmaxApi.models.field_e_activesession_ezsignaccess import FieldEActivesessionEzsignaccess
from eZmaxApi.models.field_e_activesession_ezsignprepaid import FieldEActivesessionEzsignprepaid
from eZmaxApi.models.field_e_activesession_origin import FieldEActivesessionOrigin
from eZmaxApi.models.field_e_activesession_realestateinprogress import FieldEActivesessionRealestateinprogress
from eZmaxApi.models.field_e_activesession_usertype import FieldEActivesessionUsertype
from eZmaxApi.models.field_e_activesession_weekdaystart import FieldEActivesessionWeekdaystart
from eZmaxApi.models.field_e_systemconfiguration_ezsignofficeplan import FieldESystemconfigurationEzsignofficeplan
from eZmaxApi.models.field_e_user_ezsignaccess import FieldEUserEzsignaccess
from eZmaxApi.models.field_e_user_ezsignprepaid import FieldEUserEzsignprepaid
from typing import Optional, Set
from typing_extensions import Self

class ActivesessionResponseCompound(ActivesessionResponse):
    """
    Payload for GET /1/object/activesession/getCurrent
    """ # noqa: E501
    fki_ezsignuser_id: Optional[Annotated[int, Field(le=65535, strict=True, ge=0)]] = Field(default=None, description="The unique ID of the Ezsignuser", alias="fkiEzsignuserID")
    b_systemconfiguration_ezsignpaidbyoffice: Optional[StrictBool] = Field(default=None, description="Whether if Ezsign is paid by the company or not", alias="bSystemconfigurationEzsignpaidbyoffice")
    e_systemconfiguration_ezsignofficeplan: Optional[FieldESystemconfigurationEzsignofficeplan] = Field(default=None, alias="eSystemconfigurationEzsignofficeplan")
    e_user_ezsignaccess: FieldEUserEzsignaccess = Field(alias="eUserEzsignaccess")
    e_user_ezsignprepaid: Optional[FieldEUserEzsignprepaid] = Field(default=None, alias="eUserEzsignprepaid")
    b_user_ezsigntrial: Optional[StrictBool] = Field(default=None, description="Whether the User's eZsign subscription is a trial", alias="bUserEzsigntrial")
    dt_user_ezsignprepaidexpiration: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="The eZsign prepaid expiration date", alias="dtUserEzsignprepaidexpiration")
    a_pki_permission_id: List[Annotated[int, Field(strict=True, ge=0)]] = Field(description="An array of permissions granted to the user or api key", alias="a_pkiPermissionID")
    obj_user_real: ActivesessionResponseCompoundUser = Field(alias="objUserReal")
    obj_user_cloned: Optional[ActivesessionResponseCompoundUser] = Field(default=None, alias="objUserCloned")
    obj_apikey: Optional[ActivesessionResponseCompoundApikey] = Field(default=None, alias="objApikey")
    a_e_module_internalname: List[StrictStr] = Field(description="An Array of Registered modules.  These are the modules that are Licensed to be used by the User or the API Key.", alias="a_eModuleInternalname")
    __properties: ClassVar[List[str]] = ["eActivesessionUsertype", "eActivesessionOrigin", "eActivesessionWeekdaystart", "fkiLanguageID", "sCompanyNameX", "sDepartmentNameX", "bActivesessionDebug", "bActivesessionIssuperadmin", "bActivesessionAttachment", "bActivesessionCanafe", "bActivesessionFinancial", "bActivesessionRealestatecompleted", "eActivesessionEzsign", "eActivesessionEzsignaccess", "eActivesessionEzsignprepaid", "eActivesessionRealestateinprogress", "pksCustomerCode", "fkiSystemconfigurationtypeID", "fkiSignatureID", "fkiEzsignuserID", "bSystemconfigurationEzsignpaidbyoffice", "eSystemconfigurationEzsignofficeplan", "eUserEzsignaccess", "eUserEzsignprepaid", "bUserEzsigntrial", "dtUserEzsignprepaidexpiration", "a_pkiPermissionID", "objUserReal", "objUserCloned", "objApikey", "a_eModuleInternalname"]

    @field_validator('dt_user_ezsignprepaidexpiration')
    def dt_user_ezsignprepaidexpiration_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$", value):
            raise ValueError(r"must validate the regular expression /^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ActivesessionResponseCompound from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of obj_user_real
        if self.obj_user_real:
            _dict['objUserReal'] = self.obj_user_real.to_dict()
        # override the default output from pydantic by calling `to_dict()` of obj_user_cloned
        if self.obj_user_cloned:
            _dict['objUserCloned'] = self.obj_user_cloned.to_dict()
        # override the default output from pydantic by calling `to_dict()` of obj_apikey
        if self.obj_apikey:
            _dict['objApikey'] = self.obj_apikey.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Optional[Self]:
        """Create an instance of ActivesessionResponseCompound from a dict"""


