# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.0
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictBool, StrictStr, conint

class BrandingListElement(BaseModel):
    """
    A Branding List Element  # noqa: E501
    """
    pki_branding_id: conint(strict=True, ge=0) = Field(..., alias="pkiBrandingID", description="The unique ID of the Branding")
    s_branding_description_x: StrictStr = Field(..., alias="sBrandingDescriptionX", description="The Description of the Branding in the language of the requester")
    i_branding_colortext: conint(strict=True, le=16777215, ge=0) = Field(..., alias="iBrandingColortext", description="The color of the text. This is a RGB color converted into integer")
    i_branding_colortextlinkbox: conint(strict=True, le=16777215, ge=0) = Field(..., alias="iBrandingColortextlinkbox", description="The color of the text in the link box. This is a RGB color converted into integer")
    i_branding_colortextbutton: conint(strict=True, le=16777215, ge=0) = Field(..., alias="iBrandingColortextbutton", description="The color of the text in the button. This is a RGB color converted into integer")
    i_branding_colorbackground: conint(strict=True, le=16777215, ge=0) = Field(..., alias="iBrandingColorbackground", description="The color of the background. This is a RGB color converted into integer")
    i_branding_colorbackgroundbutton: conint(strict=True, le=16777215, ge=0) = Field(..., alias="iBrandingColorbackgroundbutton", description="The color of the background of the button. This is a RGB color converted into integer")
    i_branding_colorbackgroundsmallbox: conint(strict=True, le=16777215, ge=0) = Field(..., alias="iBrandingColorbackgroundsmallbox", description="The color of the background of the small box. This is a RGB color converted into integer")
    b_branding_isactive: StrictBool = Field(..., alias="bBrandingIsactive", description="Whether the Branding is active or not")
    __properties = ["pkiBrandingID", "sBrandingDescriptionX", "iBrandingColortext", "iBrandingColortextlinkbox", "iBrandingColortextbutton", "iBrandingColorbackground", "iBrandingColorbackgroundbutton", "iBrandingColorbackgroundsmallbox", "bBrandingIsactive"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> BrandingListElement:
        """Create an instance of BrandingListElement from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> BrandingListElement:
        """Create an instance of BrandingListElement from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return BrandingListElement.parse_obj(obj)

        _obj = BrandingListElement.parse_obj({
            "pki_branding_id": obj.get("pkiBrandingID"),
            "s_branding_description_x": obj.get("sBrandingDescriptionX"),
            "i_branding_colortext": obj.get("iBrandingColortext"),
            "i_branding_colortextlinkbox": obj.get("iBrandingColortextlinkbox"),
            "i_branding_colortextbutton": obj.get("iBrandingColortextbutton"),
            "i_branding_colorbackground": obj.get("iBrandingColorbackground"),
            "i_branding_colorbackgroundbutton": obj.get("iBrandingColorbackgroundbutton"),
            "i_branding_colorbackgroundsmallbox": obj.get("iBrandingColorbackgroundsmallbox"),
            "b_branding_isactive": obj.get("bBrandingIsactive")
        })
        return _obj


