# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.0
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictStr, conint

class WebsiteRequest(BaseModel):
    """
    A Website Object  # noqa: E501
    """
    fki_websitetype_id: conint(strict=True, ge=0) = Field(..., alias="fkiWebsitetypeID", description="The unique ID of the Websitetype.  Valid values:  |Value|Description| |-|-| |1|Website| |2|Twitter| |3|Facebook| |4|Survey|")
    s_website_address: StrictStr = Field(..., alias="sWebsiteAddress", description="The URL of the website.")
    __properties = ["fkiWebsitetypeID", "sWebsiteAddress"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> WebsiteRequest:
        """Create an instance of WebsiteRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> WebsiteRequest:
        """Create an instance of WebsiteRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return WebsiteRequest.parse_obj(obj)

        _obj = WebsiteRequest.parse_obj({
            "fki_websitetype_id": obj.get("fkiWebsitetypeID"),
            "s_website_address": obj.get("sWebsiteAddress")
        })
        return _obj


