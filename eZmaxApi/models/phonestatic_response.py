# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.0
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, conint, constr, validator

class PhonestaticResponse(BaseModel):
    """
    A Phonestatic Object  # noqa: E501
    """
    pki_phonestatic_id: conint(strict=True, ge=0) = Field(..., alias="pkiPhonestaticID", description="The unique ID of the Phone.")
    s_phonestatic_e164: Optional[constr(strict=True)] = Field(None, alias="sPhonestaticE164", description="A phone number in E.164 Format")
    s_phonestatic_extension: Optional[constr(strict=True)] = Field(None, alias="sPhonestaticExtension", description="The extension of the phone number.")
    __properties = ["pkiPhonestaticID", "sPhonestaticE164", "sPhonestaticExtension"]

    @validator('s_phonestatic_e164')
    def s_phonestatic_e164_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^\+[1-9]\d{1,14}$", value):
            raise ValueError(r"must validate the regular expression /^\+[1-9]\d{1,14}$/")
        return value

    @validator('s_phonestatic_extension')
    def s_phonestatic_extension_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^\d$", value):
            raise ValueError(r"must validate the regular expression /^\d$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PhonestaticResponse:
        """Create an instance of PhonestaticResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PhonestaticResponse:
        """Create an instance of PhonestaticResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PhonestaticResponse.parse_obj(obj)

        _obj = PhonestaticResponse.parse_obj({
            "pki_phonestatic_id": obj.get("pkiPhonestaticID"),
            "s_phonestatic_e164": obj.get("sPhonestaticE164"),
            "s_phonestatic_extension": obj.get("sPhonestaticExtension")
        })
        return _obj


