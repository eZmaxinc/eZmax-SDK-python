# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.0
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictBytes, StrictStr, validator

class CommonFile(BaseModel):
    """
    Object representing a file used in a request or response context   # noqa: E501
    """
    s_file_name: StrictStr = Field(..., alias="sFileName", description="The name of the file")
    s_file_url: Optional[StrictStr] = Field(None, alias="sFileUrl", description="The URL used to reach the File")
    s_file_base64: Optional[Union[StrictBytes, StrictStr]] = Field(None, alias="sFileBase64", description="The Base64 encoded binary content of the File")
    e_file_source: StrictStr = Field(..., alias="eFileSource", description="The source of the File")
    __properties = ["sFileName", "sFileUrl", "sFileBase64", "eFileSource"]

    @validator('e_file_source')
    def e_file_source_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('Base64', 'Url'):
            raise ValueError("must be one of enum values ('Base64', 'Url')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CommonFile:
        """Create an instance of CommonFile from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CommonFile:
        """Create an instance of CommonFile from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CommonFile.parse_obj(obj)

        _obj = CommonFile.parse_obj({
            "s_file_name": obj.get("sFileName"),
            "s_file_url": obj.get("sFileUrl"),
            "s_file_base64": obj.get("sFileBase64"),
            "e_file_source": obj.get("eFileSource")
        })
        return _obj


