# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.2
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List
from eZmaxApi.models.enum_fontunderline import EnumFontunderline
from eZmaxApi.models.enum_fontweight import EnumFontweight
from eZmaxApi.models.enum_horizontalalignment import EnumHorizontalalignment
from eZmaxApi.models.enum_verticalalignment import EnumVerticalalignment
from typing import Optional, Set
from typing_extensions import Self

class CommonReportcellstyle(BaseModel):
    """
    Styles applied to a Reportcell 
    """ # noqa: E501
    b_reportcellstyle_bordertop: StrictBool = Field(description="Whether there is a border at the top of the Reportcell", alias="bReportcellstyleBordertop")
    b_reportcellstyle_borderbottom: StrictBool = Field(description="Whether there is a border at the bottom of the Reportcell", alias="bReportcellstyleBorderbottom")
    b_reportcellstyle_borderleft: StrictBool = Field(description="Whether there is a border at the left of the Reportcell", alias="bReportcellstyleBorderleft")
    b_reportcellstyle_borderright: StrictBool = Field(description="Whether there is a border at the right of the Reportcell", alias="bReportcellstyleBorderright")
    e_reportcell_horizontalalignment: EnumHorizontalalignment = Field(alias="eReportcellHorizontalalignment")
    e_reportcell_verticalalignment: EnumVerticalalignment = Field(alias="eReportcellVerticalalignment")
    e_reportcell_fontweight: EnumFontweight = Field(alias="eReportcellFontweight")
    e_reportcell_fontunderline: EnumFontunderline = Field(alias="eReportcellFontunderline")
    __properties: ClassVar[List[str]] = ["bReportcellstyleBordertop", "bReportcellstyleBorderbottom", "bReportcellstyleBorderleft", "bReportcellstyleBorderright", "eReportcellHorizontalalignment", "eReportcellVerticalalignment", "eReportcellFontweight", "eReportcellFontunderline"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CommonReportcellstyle from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CommonReportcellstyle from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bReportcellstyleBordertop": obj.get("bReportcellstyleBordertop"),
            "bReportcellstyleBorderbottom": obj.get("bReportcellstyleBorderbottom"),
            "bReportcellstyleBorderleft": obj.get("bReportcellstyleBorderleft"),
            "bReportcellstyleBorderright": obj.get("bReportcellstyleBorderright"),
            "eReportcellHorizontalalignment": obj.get("eReportcellHorizontalalignment"),
            "eReportcellVerticalalignment": obj.get("eReportcellVerticalalignment"),
            "eReportcellFontweight": obj.get("eReportcellFontweight"),
            "eReportcellFontunderline": obj.get("eReportcellFontunderline")
        })
        return _obj


