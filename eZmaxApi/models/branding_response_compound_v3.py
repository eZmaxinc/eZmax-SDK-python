# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.2
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from eZmaxApi.models.field_e_branding_alignlogo import FieldEBrandingAlignlogo
from eZmaxApi.models.field_e_branding_logo import FieldEBrandingLogo
from eZmaxApi.models.multilingual_branding_description import MultilingualBrandingDescription
from typing import Optional, Set
from typing_extensions import Self

class BrandingResponseCompoundV3(BaseModel):
    """
    A Branding Object
    """ # noqa: E501
    pki_branding_id: Annotated[int, Field(strict=True, ge=0)] = Field(description="The unique ID of the Branding", alias="pkiBrandingID")
    fki_email_id: Optional[Annotated[int, Field(le=16777215, strict=True, ge=1)]] = Field(default=None, description="The unique ID of the Email", alias="fkiEmailID")
    obj_branding_description: MultilingualBrandingDescription = Field(alias="objBrandingDescription")
    s_branding_description_x: StrictStr = Field(description="The Description of the Branding in the language of the requester", alias="sBrandingDescriptionX")
    s_branding_name: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="The name of the Branding  This value will only be set if you wish to overwrite the default name. If you want to keep the default name, leave this property empty", alias="sBrandingName")
    s_email_address: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="The email address.", alias="sEmailAddress")
    e_branding_logo: FieldEBrandingLogo = Field(alias="eBrandingLogo")
    e_branding_alignlogo: FieldEBrandingAlignlogo = Field(alias="eBrandingAlignlogo")
    i_branding_color: Annotated[int, Field(le=16777215, strict=True, ge=0)] = Field(description="The primary color. This is a RGB color converted into integer", alias="iBrandingColor")
    b_branding_isactive: StrictBool = Field(description="Whether the Branding is active or not", alias="bBrandingIsactive")
    s_branding_logourl: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="The url of the picture used as logo in the Branding", alias="sBrandingLogourl")
    s_branding_logoemailurl: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="The url of the picture used in email as logo in the Branding", alias="sBrandingLogoemailurl")
    s_branding_logointerfaceurl: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="The url of the picture used as logo in the Branding", alias="sBrandingLogointerfaceurl")
    __properties: ClassVar[List[str]] = ["pkiBrandingID", "fkiEmailID", "objBrandingDescription", "sBrandingDescriptionX", "sBrandingName", "sEmailAddress", "eBrandingLogo", "eBrandingAlignlogo", "iBrandingColor", "bBrandingIsactive", "sBrandingLogourl", "sBrandingLogoemailurl", "sBrandingLogointerfaceurl"]

    @field_validator('s_branding_name')
    def s_branding_name_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^.{0,55}$", value):
            raise ValueError(r"must validate the regular expression /^.{0,55}$/")
        return value

    @field_validator('s_email_address')
    def s_email_address_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[\w.%+\-!#$%&\'*+\/=?^`{|}~]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,20}$", value):
            raise ValueError(r"must validate the regular expression /^[\w.%+\-!#$%&'*+\/=?^`{|}~]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,20}$/")
        return value

    @field_validator('s_branding_logourl')
    def s_branding_logourl_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^(https|http):\/\/[^\s\/$.?#].[^\s]*$", value):
            raise ValueError(r"must validate the regular expression /^(https|http):\/\/[^\s\/$.?#].[^\s]*$/")
        return value

    @field_validator('s_branding_logoemailurl')
    def s_branding_logoemailurl_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^(https|http):\/\/[^\s\/$.?#].[^\s]*$", value):
            raise ValueError(r"must validate the regular expression /^(https|http):\/\/[^\s\/$.?#].[^\s]*$/")
        return value

    @field_validator('s_branding_logointerfaceurl')
    def s_branding_logointerfaceurl_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^(https|http):\/\/[^\s\/$.?#].[^\s]*$", value):
            raise ValueError(r"must validate the regular expression /^(https|http):\/\/[^\s\/$.?#].[^\s]*$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BrandingResponseCompoundV3 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of obj_branding_description
        if self.obj_branding_description:
            _dict['objBrandingDescription'] = self.obj_branding_description.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BrandingResponseCompoundV3 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "pkiBrandingID": obj.get("pkiBrandingID"),
            "fkiEmailID": obj.get("fkiEmailID"),
            "objBrandingDescription": MultilingualBrandingDescription.from_dict(obj["objBrandingDescription"]) if obj.get("objBrandingDescription") is not None else None,
            "sBrandingDescriptionX": obj.get("sBrandingDescriptionX"),
            "sBrandingName": obj.get("sBrandingName"),
            "sEmailAddress": obj.get("sEmailAddress"),
            "eBrandingLogo": obj.get("eBrandingLogo"),
            "eBrandingAlignlogo": obj.get("eBrandingAlignlogo"),
            "iBrandingColor": obj.get("iBrandingColor"),
            "bBrandingIsactive": obj.get("bBrandingIsactive"),
            "sBrandingLogourl": obj.get("sBrandingLogourl"),
            "sBrandingLogoemailurl": obj.get("sBrandingLogoemailurl"),
            "sBrandingLogointerfaceurl": obj.get("sBrandingLogointerfaceurl")
        })
        return _obj


