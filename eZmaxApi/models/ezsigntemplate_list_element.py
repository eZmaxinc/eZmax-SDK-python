# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.0
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conint

class EzsigntemplateListElement(BaseModel):
    """
    A Ezsigntemplate List Element  # noqa: E501
    """
    pki_ezsigntemplate_id: conint(strict=True, ge=0) = Field(..., alias="pkiEzsigntemplateID", description="The unique ID of the Ezsigntemplate")
    fki_ezsignfoldertype_id: conint(strict=True, ge=0) = Field(..., alias="fkiEzsignfoldertypeID", description="The unique ID of the Ezsignfoldertype.")
    fki_language_id: conint(strict=True, le=2, ge=1) = Field(..., alias="fkiLanguageID", description="The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|")
    s_ezsigntemplate_description: StrictStr = Field(..., alias="sEzsigntemplateDescription", description="The description of the Ezsigntemplate")
    i_ezsigntemplatedocument_pagetotal: Optional[conint(strict=True, ge=1)] = Field(None, alias="iEzsigntemplatedocumentPagetotal", description="The number of pages in the Ezsigntemplatedocument.")
    i_ezsigntemplate_signaturetotal: Optional[StrictInt] = Field(None, alias="iEzsigntemplateSignaturetotal", description="The number of total signatures in the Ezsigntemplate.")
    i_ezsigntemplate_formfieldtotal: Optional[StrictInt] = Field(None, alias="iEzsigntemplateFormfieldtotal", description="The number of total form fields in the Ezsigntemplate.")
    b_ezsigntemplate_incomplete: StrictBool = Field(..., alias="bEzsigntemplateIncomplete", description="Indicate the Ezsigntemplate is incomplete and cannot be used")
    s_ezsignfoldertype_name_x: StrictStr = Field(..., alias="sEzsignfoldertypeNameX", description="The name of the Ezsignfoldertype in the language of the requester")
    __properties = ["pkiEzsigntemplateID", "fkiEzsignfoldertypeID", "fkiLanguageID", "sEzsigntemplateDescription", "iEzsigntemplatedocumentPagetotal", "iEzsigntemplateSignaturetotal", "iEzsigntemplateFormfieldtotal", "bEzsigntemplateIncomplete", "sEzsignfoldertypeNameX"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> EzsigntemplateListElement:
        """Create an instance of EzsigntemplateListElement from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> EzsigntemplateListElement:
        """Create an instance of EzsigntemplateListElement from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return EzsigntemplateListElement.parse_obj(obj)

        _obj = EzsigntemplateListElement.parse_obj({
            "pki_ezsigntemplate_id": obj.get("pkiEzsigntemplateID"),
            "fki_ezsignfoldertype_id": obj.get("fkiEzsignfoldertypeID"),
            "fki_language_id": obj.get("fkiLanguageID"),
            "s_ezsigntemplate_description": obj.get("sEzsigntemplateDescription"),
            "i_ezsigntemplatedocument_pagetotal": obj.get("iEzsigntemplatedocumentPagetotal"),
            "i_ezsigntemplate_signaturetotal": obj.get("iEzsigntemplateSignaturetotal"),
            "i_ezsigntemplate_formfieldtotal": obj.get("iEzsigntemplateFormfieldtotal"),
            "b_ezsigntemplate_incomplete": obj.get("bEzsigntemplateIncomplete"),
            "s_ezsignfoldertype_name_x": obj.get("sEzsignfoldertypeNameX")
        })
        return _obj


