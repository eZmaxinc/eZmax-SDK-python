# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.1
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from eZmaxApi.models.custom_dropdown_element_request import CustomDropdownElementRequest
from eZmaxApi.models.enum_textvalidation import EnumTextvalidation
from eZmaxApi.models.ezsigntemplateformfield_request_compound import EzsigntemplateformfieldRequestCompound
from eZmaxApi.models.ezsigntemplateformfieldgroup_request import EzsigntemplateformfieldgroupRequest
from eZmaxApi.models.ezsigntemplateformfieldgroupsigner_request import EzsigntemplateformfieldgroupsignerRequest
from eZmaxApi.models.field_e_ezsigntemplateformfieldgroup_signerrequirement import FieldEEzsigntemplateformfieldgroupSignerrequirement
from eZmaxApi.models.field_e_ezsigntemplateformfieldgroup_tooltipposition import FieldEEzsigntemplateformfieldgroupTooltipposition
from eZmaxApi.models.field_e_ezsigntemplateformfieldgroup_type import FieldEEzsigntemplateformfieldgroupType
from typing import Optional, Set
from typing_extensions import Self

class EzsigntemplateformfieldgroupRequestCompound(EzsigntemplateformfieldgroupRequest):
    """
    A Ezsigntemplateformfieldgroup Object and children
    """ # noqa: E501
    a_obj_ezsigntemplateformfieldgroupsigner: List[EzsigntemplateformfieldgroupsignerRequest] = Field(alias="a_objEzsigntemplateformfieldgroupsigner")
    a_obj_dropdown_element: Optional[List[CustomDropdownElementRequest]] = Field(default=None, alias="a_objDropdownElement")
    a_obj_ezsigntemplateformfield: List[EzsigntemplateformfieldRequestCompound] = Field(alias="a_objEzsigntemplateformfield")
    __properties: ClassVar[List[str]] = ["pkiEzsigntemplateformfieldgroupID", "fkiEzsigntemplatedocumentID", "eEzsigntemplateformfieldgroupType", "eEzsigntemplateformfieldgroupSignerrequirement", "sEzsigntemplateformfieldgroupLabel", "iEzsigntemplateformfieldgroupStep", "sEzsigntemplateformfieldgroupDefaultvalue", "iEzsigntemplateformfieldgroupFilledmin", "iEzsigntemplateformfieldgroupFilledmax", "bEzsigntemplateformfieldgroupReadonly", "iEzsigntemplateformfieldgroupMaxlength", "bEzsigntemplateformfieldgroupEncrypted", "sEzsigntemplateformfieldgroupRegexp", "sEzsigntemplateformfieldgroupTextvalidationcustommessage", "eEzsigntemplateformfieldgroupTextvalidation", "tEzsigntemplateformfieldgroupTooltip", "eEzsigntemplateformfieldgroupTooltipposition", "a_objEzsigntemplateformfieldgroupsigner", "a_objDropdownElement", "a_objEzsigntemplateformfield"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EzsigntemplateformfieldgroupRequestCompound from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in a_obj_ezsigntemplateformfieldgroupsigner (list)
        _items = []
        if self.a_obj_ezsigntemplateformfieldgroupsigner:
            for _item_a_obj_ezsigntemplateformfieldgroupsigner in self.a_obj_ezsigntemplateformfieldgroupsigner:
                if _item_a_obj_ezsigntemplateformfieldgroupsigner:
                    _items.append(_item_a_obj_ezsigntemplateformfieldgroupsigner.to_dict())
            _dict['a_objEzsigntemplateformfieldgroupsigner'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in a_obj_dropdown_element (list)
        _items = []
        if self.a_obj_dropdown_element:
            for _item_a_obj_dropdown_element in self.a_obj_dropdown_element:
                if _item_a_obj_dropdown_element:
                    _items.append(_item_a_obj_dropdown_element.to_dict())
            _dict['a_objDropdownElement'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in a_obj_ezsigntemplateformfield (list)
        _items = []
        if self.a_obj_ezsigntemplateformfield:
            for _item_a_obj_ezsigntemplateformfield in self.a_obj_ezsigntemplateformfield:
                if _item_a_obj_ezsigntemplateformfield:
                    _items.append(_item_a_obj_ezsigntemplateformfield.to_dict())
            _dict['a_objEzsigntemplateformfield'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EzsigntemplateformfieldgroupRequestCompound from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "pkiEzsigntemplateformfieldgroupID": obj.get("pkiEzsigntemplateformfieldgroupID"),
            "fkiEzsigntemplatedocumentID": obj.get("fkiEzsigntemplatedocumentID"),
            "eEzsigntemplateformfieldgroupType": obj.get("eEzsigntemplateformfieldgroupType"),
            "eEzsigntemplateformfieldgroupSignerrequirement": obj.get("eEzsigntemplateformfieldgroupSignerrequirement"),
            "sEzsigntemplateformfieldgroupLabel": obj.get("sEzsigntemplateformfieldgroupLabel"),
            "iEzsigntemplateformfieldgroupStep": obj.get("iEzsigntemplateformfieldgroupStep"),
            "sEzsigntemplateformfieldgroupDefaultvalue": obj.get("sEzsigntemplateformfieldgroupDefaultvalue"),
            "iEzsigntemplateformfieldgroupFilledmin": obj.get("iEzsigntemplateformfieldgroupFilledmin"),
            "iEzsigntemplateformfieldgroupFilledmax": obj.get("iEzsigntemplateformfieldgroupFilledmax"),
            "bEzsigntemplateformfieldgroupReadonly": obj.get("bEzsigntemplateformfieldgroupReadonly"),
            "iEzsigntemplateformfieldgroupMaxlength": obj.get("iEzsigntemplateformfieldgroupMaxlength"),
            "bEzsigntemplateformfieldgroupEncrypted": obj.get("bEzsigntemplateformfieldgroupEncrypted"),
            "sEzsigntemplateformfieldgroupRegexp": obj.get("sEzsigntemplateformfieldgroupRegexp"),
            "sEzsigntemplateformfieldgroupTextvalidationcustommessage": obj.get("sEzsigntemplateformfieldgroupTextvalidationcustommessage"),
            "eEzsigntemplateformfieldgroupTextvalidation": obj.get("eEzsigntemplateformfieldgroupTextvalidation"),
            "tEzsigntemplateformfieldgroupTooltip": obj.get("tEzsigntemplateformfieldgroupTooltip"),
            "eEzsigntemplateformfieldgroupTooltipposition": obj.get("eEzsigntemplateformfieldgroupTooltipposition"),
            "a_objEzsigntemplateformfieldgroupsigner": [EzsigntemplateformfieldgroupsignerRequest.from_dict(_item) for _item in obj["a_objEzsigntemplateformfieldgroupsigner"]] if obj.get("a_objEzsigntemplateformfieldgroupsigner") is not None else None,
            "a_objDropdownElement": [CustomDropdownElementRequest.from_dict(_item) for _item in obj["a_objDropdownElement"]] if obj.get("a_objDropdownElement") is not None else None,
            "a_objEzsigntemplateformfield": [EzsigntemplateformfieldRequestCompound.from_dict(_item) for _item in obj["a_objEzsigntemplateformfield"]] if obj.get("a_objEzsigntemplateformfield") is not None else None
        })
        return _obj


