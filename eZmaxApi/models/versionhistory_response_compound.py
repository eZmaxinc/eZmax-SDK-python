# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.0
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conint
from eZmaxApi.models.field_e_versionhistory_type import FieldEVersionhistoryType
from eZmaxApi.models.field_e_versionhistory_usertype import FieldEVersionhistoryUsertype
from eZmaxApi.models.multilingual_versionhistory_detail import MultilingualVersionhistoryDetail

class VersionhistoryResponseCompound(BaseModel):
    """
    A Versionhistory Object  # noqa: E501
    """
    pki_versionhistory_id: conint(strict=True, ge=0) = Field(..., alias="pkiVersionhistoryID", description="The unique ID of the Versionhistory")
    fki_module_id: Optional[conint(strict=True, ge=0)] = Field(None, alias="fkiModuleID", description="The unique ID of the Module")
    fki_modulesection_id: Optional[conint(strict=True, ge=0)] = Field(None, alias="fkiModulesectionID", description="The unique ID of the Modulesection")
    s_module_name_x: Optional[StrictStr] = Field(None, alias="sModuleNameX", description="The Name of the Module in the language of the requester")
    s_modulesection_name_x: Optional[StrictStr] = Field(None, alias="sModulesectionNameX", description="The Name of the Modulesection in the language of the requester")
    e_versionhistory_usertype: Optional[FieldEVersionhistoryUsertype] = Field(None, alias="eVersionhistoryUsertype")
    obj_versionhistory_detail: MultilingualVersionhistoryDetail = Field(..., alias="objVersionhistoryDetail")
    dt_versionhistory_date: StrictStr = Field(..., alias="dtVersionhistoryDate", description="The date  at which the Versionhistory was published or should be published")
    dt_versionhistory_dateend: Optional[StrictStr] = Field(None, alias="dtVersionhistoryDateend", description="The date  at which the Versionhistory will no longer be visible")
    e_versionhistory_type: FieldEVersionhistoryType = Field(..., alias="eVersionhistoryType")
    b_versionhistory_draft: StrictBool = Field(..., alias="bVersionhistoryDraft", description="Whether the Versionhistory is published or still a draft")
    __properties = ["pkiVersionhistoryID", "fkiModuleID", "fkiModulesectionID", "sModuleNameX", "sModulesectionNameX", "eVersionhistoryUsertype", "objVersionhistoryDetail", "dtVersionhistoryDate", "dtVersionhistoryDateend", "eVersionhistoryType", "bVersionhistoryDraft"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> VersionhistoryResponseCompound:
        """Create an instance of VersionhistoryResponseCompound from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of obj_versionhistory_detail
        if self.obj_versionhistory_detail:
            _dict['objVersionhistoryDetail'] = self.obj_versionhistory_detail.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> VersionhistoryResponseCompound:
        """Create an instance of VersionhistoryResponseCompound from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return VersionhistoryResponseCompound.parse_obj(obj)

        _obj = VersionhistoryResponseCompound.parse_obj({
            "pki_versionhistory_id": obj.get("pkiVersionhistoryID"),
            "fki_module_id": obj.get("fkiModuleID"),
            "fki_modulesection_id": obj.get("fkiModulesectionID"),
            "s_module_name_x": obj.get("sModuleNameX"),
            "s_modulesection_name_x": obj.get("sModulesectionNameX"),
            "e_versionhistory_usertype": obj.get("eVersionhistoryUsertype"),
            "obj_versionhistory_detail": MultilingualVersionhistoryDetail.from_dict(obj.get("objVersionhistoryDetail")) if obj.get("objVersionhistoryDetail") is not None else None,
            "dt_versionhistory_date": obj.get("dtVersionhistoryDate"),
            "dt_versionhistory_dateend": obj.get("dtVersionhistoryDateend"),
            "e_versionhistory_type": obj.get("eVersionhistoryType"),
            "b_versionhistory_draft": obj.get("bVersionhistoryDraft")
        })
        return _obj


