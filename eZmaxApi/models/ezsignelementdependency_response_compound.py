# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.0
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, conint, constr, validator
from eZmaxApi.models.field_e_ezsignelementdependency_operator import FieldEEzsignelementdependencyOperator
from eZmaxApi.models.field_e_ezsignelementdependency_validation import FieldEEzsignelementdependencyValidation

class EzsignelementdependencyResponseCompound(BaseModel):
    """
    An Ezsignelementdependency Object and children to create a complete structure  # noqa: E501
    """
    pki_ezsignelementdependency_id: conint(strict=True, le=65535, ge=0) = Field(..., alias="pkiEzsignelementdependencyID", description="The unique ID of the Ezsignelementdependency")
    fki_ezsignformfield_id: Optional[conint(strict=True, ge=0)] = Field(None, alias="fkiEzsignformfieldID", description="The unique ID of the Ezsignformfield")
    fki_ezsignsignature_id: Optional[conint(strict=True, ge=0)] = Field(None, alias="fkiEzsignsignatureID", description="The unique ID of the Ezsignsignature")
    fki_ezsignformfield_id_validation: Optional[conint(strict=True, ge=0)] = Field(None, alias="fkiEzsignformfieldIDValidation", description="The unique ID of the Ezsignformfield")
    fki_ezsignformfieldgroup_id_validation: Optional[conint(strict=True, ge=0)] = Field(None, alias="fkiEzsignformfieldgroupIDValidation", description="The unique ID of the Ezsignformfieldgroup")
    e_ezsignelementdependency_validation: FieldEEzsignelementdependencyValidation = Field(..., alias="eEzsignelementdependencyValidation")
    b_ezsignelementdependency_selected: Optional[StrictBool] = Field(None, alias="bEzsignelementdependencySelected", description="Whether if it's selected or not when using eEzsignelementdependencyValidation = Selected")
    e_ezsignelementdependency_operator: Optional[FieldEEzsignelementdependencyOperator] = Field(None, alias="eEzsignelementdependencyOperator")
    s_ezsignelementdependency_value: Optional[constr(strict=True)] = Field(None, alias="sEzsignelementdependencyValue", description="The value of the Ezsignelementdependency")
    __properties = ["pkiEzsignelementdependencyID", "fkiEzsignformfieldID", "fkiEzsignsignatureID", "fkiEzsignformfieldIDValidation", "fkiEzsignformfieldgroupIDValidation", "eEzsignelementdependencyValidation", "bEzsignelementdependencySelected", "eEzsignelementdependencyOperator", "sEzsignelementdependencyValue"]

    @validator('s_ezsignelementdependency_value')
    def s_ezsignelementdependency_value_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^.{0,50}$", value):
            raise ValueError(r"must validate the regular expression /^.{0,50}$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> EzsignelementdependencyResponseCompound:
        """Create an instance of EzsignelementdependencyResponseCompound from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> EzsignelementdependencyResponseCompound:
        """Create an instance of EzsignelementdependencyResponseCompound from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return EzsignelementdependencyResponseCompound.parse_obj(obj)

        _obj = EzsignelementdependencyResponseCompound.parse_obj({
            "pki_ezsignelementdependency_id": obj.get("pkiEzsignelementdependencyID"),
            "fki_ezsignformfield_id": obj.get("fkiEzsignformfieldID"),
            "fki_ezsignsignature_id": obj.get("fkiEzsignsignatureID"),
            "fki_ezsignformfield_id_validation": obj.get("fkiEzsignformfieldIDValidation"),
            "fki_ezsignformfieldgroup_id_validation": obj.get("fkiEzsignformfieldgroupIDValidation"),
            "e_ezsignelementdependency_validation": obj.get("eEzsignelementdependencyValidation"),
            "b_ezsignelementdependency_selected": obj.get("bEzsignelementdependencySelected"),
            "e_ezsignelementdependency_operator": obj.get("eEzsignelementdependencyOperator"),
            "s_ezsignelementdependency_value": obj.get("sEzsignelementdependencyValue")
        })
        return _obj


