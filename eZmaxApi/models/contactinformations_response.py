# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.1
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from eZmaxApi.models.address_response_compound import AddressResponseCompound
from eZmaxApi.models.email_response_compound import EmailResponseCompound
from eZmaxApi.models.field_e_contactinformations_type import FieldEContactinformationsType
from eZmaxApi.models.phone_response_compound import PhoneResponseCompound
from eZmaxApi.models.website_response_compound import WebsiteResponseCompound
from typing import Optional, Set
from typing_extensions import Self

class ContactinformationsResponse(BaseModel):
    """
    A Contactinformations Object
    """ # noqa: E501
    pki_contactinformations_id: Annotated[int, Field(le=16777215, strict=True, ge=0)] = Field(description="The unique ID of the Contactinformations", alias="pkiContactinformationsID")
    fki_address_id_default: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The unique ID of the Address", alias="fkiAddressIDDefault")
    fki_phone_id_default: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The unique ID of the Phone.", alias="fkiPhoneIDDefault")
    fki_email_id_default: Optional[Annotated[int, Field(le=16777215, strict=True, ge=1)]] = Field(default=None, description="The unique ID of the Email", alias="fkiEmailIDDefault")
    fki_website_id_default: Optional[Annotated[int, Field(le=16777215, strict=True, ge=0)]] = Field(default=None, description="The unique ID of the Website Default", alias="fkiWebsiteIDDefault")
    e_contactinformations_type: FieldEContactinformationsType = Field(alias="eContactinformationsType")
    s_contactinformations_url: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="The url of the Contactinformations", alias="sContactinformationsUrl")
    obj_address_default: Optional[AddressResponseCompound] = Field(default=None, alias="objAddressDefault")
    obj_phone_default: Optional[PhoneResponseCompound] = Field(default=None, alias="objPhoneDefault")
    obj_email_default: Optional[EmailResponseCompound] = Field(default=None, alias="objEmailDefault")
    obj_website_default: Optional[WebsiteResponseCompound] = Field(default=None, alias="objWebsiteDefault")
    __properties: ClassVar[List[str]] = ["pkiContactinformationsID", "fkiAddressIDDefault", "fkiPhoneIDDefault", "fkiEmailIDDefault", "fkiWebsiteIDDefault", "eContactinformationsType", "sContactinformationsUrl", "objAddressDefault", "objPhoneDefault", "objEmailDefault", "objWebsiteDefault"]

    @field_validator('s_contactinformations_url')
    def s_contactinformations_url_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^.{0,255}$", value):
            raise ValueError(r"must validate the regular expression /^.{0,255}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ContactinformationsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of obj_address_default
        if self.obj_address_default:
            _dict['objAddressDefault'] = self.obj_address_default.to_dict()
        # override the default output from pydantic by calling `to_dict()` of obj_phone_default
        if self.obj_phone_default:
            _dict['objPhoneDefault'] = self.obj_phone_default.to_dict()
        # override the default output from pydantic by calling `to_dict()` of obj_email_default
        if self.obj_email_default:
            _dict['objEmailDefault'] = self.obj_email_default.to_dict()
        # override the default output from pydantic by calling `to_dict()` of obj_website_default
        if self.obj_website_default:
            _dict['objWebsiteDefault'] = self.obj_website_default.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ContactinformationsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "pkiContactinformationsID": obj.get("pkiContactinformationsID"),
            "fkiAddressIDDefault": obj.get("fkiAddressIDDefault"),
            "fkiPhoneIDDefault": obj.get("fkiPhoneIDDefault"),
            "fkiEmailIDDefault": obj.get("fkiEmailIDDefault"),
            "fkiWebsiteIDDefault": obj.get("fkiWebsiteIDDefault"),
            "eContactinformationsType": obj.get("eContactinformationsType"),
            "sContactinformationsUrl": obj.get("sContactinformationsUrl"),
            "objAddressDefault": AddressResponseCompound.from_dict(obj["objAddressDefault"]) if obj.get("objAddressDefault") is not None else None,
            "objPhoneDefault": PhoneResponseCompound.from_dict(obj["objPhoneDefault"]) if obj.get("objPhoneDefault") is not None else None,
            "objEmailDefault": EmailResponseCompound.from_dict(obj["objEmailDefault"]) if obj.get("objEmailDefault") is not None else None,
            "objWebsiteDefault": WebsiteResponseCompound.from_dict(obj["objWebsiteDefault"]) if obj.get("objWebsiteDefault") is not None else None
        })
        return _obj


