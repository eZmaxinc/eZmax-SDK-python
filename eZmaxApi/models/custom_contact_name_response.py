# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.0
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class CustomContactNameResponse(BaseModel):
    """
    A Custom ContactName Object  # noqa: E501
    """
    s_contact_firstname: Optional[StrictStr] = Field(None, alias="sContactFirstname", description="The First name of the contact")
    s_contact_lastname: Optional[StrictStr] = Field(None, alias="sContactLastname", description="The Last name of the contact")
    s_contact_company: Optional[StrictStr] = Field(None, alias="sContactCompany", description="The Company name of the contact")
    __properties = ["sContactFirstname", "sContactLastname", "sContactCompany"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CustomContactNameResponse:
        """Create an instance of CustomContactNameResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CustomContactNameResponse:
        """Create an instance of CustomContactNameResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CustomContactNameResponse.parse_obj(obj)

        _obj = CustomContactNameResponse.parse_obj({
            "s_contact_firstname": obj.get("sContactFirstname"),
            "s_contact_lastname": obj.get("sContactLastname"),
            "s_contact_company": obj.get("sContactCompany")
        })
        return _obj


