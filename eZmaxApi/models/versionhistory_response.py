# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.1
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from eZmaxApi.models.field_e_versionhistory_type import FieldEVersionhistoryType
from eZmaxApi.models.field_e_versionhistory_usertype import FieldEVersionhistoryUsertype
from eZmaxApi.models.multilingual_versionhistory_detail import MultilingualVersionhistoryDetail
from typing import Optional, Set
from typing_extensions import Self

class VersionhistoryResponse(BaseModel):
    """
    A Versionhistory Object
    """ # noqa: E501
    pki_versionhistory_id: Annotated[int, Field(strict=True, ge=0)] = Field(description="The unique ID of the Versionhistory", alias="pkiVersionhistoryID")
    fki_module_id: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The unique ID of the Module", alias="fkiModuleID")
    fki_modulesection_id: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The unique ID of the Modulesection", alias="fkiModulesectionID")
    s_module_name_x: Optional[StrictStr] = Field(default=None, description="The Name of the Module in the language of the requester", alias="sModuleNameX")
    s_modulesection_name_x: Optional[StrictStr] = Field(default=None, description="The Name of the Modulesection in the language of the requester", alias="sModulesectionNameX")
    e_versionhistory_usertype: Optional[FieldEVersionhistoryUsertype] = Field(default=None, alias="eVersionhistoryUsertype")
    obj_versionhistory_detail: MultilingualVersionhistoryDetail = Field(alias="objVersionhistoryDetail")
    dt_versionhistory_date: StrictStr = Field(description="The date  at which the Versionhistory was published or should be published", alias="dtVersionhistoryDate")
    dt_versionhistory_dateend: Optional[StrictStr] = Field(default=None, description="The date  at which the Versionhistory will no longer be visible", alias="dtVersionhistoryDateend")
    e_versionhistory_type: FieldEVersionhistoryType = Field(alias="eVersionhistoryType")
    b_versionhistory_draft: StrictBool = Field(description="Whether the Versionhistory is published or still a draft", alias="bVersionhistoryDraft")
    __properties: ClassVar[List[str]] = ["pkiVersionhistoryID", "fkiModuleID", "fkiModulesectionID", "sModuleNameX", "sModulesectionNameX", "eVersionhistoryUsertype", "objVersionhistoryDetail", "dtVersionhistoryDate", "dtVersionhistoryDateend", "eVersionhistoryType", "bVersionhistoryDraft"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VersionhistoryResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of obj_versionhistory_detail
        if self.obj_versionhistory_detail:
            _dict['objVersionhistoryDetail'] = self.obj_versionhistory_detail.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Optional[Self]:
        """Create an instance of VersionhistoryResponse from a dict"""


