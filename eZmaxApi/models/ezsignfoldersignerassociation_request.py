# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.0
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conint

class EzsignfoldersignerassociationRequest(BaseModel):
    """
    An Ezsignfoldersignerassociation Object  # noqa: E501
    """
    pki_ezsignfoldersignerassociation_id: Optional[conint(strict=True, ge=0)] = Field(None, alias="pkiEzsignfoldersignerassociationID", description="The unique ID of the Ezsignfoldersignerassociation")
    fki_user_id: Optional[conint(strict=True, ge=0)] = Field(None, alias="fkiUserID", description="The unique ID of the User")
    fki_ezsignsignergroup_id: Optional[conint(strict=True, le=65535, ge=0)] = Field(None, alias="fkiEzsignsignergroupID", description="The unique ID of the Ezsignsignergroup")
    fki_ezsignfolder_id: conint(strict=True, ge=0) = Field(..., alias="fkiEzsignfolderID", description="The unique ID of the Ezsignfolder")
    b_ezsignfoldersignerassociation_receivecopy: Optional[StrictBool] = Field(None, alias="bEzsignfoldersignerassociationReceivecopy", description="If this flag is true. The signatory will receive a copy of every signed Ezsigndocument even if it ain't required to sign the document.")
    t_ezsignfoldersignerassociation_message: Optional[StrictStr] = Field(None, alias="tEzsignfoldersignerassociationMessage", description="A custom text message that will be added to the email sent.")
    __properties = ["pkiEzsignfoldersignerassociationID", "fkiUserID", "fkiEzsignsignergroupID", "fkiEzsignfolderID", "bEzsignfoldersignerassociationReceivecopy", "tEzsignfoldersignerassociationMessage"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> EzsignfoldersignerassociationRequest:
        """Create an instance of EzsignfoldersignerassociationRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> EzsignfoldersignerassociationRequest:
        """Create an instance of EzsignfoldersignerassociationRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return EzsignfoldersignerassociationRequest.parse_obj(obj)

        _obj = EzsignfoldersignerassociationRequest.parse_obj({
            "pki_ezsignfoldersignerassociation_id": obj.get("pkiEzsignfoldersignerassociationID"),
            "fki_user_id": obj.get("fkiUserID"),
            "fki_ezsignsignergroup_id": obj.get("fkiEzsignsignergroupID"),
            "fki_ezsignfolder_id": obj.get("fkiEzsignfolderID"),
            "b_ezsignfoldersignerassociation_receivecopy": obj.get("bEzsignfoldersignerassociationReceivecopy"),
            "t_ezsignfoldersignerassociation_message": obj.get("tEzsignfoldersignerassociationMessage")
        })
        return _obj


