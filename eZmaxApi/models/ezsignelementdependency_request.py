# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.2
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from eZmaxApi.models.field_e_ezsignelementdependency_operator import FieldEEzsignelementdependencyOperator
from eZmaxApi.models.field_e_ezsignelementdependency_validation import FieldEEzsignelementdependencyValidation
from typing import Optional, Set
from typing_extensions import Self

class EzsignelementdependencyRequest(BaseModel):
    """
    An Ezsignelementdependency Object
    """ # noqa: E501
    pki_ezsignelementdependency_id: Optional[Annotated[int, Field(le=16777215, strict=True, ge=0)]] = Field(default=None, description="The unique ID of the Ezsignelementdependency", alias="pkiEzsignelementdependencyID")
    fki_ezsignformfield_id_validation: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The unique ID of the Ezsignformfield", alias="fkiEzsignformfieldIDValidation")
    fki_ezsignformfieldgroup_id_validation: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The unique ID of the Ezsignformfieldgroup", alias="fkiEzsignformfieldgroupIDValidation")
    s_ezsignelementdependency_ezsignformfieldgrouplabel: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=50)]] = Field(default=None, description="The Label for the Ezsignformfieldgroup", alias="sEzsignelementdependencyEzsignformfieldgrouplabel")
    s_ezsignelementdependency_ezsignformfieldlabel: Optional[StrictStr] = Field(default=None, description="The Label for the Ezsignformfield", alias="sEzsignelementdependencyEzsignformfieldlabel")
    e_ezsignelementdependency_validation: FieldEEzsignelementdependencyValidation = Field(alias="eEzsignelementdependencyValidation")
    b_ezsignelementdependency_selected: Optional[StrictBool] = Field(default=None, description="Whether if it's selected or not when using eEzsignelementdependencyValidation = Selected", alias="bEzsignelementdependencySelected")
    e_ezsignelementdependency_operator: Optional[FieldEEzsignelementdependencyOperator] = Field(default=None, alias="eEzsignelementdependencyOperator")
    s_ezsignelementdependency_value: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="The value of the Ezsignelementdependency", alias="sEzsignelementdependencyValue")
    __properties: ClassVar[List[str]] = ["pkiEzsignelementdependencyID", "fkiEzsignformfieldIDValidation", "fkiEzsignformfieldgroupIDValidation", "sEzsignelementdependencyEzsignformfieldgrouplabel", "sEzsignelementdependencyEzsignformfieldlabel", "eEzsignelementdependencyValidation", "bEzsignelementdependencySelected", "eEzsignelementdependencyOperator", "sEzsignelementdependencyValue"]

    @field_validator('s_ezsignelementdependency_value')
    def s_ezsignelementdependency_value_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^.{0,50}$", value):
            raise ValueError(r"must validate the regular expression /^.{0,50}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EzsignelementdependencyRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EzsignelementdependencyRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "pkiEzsignelementdependencyID": obj.get("pkiEzsignelementdependencyID"),
            "fkiEzsignformfieldIDValidation": obj.get("fkiEzsignformfieldIDValidation"),
            "fkiEzsignformfieldgroupIDValidation": obj.get("fkiEzsignformfieldgroupIDValidation"),
            "sEzsignelementdependencyEzsignformfieldgrouplabel": obj.get("sEzsignelementdependencyEzsignformfieldgrouplabel"),
            "sEzsignelementdependencyEzsignformfieldlabel": obj.get("sEzsignelementdependencyEzsignformfieldlabel"),
            "eEzsignelementdependencyValidation": obj.get("eEzsignelementdependencyValidation"),
            "bEzsignelementdependencySelected": obj.get("bEzsignelementdependencySelected"),
            "eEzsignelementdependencyOperator": obj.get("eEzsignelementdependencyOperator"),
            "sEzsignelementdependencyValue": obj.get("sEzsignelementdependencyValue")
        })
        return _obj


