# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.1
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from eZmaxApi.models.common_audit import CommonAudit
from eZmaxApi.models.ezsigntemplate_response_v3 import EzsigntemplateResponseV3
from eZmaxApi.models.ezsigntemplatedocument_response import EzsigntemplatedocumentResponse
from eZmaxApi.models.ezsigntemplatesigner_response_compound import EzsigntemplatesignerResponseCompound
from eZmaxApi.models.field_e_ezsigntemplate_recognition import FieldEEzsigntemplateRecognition
from eZmaxApi.models.field_e_ezsigntemplate_type import FieldEEzsigntemplateType
from typing import Optional, Set
from typing_extensions import Self

class EzsigntemplateResponseCompoundV3(EzsigntemplateResponseV3):
    """
    A Ezsigntemplate Object
    """ # noqa: E501
    obj_ezsigntemplatedocument: Optional[EzsigntemplatedocumentResponse] = Field(default=None, alias="objEzsigntemplatedocument")
    a_obj_ezsigntemplatesigner: List[EzsigntemplatesignerResponseCompound] = Field(alias="a_objEzsigntemplatesigner")
    __properties: ClassVar[List[str]] = ["pkiEzsigntemplateID", "fkiEzsigntemplatedocumentID", "fkiEzsignfoldertypeID", "fkiLanguageID", "fkiEzdoctemplatedocumentID", "sEzdoctemplatedocumentNameX", "sLanguageNameX", "sEzsigntemplateDescription", "sEzsigntemplateExternaldescription", "tEzsigntemplateComment", "eEzsigntemplateRecognition", "sEzsigntemplateFilenameregexp", "bEzsigntemplateAdminonly", "sEzsignfoldertypeNameX", "objAudit", "bEzsigntemplateEditallowed", "eEzsigntemplateType", "objEzsigntemplatedocument", "a_objEzsigntemplatesigner"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EzsigntemplateResponseCompoundV3 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of obj_audit
        if self.obj_audit:
            _dict['objAudit'] = self.obj_audit.to_dict()
        # override the default output from pydantic by calling `to_dict()` of obj_ezsigntemplatedocument
        if self.obj_ezsigntemplatedocument:
            _dict['objEzsigntemplatedocument'] = self.obj_ezsigntemplatedocument.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in a_obj_ezsigntemplatesigner (list)
        _items = []
        if self.a_obj_ezsigntemplatesigner:
            for _item_a_obj_ezsigntemplatesigner in self.a_obj_ezsigntemplatesigner:
                if _item_a_obj_ezsigntemplatesigner:
                    _items.append(_item_a_obj_ezsigntemplatesigner.to_dict())
            _dict['a_objEzsigntemplatesigner'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EzsigntemplateResponseCompoundV3 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "pkiEzsigntemplateID": obj.get("pkiEzsigntemplateID"),
            "fkiEzsigntemplatedocumentID": obj.get("fkiEzsigntemplatedocumentID"),
            "fkiEzsignfoldertypeID": obj.get("fkiEzsignfoldertypeID"),
            "fkiLanguageID": obj.get("fkiLanguageID"),
            "fkiEzdoctemplatedocumentID": obj.get("fkiEzdoctemplatedocumentID"),
            "sEzdoctemplatedocumentNameX": obj.get("sEzdoctemplatedocumentNameX"),
            "sLanguageNameX": obj.get("sLanguageNameX"),
            "sEzsigntemplateDescription": obj.get("sEzsigntemplateDescription"),
            "sEzsigntemplateExternaldescription": obj.get("sEzsigntemplateExternaldescription"),
            "tEzsigntemplateComment": obj.get("tEzsigntemplateComment"),
            "eEzsigntemplateRecognition": obj.get("eEzsigntemplateRecognition") if obj.get("eEzsigntemplateRecognition") is not None else FieldEEzsigntemplateRecognition.NO,
            "sEzsigntemplateFilenameregexp": obj.get("sEzsigntemplateFilenameregexp"),
            "bEzsigntemplateAdminonly": obj.get("bEzsigntemplateAdminonly"),
            "sEzsignfoldertypeNameX": obj.get("sEzsignfoldertypeNameX"),
            "objAudit": CommonAudit.from_dict(obj["objAudit"]) if obj.get("objAudit") is not None else None,
            "bEzsigntemplateEditallowed": obj.get("bEzsigntemplateEditallowed"),
            "eEzsigntemplateType": obj.get("eEzsigntemplateType"),
            "objEzsigntemplatedocument": EzsigntemplatedocumentResponse.from_dict(obj["objEzsigntemplatedocument"]) if obj.get("objEzsigntemplatedocument") is not None else None,
            "a_objEzsigntemplatesigner": [EzsigntemplatesignerResponseCompound.from_dict(_item) for _item in obj["a_objEzsigntemplatesigner"]] if obj.get("a_objEzsigntemplatesigner") is not None else None
        })
        return _obj


