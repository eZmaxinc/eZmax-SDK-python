# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.0
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, conint, constr, validator
from eZmaxApi.models.field_e_systemconfiguration_ezsign import FieldESystemconfigurationEzsign
from eZmaxApi.models.field_e_systemconfiguration_language1 import FieldESystemconfigurationLanguage1
from eZmaxApi.models.field_e_systemconfiguration_language2 import FieldESystemconfigurationLanguage2
from eZmaxApi.models.field_e_systemconfiguration_newexternaluseraction import FieldESystemconfigurationNewexternaluseraction

class SystemconfigurationRequest(BaseModel):
    """
    A Systemconfiguration Object  # noqa: E501
    """
    pki_systemconfiguration_id: Optional[conint(strict=True, le=1, ge=1)] = Field(None, alias="pkiSystemconfigurationID", description="The unique ID of the Systemconfiguration")
    e_systemconfiguration_newexternaluseraction: FieldESystemconfigurationNewexternaluseraction = Field(..., alias="eSystemconfigurationNewexternaluseraction")
    e_systemconfiguration_language1: FieldESystemconfigurationLanguage1 = Field(..., alias="eSystemconfigurationLanguage1")
    e_systemconfiguration_language2: FieldESystemconfigurationLanguage2 = Field(..., alias="eSystemconfigurationLanguage2")
    e_systemconfiguration_ezsign: Optional[FieldESystemconfigurationEzsign] = Field(None, alias="eSystemconfigurationEzsign")
    b_systemconfiguration_ezsignpersonnal: StrictBool = Field(..., alias="bSystemconfigurationEzsignpersonnal", description="Whether if we allow the creation of personal files in eZsign")
    b_systemconfiguration_sspr: StrictBool = Field(..., alias="bSystemconfigurationSspr", description="Whether if we allow SSPR")
    dt_systemconfiguration_readonlyexpirationstart: Optional[constr(strict=True)] = Field(None, alias="dtSystemconfigurationReadonlyexpirationstart", description="The start date where the system will be in read only")
    dt_systemconfiguration_readonlyexpirationend: Optional[constr(strict=True)] = Field(None, alias="dtSystemconfigurationReadonlyexpirationend", description="The end date where the system will be in read only")
    __properties = ["pkiSystemconfigurationID", "eSystemconfigurationNewexternaluseraction", "eSystemconfigurationLanguage1", "eSystemconfigurationLanguage2", "eSystemconfigurationEzsign", "bSystemconfigurationEzsignpersonnal", "bSystemconfigurationSspr", "dtSystemconfigurationReadonlyexpirationstart", "dtSystemconfigurationReadonlyexpirationend"]

    @validator('dt_systemconfiguration_readonlyexpirationstart')
    def dt_systemconfiguration_readonlyexpirationstart_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$", value):
            raise ValueError(r"must validate the regular expression /^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/")
        return value

    @validator('dt_systemconfiguration_readonlyexpirationend')
    def dt_systemconfiguration_readonlyexpirationend_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$", value):
            raise ValueError(r"must validate the regular expression /^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SystemconfigurationRequest:
        """Create an instance of SystemconfigurationRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SystemconfigurationRequest:
        """Create an instance of SystemconfigurationRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SystemconfigurationRequest.parse_obj(obj)

        _obj = SystemconfigurationRequest.parse_obj({
            "pki_systemconfiguration_id": obj.get("pkiSystemconfigurationID"),
            "e_systemconfiguration_newexternaluseraction": obj.get("eSystemconfigurationNewexternaluseraction"),
            "e_systemconfiguration_language1": obj.get("eSystemconfigurationLanguage1"),
            "e_systemconfiguration_language2": obj.get("eSystemconfigurationLanguage2"),
            "e_systemconfiguration_ezsign": obj.get("eSystemconfigurationEzsign"),
            "b_systemconfiguration_ezsignpersonnal": obj.get("bSystemconfigurationEzsignpersonnal"),
            "b_systemconfiguration_sspr": obj.get("bSystemconfigurationSspr"),
            "dt_systemconfiguration_readonlyexpirationstart": obj.get("dtSystemconfigurationReadonlyexpirationstart"),
            "dt_systemconfiguration_readonlyexpirationend": obj.get("dtSystemconfigurationReadonlyexpirationend")
        })
        return _obj


