# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.2
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from eZmaxApi.models.common_audit import CommonAudit
from eZmaxApi.models.field_e_ezmaxinvoicingcontract_paymenttype import FieldEEzmaxinvoicingcontractPaymenttype
from typing import Optional, Set
from typing_extensions import Self

class EzmaxinvoicingcontractResponseCompound(BaseModel):
    """
    A Ezmaxinvoicingcontract Object
    """ # noqa: E501
    pki_ezmaxinvoicingcontract_id: Annotated[int, Field(strict=True, ge=1)] = Field(description="The unique ID of the Ezmaxinvoicingcontract", alias="pkiEzmaxinvoicingcontractID")
    e_ezmaxinvoicingcontract_paymenttype: FieldEEzmaxinvoicingcontractPaymenttype = Field(alias="eEzmaxinvoicingcontractPaymenttype")
    i_ezmaxinvoicingcontract_length: Annotated[int, Field(strict=True, ge=1)] = Field(description="The length in years of the Ezmaxinvoicingcontract", alias="iEzmaxinvoicingcontractLength")
    dt_ezmaxinvoicingcontract_start: StrictStr = Field(description="The start date of the Ezmaxinvoicingcontract", alias="dtEzmaxinvoicingcontractStart")
    dt_ezmaxinvoicingcontract_end: StrictStr = Field(description="The end date of the Ezmaxinvoicingcontract", alias="dtEzmaxinvoicingcontractEnd")
    d_ezmaxinvoicingcontract_license: Annotated[str, Field(strict=True)] = Field(description="The price of the license", alias="dEzmaxinvoicingcontractLicense")
    d_ezmaxinvoicingcontract121qa: Annotated[str, Field(strict=True)] = Field(description="The price for 121QA", alias="dEzmaxinvoicingcontract121qa")
    b_ezmaxinvoicingcontract_ezsignallagents: StrictBool = Field(description="Whether eZsign is for all agents", alias="bEzmaxinvoicingcontractEzsignallagents")
    obj_audit: CommonAudit = Field(alias="objAudit")
    __properties: ClassVar[List[str]] = ["pkiEzmaxinvoicingcontractID", "eEzmaxinvoicingcontractPaymenttype", "iEzmaxinvoicingcontractLength", "dtEzmaxinvoicingcontractStart", "dtEzmaxinvoicingcontractEnd", "dEzmaxinvoicingcontractLicense", "dEzmaxinvoicingcontract121qa", "bEzmaxinvoicingcontractEzsignallagents", "objAudit"]

    @field_validator('d_ezmaxinvoicingcontract_license')
    def d_ezmaxinvoicingcontract_license_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^-{0,1}[\d]{1,9}?\.[\d]{2}$", value):
            raise ValueError(r"must validate the regular expression /^-{0,1}[\d]{1,9}?\.[\d]{2}$/")
        return value

    @field_validator('d_ezmaxinvoicingcontract121qa')
    def d_ezmaxinvoicingcontract121qa_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^-{0,1}[\d]{1,9}?\.[\d]{2}$", value):
            raise ValueError(r"must validate the regular expression /^-{0,1}[\d]{1,9}?\.[\d]{2}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EzmaxinvoicingcontractResponseCompound from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of obj_audit
        if self.obj_audit:
            _dict['objAudit'] = self.obj_audit.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EzmaxinvoicingcontractResponseCompound from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "pkiEzmaxinvoicingcontractID": obj.get("pkiEzmaxinvoicingcontractID"),
            "eEzmaxinvoicingcontractPaymenttype": obj.get("eEzmaxinvoicingcontractPaymenttype"),
            "iEzmaxinvoicingcontractLength": obj.get("iEzmaxinvoicingcontractLength"),
            "dtEzmaxinvoicingcontractStart": obj.get("dtEzmaxinvoicingcontractStart"),
            "dtEzmaxinvoicingcontractEnd": obj.get("dtEzmaxinvoicingcontractEnd"),
            "dEzmaxinvoicingcontractLicense": obj.get("dEzmaxinvoicingcontractLicense"),
            "dEzmaxinvoicingcontract121qa": obj.get("dEzmaxinvoicingcontract121qa"),
            "bEzmaxinvoicingcontractEzsignallagents": obj.get("bEzmaxinvoicingcontractEzsignallagents"),
            "objAudit": CommonAudit.from_dict(obj["objAudit"]) if obj.get("objAudit") is not None else None
        })
        return _obj


