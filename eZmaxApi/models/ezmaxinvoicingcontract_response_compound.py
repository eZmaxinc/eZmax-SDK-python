# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.0
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictBool, StrictStr, conint, constr, validator
from eZmaxApi.models.common_audit import CommonAudit
from eZmaxApi.models.field_e_ezmaxinvoicingcontract_paymenttype import FieldEEzmaxinvoicingcontractPaymenttype

class EzmaxinvoicingcontractResponseCompound(BaseModel):
    """
    A Ezmaxinvoicingcontract Object  # noqa: E501
    """
    pki_ezmaxinvoicingcontract_id: conint(strict=True, ge=1) = Field(..., alias="pkiEzmaxinvoicingcontractID", description="The unique ID of the Ezmaxinvoicingcontract")
    e_ezmaxinvoicingcontract_paymenttype: FieldEEzmaxinvoicingcontractPaymenttype = Field(..., alias="eEzmaxinvoicingcontractPaymenttype")
    i_ezmaxinvoicingcontract_length: conint(strict=True, ge=1) = Field(..., alias="iEzmaxinvoicingcontractLength", description="The length in years of the Ezmaxinvoicingcontract")
    dt_ezmaxinvoicingcontract_start: StrictStr = Field(..., alias="dtEzmaxinvoicingcontractStart", description="The start date of the Ezmaxinvoicingcontract")
    dt_ezmaxinvoicingcontract_end: StrictStr = Field(..., alias="dtEzmaxinvoicingcontractEnd", description="The end date of the Ezmaxinvoicingcontract")
    d_ezmaxinvoicingcontract_license: constr(strict=True) = Field(..., alias="dEzmaxinvoicingcontractLicense", description="The price of the license")
    d_ezmaxinvoicingcontract121qa: constr(strict=True) = Field(..., alias="dEzmaxinvoicingcontract121qa", description="The price for 121QA")
    b_ezmaxinvoicingcontract_ezsignallagents: StrictBool = Field(..., alias="bEzmaxinvoicingcontractEzsignallagents", description="Whether eZsign is for all agents")
    obj_audit: CommonAudit = Field(..., alias="objAudit")
    __properties = ["pkiEzmaxinvoicingcontractID", "eEzmaxinvoicingcontractPaymenttype", "iEzmaxinvoicingcontractLength", "dtEzmaxinvoicingcontractStart", "dtEzmaxinvoicingcontractEnd", "dEzmaxinvoicingcontractLicense", "dEzmaxinvoicingcontract121qa", "bEzmaxinvoicingcontractEzsignallagents", "objAudit"]

    @validator('d_ezmaxinvoicingcontract_license')
    def d_ezmaxinvoicingcontract_license_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^-{0,1}[\d]{1,9}?\.[\d]{2}$", value):
            raise ValueError(r"must validate the regular expression /^-{0,1}[\d]{1,9}?\.[\d]{2}$/")
        return value

    @validator('d_ezmaxinvoicingcontract121qa')
    def d_ezmaxinvoicingcontract121qa_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^-{0,1}[\d]{1,9}?\.[\d]{2}$", value):
            raise ValueError(r"must validate the regular expression /^-{0,1}[\d]{1,9}?\.[\d]{2}$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> EzmaxinvoicingcontractResponseCompound:
        """Create an instance of EzmaxinvoicingcontractResponseCompound from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of obj_audit
        if self.obj_audit:
            _dict['objAudit'] = self.obj_audit.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> EzmaxinvoicingcontractResponseCompound:
        """Create an instance of EzmaxinvoicingcontractResponseCompound from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return EzmaxinvoicingcontractResponseCompound.parse_obj(obj)

        _obj = EzmaxinvoicingcontractResponseCompound.parse_obj({
            "pki_ezmaxinvoicingcontract_id": obj.get("pkiEzmaxinvoicingcontractID"),
            "e_ezmaxinvoicingcontract_paymenttype": obj.get("eEzmaxinvoicingcontractPaymenttype"),
            "i_ezmaxinvoicingcontract_length": obj.get("iEzmaxinvoicingcontractLength"),
            "dt_ezmaxinvoicingcontract_start": obj.get("dtEzmaxinvoicingcontractStart"),
            "dt_ezmaxinvoicingcontract_end": obj.get("dtEzmaxinvoicingcontractEnd"),
            "d_ezmaxinvoicingcontract_license": obj.get("dEzmaxinvoicingcontractLicense"),
            "d_ezmaxinvoicingcontract121qa": obj.get("dEzmaxinvoicingcontract121qa"),
            "b_ezmaxinvoicingcontract_ezsignallagents": obj.get("bEzmaxinvoicingcontractEzsignallagents"),
            "obj_audit": CommonAudit.from_dict(obj.get("objAudit")) if obj.get("objAudit") is not None else None
        })
        return _obj


