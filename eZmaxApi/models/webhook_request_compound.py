# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.0
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from eZmaxApi.models.field_e_webhook_ezsignevent import FieldEWebhookEzsignevent
from eZmaxApi.models.field_e_webhook_managementevent import FieldEWebhookManagementevent
from eZmaxApi.models.field_e_webhook_module import FieldEWebhookModule
from eZmaxApi.models.webhookheader_request_compound import WebhookheaderRequestCompound
from typing import Optional, Set
from typing_extensions import Self

class WebhookRequestCompound(BaseModel):
    """
    A Webhook Object and children
    """ # noqa: E501
    pki_webhook_id: Optional[StrictInt] = Field(default=None, description="The unique ID of the Webhook", alias="pkiWebhookID")
    fki_ezsignfoldertype_id: Optional[Annotated[int, Field(le=65535, strict=True, ge=0)]] = Field(default=None, description="The unique ID of the Ezsignfoldertype.", alias="fkiEzsignfoldertypeID")
    s_webhook_description: StrictStr = Field(description="The description of the Webhook", alias="sWebhookDescription")
    e_webhook_module: FieldEWebhookModule = Field(alias="eWebhookModule")
    e_webhook_ezsignevent: Optional[FieldEWebhookEzsignevent] = Field(default=None, alias="eWebhookEzsignevent")
    e_webhook_managementevent: Optional[FieldEWebhookManagementevent] = Field(default=None, alias="eWebhookManagementevent")
    s_webhook_url: StrictStr = Field(description="The URL of the Webhook callback", alias="sWebhookUrl")
    s_webhook_emailfailed: StrictStr = Field(description="The email that will receive the Webhook in case all attempts fail", alias="sWebhookEmailfailed")
    b_webhook_isactive: StrictBool = Field(description="Whether the Webhook is active or not", alias="bWebhookIsactive")
    b_webhook_issigned: Optional[StrictBool] = Field(default=None, description="Whether the requests will be signed or not", alias="bWebhookIssigned")
    b_webhook_skipsslvalidation: StrictBool = Field(description="Wheter the server's SSL certificate should be validated or not. Not recommended to skip for production use", alias="bWebhookSkipsslvalidation")
    a_obj_webhookheader: Optional[List[WebhookheaderRequestCompound]] = Field(default=None, alias="a_objWebhookheader")
    __properties: ClassVar[List[str]] = ["pkiWebhookID", "fkiEzsignfoldertypeID", "sWebhookDescription", "eWebhookModule", "eWebhookEzsignevent", "eWebhookManagementevent", "sWebhookUrl", "sWebhookEmailfailed", "bWebhookIsactive", "bWebhookIssigned", "bWebhookSkipsslvalidation", "a_objWebhookheader"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WebhookRequestCompound from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in a_obj_webhookheader (list)
        _items = []
        if self.a_obj_webhookheader:
            for _item in self.a_obj_webhookheader:
                if _item:
                    _items.append(_item.to_dict())
            _dict['a_objWebhookheader'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WebhookRequestCompound from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "pkiWebhookID": obj.get("pkiWebhookID"),
            "fkiEzsignfoldertypeID": obj.get("fkiEzsignfoldertypeID"),
            "sWebhookDescription": obj.get("sWebhookDescription"),
            "eWebhookModule": obj.get("eWebhookModule"),
            "eWebhookEzsignevent": obj.get("eWebhookEzsignevent"),
            "eWebhookManagementevent": obj.get("eWebhookManagementevent"),
            "sWebhookUrl": obj.get("sWebhookUrl"),
            "sWebhookEmailfailed": obj.get("sWebhookEmailfailed"),
            "bWebhookIsactive": obj.get("bWebhookIsactive"),
            "bWebhookIssigned": obj.get("bWebhookIssigned"),
            "bWebhookSkipsslvalidation": obj.get("bWebhookSkipsslvalidation"),
            "a_objWebhookheader": [WebhookheaderRequestCompound.from_dict(_item) for _item in obj["a_objWebhookheader"]] if obj.get("a_objWebhookheader") is not None else None
        })
        return _obj


