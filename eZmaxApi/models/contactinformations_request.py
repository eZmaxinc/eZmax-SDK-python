# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.0
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictInt

class ContactinformationsRequest(BaseModel):
    """
    A Contactinformations Object  # noqa: E501
    """
    i_address_default: StrictInt = Field(..., alias="iAddressDefault", description="The index in the a_objAddress array (zero based index) representing the Address object that should become the default one.  You can leave the value to 0 if the array is empty.")
    i_phone_default: StrictInt = Field(..., alias="iPhoneDefault", description="The index in the a_objPhone array (zero based index) representing the Phone object that should become the default one.  You can leave the value to 0 if the array is empty.")
    i_email_default: StrictInt = Field(..., alias="iEmailDefault", description="The index in the a_objEmail array (zero based index) representing the Email object that should become the default one.  You can leave the value to 0 if the array is empty.")
    i_website_default: StrictInt = Field(..., alias="iWebsiteDefault", description="The index in the a_objWebsite array (zero based index) representing the Website object that should become the default one.  You can leave the value to 0 if the array is empty.")
    __properties = ["iAddressDefault", "iPhoneDefault", "iEmailDefault", "iWebsiteDefault"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ContactinformationsRequest:
        """Create an instance of ContactinformationsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ContactinformationsRequest:
        """Create an instance of ContactinformationsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ContactinformationsRequest.parse_obj(obj)

        _obj = ContactinformationsRequest.parse_obj({
            "i_address_default": obj.get("iAddressDefault"),
            "i_phone_default": obj.get("iPhoneDefault"),
            "i_email_default": obj.get("iEmailDefault"),
            "i_website_default": obj.get("iWebsiteDefault")
        })
        return _obj


