# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.0
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from eZmaxApi.models.custom_contact_name_response import CustomContactNameResponse
from typing import Optional, Set
from typing_extensions import Self

class EzmaxinvoicingcommissionResponseCompound(BaseModel):
    """
    A Ezmaxinvoicingcommission Object
    """ # noqa: E501
    pki_ezmaxinvoicingcommission_id: Optional[StrictInt] = Field(default=None, description="The unique ID of the Ezmaxinvoicingcommission", alias="pkiEzmaxinvoicingcommissionID")
    fki_ezmaxinvoicingsummaryglobal_id: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The unique ID of the Ezmaxinvoicingsummaryglobal", alias="fkiEzmaxinvoicingsummaryglobalID")
    fki_ezmaxpartner_id: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(default=None, description="The unique ID of the Ezmaxpartner", alias="fkiEzmaxpartnerID")
    fki_ezmaxrepresentative_id: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(default=None, description="The unique ID of the Ezmaxrepresentative", alias="fkiEzmaxrepresentativeID")
    dt_ezmaxinvoicingcommission_start: StrictStr = Field(description="The start date for the Ezmaxinvoicingcommission", alias="dtEzmaxinvoicingcommissionStart")
    dt_ezmaxinvoicingcommission_end: StrictStr = Field(description="The end date for the Ezmaxinvoicingcommission", alias="dtEzmaxinvoicingcommissionEnd")
    i_ezmaxinvoicingcommission_days: Annotated[int, Field(strict=True, ge=0)] = Field(description="This is the number of days during the month on which the Ezmaxinvoigcommission applies", alias="iEzmaxinvoicingcommissionDays")
    d_ezmaxinvoicingcommission_amount: Annotated[str, Field(strict=True)] = Field(description="The amount of Ezmaxinvoicingcommission", alias="dEzmaxinvoicingcommissionAmount")
    obj_contact_name: Optional[CustomContactNameResponse] = Field(default=None, alias="objContactName")
    __properties: ClassVar[List[str]] = ["pkiEzmaxinvoicingcommissionID", "fkiEzmaxinvoicingsummaryglobalID", "fkiEzmaxpartnerID", "fkiEzmaxrepresentativeID", "dtEzmaxinvoicingcommissionStart", "dtEzmaxinvoicingcommissionEnd", "iEzmaxinvoicingcommissionDays", "dEzmaxinvoicingcommissionAmount", "objContactName"]

    @field_validator('d_ezmaxinvoicingcommission_amount')
    def d_ezmaxinvoicingcommission_amount_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^-{0,1}[\d]{1,9}?\.[\d]{2}$", value):
            raise ValueError(r"must validate the regular expression /^-{0,1}[\d]{1,9}?\.[\d]{2}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EzmaxinvoicingcommissionResponseCompound from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of obj_contact_name
        if self.obj_contact_name:
            _dict['objContactName'] = self.obj_contact_name.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EzmaxinvoicingcommissionResponseCompound from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "pkiEzmaxinvoicingcommissionID": obj.get("pkiEzmaxinvoicingcommissionID"),
            "fkiEzmaxinvoicingsummaryglobalID": obj.get("fkiEzmaxinvoicingsummaryglobalID"),
            "fkiEzmaxpartnerID": obj.get("fkiEzmaxpartnerID"),
            "fkiEzmaxrepresentativeID": obj.get("fkiEzmaxrepresentativeID"),
            "dtEzmaxinvoicingcommissionStart": obj.get("dtEzmaxinvoicingcommissionStart"),
            "dtEzmaxinvoicingcommissionEnd": obj.get("dtEzmaxinvoicingcommissionEnd"),
            "iEzmaxinvoicingcommissionDays": obj.get("iEzmaxinvoicingcommissionDays"),
            "dEzmaxinvoicingcommissionAmount": obj.get("dEzmaxinvoicingcommissionAmount"),
            "objContactName": CustomContactNameResponse.from_dict(obj["objContactName"]) if obj.get("objContactName") is not None else None
        })
        return _obj


