# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.0
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictStr, conint

class AddressRequestCompound(BaseModel):
    """
    An Address Object and children to create a complete structure  # noqa: E501
    """
    fki_addresstype_id: conint(strict=True, ge=0) = Field(..., alias="fkiAddresstypeID", description="The unique ID of the Addresstype.  Valid values:  |Value|Description| |-|-| |1|Office| |2|Home| |3|Real Estate Invoice| |4|Invoicing| |5|Shipping|")
    s_address_civic: StrictStr = Field(..., alias="sAddressCivic", description="The Civic number.")
    s_address_street: StrictStr = Field(..., alias="sAddressStreet", description="The Street Name")
    s_address_suite: StrictStr = Field(..., alias="sAddressSuite", description="The Suite or appartment number")
    s_address_city: StrictStr = Field(..., alias="sAddressCity", description="The City name")
    fki_province_id: conint(strict=True, ge=0) = Field(..., alias="fkiProvinceID", description="The unique ID of the Province.  Here are some common values (Complete list must be retrieved from API):  |Value|Description| |-|-| |1|(Canada) Alberta |2|(Canada) British Columbia| |3|(Canada) Manitoba| |3|(Canada) Manitoba| |4|(Canada) New Brunswick| |5|(Canada) Newfoundland| |6|(Canada) Northwest Territories| |7|(Canada) Nova Scotia| |8|(Canada) Nunavut| |9|(Canada) Ontario| |10|(Canada) Prince Edward Island| |11|(Canada) Quebec| |12|(Canada) Saskatchewan| |13|(Canada) Yukon| |14|(United-States) Alabama| |15|(United-States) Alaska| |16|(United-States) Arizona| |17|(United-States) Arkansas| |18|(United-States) California| |19|(United-States) Colorado| |20|(United-States) Connecticut| |21|(United-States) Delaware| |22|(United-States) District of Columbia| |23|(United-States) Florida| |24|(United-States) Georgia| |25|(United-States) Hawaii| |26|(United-States) Idaho| |27|(United-States) Illinois| |28|(United-States) Indiana| |29|(United-States) Iowa| |30|(United-States) Kansas| |31|(United-States) Kentucky| |32|(United-States) Louisiane| |33|(United-States) Maine| |34|(United-States) Maryland| |35|(United-States) Massachusetts| |36|(United-States) Michigan| |37|(United-States) Minnesota| |38|(United-States) Mississippi| |39|(United-States) Missouri| |40|(United-States) Montana| |41|(United-States) Nebraska| |42|(United-States) Nevada| |43|(United-States) New Hampshire| |44|(United-States) New Jersey| |45|(United-States) New Mexico| |46|(United-States) New York| |47|(United-States) North Carolina| |48|(United-States) North Dakota| |49|(United-States) Ohio| |50|(United-States) Oklahoma| |51|(United-States) Oregon| |52|(United-States) Pennsylvania| |53|(United-States) Rhode Island| |54|(United-States) South Carolina| |55|(United-States) South Dakota| |56|(United-States) Tennessee| |57|(United-States) Texas| |58|(United-States) Utah| |60|(United-States) Vermont| |59|(United-States) Virginia| |61|(United-States) Washington| |62|(United-States) West Virginia| |63|(United-States) Wisconsin| |64|(United-States) Wyoming|")
    fki_country_id: conint(strict=True, ge=0) = Field(..., alias="fkiCountryID", description="The unique ID of the Country.  Here are some common values (Complete list must be retrieved from API):  |Value|Description| |-|-| |1|Canada| |2|United-States|")
    s_address_zip: StrictStr = Field(..., alias="sAddressZip", description="The Postal/Zip Code  The value must be entered without spaces")
    __properties = ["fkiAddresstypeID", "sAddressCivic", "sAddressStreet", "sAddressSuite", "sAddressCity", "fkiProvinceID", "fkiCountryID", "sAddressZip"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AddressRequestCompound:
        """Create an instance of AddressRequestCompound from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AddressRequestCompound:
        """Create an instance of AddressRequestCompound from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AddressRequestCompound.parse_obj(obj)

        _obj = AddressRequestCompound.parse_obj({
            "fki_addresstype_id": obj.get("fkiAddresstypeID"),
            "s_address_civic": obj.get("sAddressCivic"),
            "s_address_street": obj.get("sAddressStreet"),
            "s_address_suite": obj.get("sAddressSuite"),
            "s_address_city": obj.get("sAddressCity"),
            "fki_province_id": obj.get("fkiProvinceID"),
            "fki_country_id": obj.get("fkiCountryID"),
            "s_address_zip": obj.get("sAddressZip")
        })
        return _obj


