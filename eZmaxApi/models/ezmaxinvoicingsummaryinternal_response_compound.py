# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.1
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import ConfigDict, Field
from typing import Any, ClassVar, Dict, List
from eZmaxApi.models.ezmaxinvoicingsummaryinternal_response import EzmaxinvoicingsummaryinternalResponse
from eZmaxApi.models.ezmaxinvoicingsummaryinternaldetail_response_compound import EzmaxinvoicingsummaryinternaldetailResponseCompound
from eZmaxApi.models.multilingual_ezmaxinvoicingsummaryinternal_description import MultilingualEzmaxinvoicingsummaryinternalDescription
from typing import Optional, Set
from typing_extensions import Self

class EzmaxinvoicingsummaryinternalResponseCompound(EzmaxinvoicingsummaryinternalResponse):
    """
    A Ezmaxinvoicingsummaryinternal Object
    """ # noqa: E501
    a_obj_ezmaxinvoicingsummaryinternaldetail: List[EzmaxinvoicingsummaryinternaldetailResponseCompound] = Field(alias="a_objEzmaxinvoicingsummaryinternaldetail")
    __properties: ClassVar[List[str]] = ["pkiEzmaxinvoicingsummaryinternalID", "objEzmaxinvoicingsummaryinternalDescription", "sEzmaxinvoicingsummaryinternalDescriptionX", "fkiEzmaxinvoicingID", "fkiBillingentityinternalID", "sBillingentityinternalDescriptionX", "a_objEzmaxinvoicingsummaryinternaldetail"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EzmaxinvoicingsummaryinternalResponseCompound from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of obj_ezmaxinvoicingsummaryinternal_description
        if self.obj_ezmaxinvoicingsummaryinternal_description:
            _dict['objEzmaxinvoicingsummaryinternalDescription'] = self.obj_ezmaxinvoicingsummaryinternal_description.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in a_obj_ezmaxinvoicingsummaryinternaldetail (list)
        _items = []
        if self.a_obj_ezmaxinvoicingsummaryinternaldetail:
            for _item_a_obj_ezmaxinvoicingsummaryinternaldetail in self.a_obj_ezmaxinvoicingsummaryinternaldetail:
                if _item_a_obj_ezmaxinvoicingsummaryinternaldetail:
                    _items.append(_item_a_obj_ezmaxinvoicingsummaryinternaldetail.to_dict())
            _dict['a_objEzmaxinvoicingsummaryinternaldetail'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EzmaxinvoicingsummaryinternalResponseCompound from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "pkiEzmaxinvoicingsummaryinternalID": obj.get("pkiEzmaxinvoicingsummaryinternalID"),
            "objEzmaxinvoicingsummaryinternalDescription": MultilingualEzmaxinvoicingsummaryinternalDescription.from_dict(obj["objEzmaxinvoicingsummaryinternalDescription"]) if obj.get("objEzmaxinvoicingsummaryinternalDescription") is not None else None,
            "sEzmaxinvoicingsummaryinternalDescriptionX": obj.get("sEzmaxinvoicingsummaryinternalDescriptionX"),
            "fkiEzmaxinvoicingID": obj.get("fkiEzmaxinvoicingID"),
            "fkiBillingentityinternalID": obj.get("fkiBillingentityinternalID"),
            "sBillingentityinternalDescriptionX": obj.get("sBillingentityinternalDescriptionX"),
            "a_objEzmaxinvoicingsummaryinternaldetail": [EzmaxinvoicingsummaryinternaldetailResponseCompound.from_dict(_item) for _item in obj["a_objEzmaxinvoicingsummaryinternaldetail"]] if obj.get("a_objEzmaxinvoicingsummaryinternaldetail") is not None else None
        })
        return _obj


