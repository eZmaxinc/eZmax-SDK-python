# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.0
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictBool, StrictInt, conint, constr, validator
from eZmaxApi.models.common_audit import CommonAudit
from eZmaxApi.models.field_e_paymentterm_type import FieldEPaymenttermType
from eZmaxApi.models.multilingual_paymentterm_description import MultilingualPaymenttermDescription

class PaymenttermResponseCompound(BaseModel):
    """
    A Paymentterm Object  # noqa: E501
    """
    pki_paymentterm_id: StrictInt = Field(..., alias="pkiPaymenttermID", description="The unique ID of the Paymentterm")
    s_paymentterm_code: constr(strict=True) = Field(..., alias="sPaymenttermCode", description="The code of the Paymentterm")
    e_paymentterm_type: FieldEPaymenttermType = Field(..., alias="ePaymenttermType")
    i_paymentterm_day: conint(strict=True, le=255, ge=0) = Field(..., alias="iPaymenttermDay", description="The day of the Paymentterm")
    obj_paymentterm_description: MultilingualPaymenttermDescription = Field(..., alias="objPaymenttermDescription")
    b_paymentterm_isactive: StrictBool = Field(..., alias="bPaymenttermIsactive", description="Whether the Paymentterm is active or not")
    obj_audit: CommonAudit = Field(..., alias="objAudit")
    __properties = ["pkiPaymenttermID", "sPaymenttermCode", "ePaymenttermType", "iPaymenttermDay", "objPaymenttermDescription", "bPaymenttermIsactive", "objAudit"]

    @validator('s_paymentterm_code')
    def s_paymentterm_code_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[A-Z0-9]{1,4}$", value):
            raise ValueError(r"must validate the regular expression /^[A-Z0-9]{1,4}$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PaymenttermResponseCompound:
        """Create an instance of PaymenttermResponseCompound from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of obj_paymentterm_description
        if self.obj_paymentterm_description:
            _dict['objPaymenttermDescription'] = self.obj_paymentterm_description.to_dict()
        # override the default output from pydantic by calling `to_dict()` of obj_audit
        if self.obj_audit:
            _dict['objAudit'] = self.obj_audit.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PaymenttermResponseCompound:
        """Create an instance of PaymenttermResponseCompound from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PaymenttermResponseCompound.parse_obj(obj)

        _obj = PaymenttermResponseCompound.parse_obj({
            "pki_paymentterm_id": obj.get("pkiPaymenttermID"),
            "s_paymentterm_code": obj.get("sPaymenttermCode"),
            "e_paymentterm_type": obj.get("ePaymenttermType"),
            "i_paymentterm_day": obj.get("iPaymenttermDay"),
            "obj_paymentterm_description": MultilingualPaymenttermDescription.from_dict(obj.get("objPaymenttermDescription")) if obj.get("objPaymenttermDescription") is not None else None,
            "b_paymentterm_isactive": obj.get("bPaymenttermIsactive"),
            "obj_audit": CommonAudit.from_dict(obj.get("objAudit")) if obj.get("objAudit") is not None else None
        })
        return _obj


