# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.0
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from eZmaxApi.models.custom_notificationtestgetnotificationtests_response import CustomNotificationtestgetnotificationtestsResponse
from eZmaxApi.models.multilingual_notificationsubsection_name import MultilingualNotificationsubsectionName
from typing import Optional, Set
from typing_extensions import Self

class CustomNotificationsubsectiongetnotificationtestsResponse(BaseModel):
    """
    A Notificationsubsection Object in the context of getNotificationtests
    """ # noqa: E501
    pki_notificationsubsection_id: Annotated[int, Field(strict=True, ge=0)] = Field(description="The unique ID of the Notificationsubsection", alias="pkiNotificationsubsectionID")
    fki_notificationsection_id: Annotated[int, Field(strict=True, ge=0)] = Field(description="The unique ID of the Notificationsection", alias="fkiNotificationsectionID")
    obj_notificationsubsection_name: Optional[MultilingualNotificationsubsectionName] = Field(default=None, alias="objNotificationsubsectionName")
    s_notificationsection_name_x: Optional[StrictStr] = Field(default=None, description="The name of the Notificationsection in the language of the requester", alias="sNotificationsectionNameX")
    s_notificationsubsection_name_x: StrictStr = Field(description="The name of the Notificationsubsection in the language of the requester", alias="sNotificationsubsectionNameX")
    a_obj_notificationtest: List[CustomNotificationtestgetnotificationtestsResponse] = Field(alias="a_objNotificationtest")
    __properties: ClassVar[List[str]] = ["pkiNotificationsubsectionID", "fkiNotificationsectionID", "objNotificationsubsectionName", "sNotificationsectionNameX", "sNotificationsubsectionNameX", "a_objNotificationtest"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CustomNotificationsubsectiongetnotificationtestsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of obj_notificationsubsection_name
        if self.obj_notificationsubsection_name:
            _dict['objNotificationsubsectionName'] = self.obj_notificationsubsection_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in a_obj_notificationtest (list)
        _items = []
        if self.a_obj_notificationtest:
            for _item in self.a_obj_notificationtest:
                if _item:
                    _items.append(_item.to_dict())
            _dict['a_objNotificationtest'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CustomNotificationsubsectiongetnotificationtestsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "pkiNotificationsubsectionID": obj.get("pkiNotificationsubsectionID"),
            "fkiNotificationsectionID": obj.get("fkiNotificationsectionID"),
            "objNotificationsubsectionName": MultilingualNotificationsubsectionName.from_dict(obj["objNotificationsubsectionName"]) if obj.get("objNotificationsubsectionName") is not None else None,
            "sNotificationsectionNameX": obj.get("sNotificationsectionNameX"),
            "sNotificationsubsectionNameX": obj.get("sNotificationsubsectionNameX"),
            "a_objNotificationtest": [CustomNotificationtestgetnotificationtestsResponse.from_dict(_item) for _item in obj["a_objNotificationtest"]] if obj.get("a_objNotificationtest") is not None else None
        })
        return _obj


