# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.1
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from eZmaxApi.models.common_audit import CommonAudit
from eZmaxApi.models.email_response_compound import EmailResponseCompound
from eZmaxApi.models.field_e_user_ezsignaccess import FieldEUserEzsignaccess
from eZmaxApi.models.field_e_user_logintype import FieldEUserLogintype
from eZmaxApi.models.field_e_user_origin import FieldEUserOrigin
from eZmaxApi.models.field_e_user_type import FieldEUserType
from eZmaxApi.models.phone_response_compound import PhoneResponseCompound
from typing import Optional, Set
from typing_extensions import Self

class UserResponse(BaseModel):
    """
    A User Object
    """ # noqa: E501
    pki_user_id: Annotated[int, Field(strict=True, ge=0)] = Field(description="The unique ID of the User", alias="pkiUserID")
    fki_agent_id: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The unique ID of the Agent.", alias="fkiAgentID")
    fki_broker_id: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The unique ID of the Broker.", alias="fkiBrokerID")
    fki_assistant_id: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The unique ID of the Assistant.", alias="fkiAssistantID")
    fki_employee_id: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The unique ID of the Employee.", alias="fkiEmployeeID")
    fki_company_id_default: Annotated[int, Field(le=255, strict=True, ge=1)] = Field(description="The unique ID of the Company", alias="fkiCompanyIDDefault")
    s_company_name_x: StrictStr = Field(description="The Name of the Company in the language of the requester", alias="sCompanyNameX")
    fki_department_id_default: Annotated[int, Field(strict=True, ge=0)] = Field(description="The unique ID of the Department", alias="fkiDepartmentIDDefault")
    s_department_name_x: StrictStr = Field(description="The Name of the Department in the language of the requester", alias="sDepartmentNameX")
    fki_timezone_id: Annotated[int, Field(strict=True, ge=0)] = Field(description="The unique ID of the Timezone", alias="fkiTimezoneID")
    s_timezone_name: StrictStr = Field(description="The description of the Timezone", alias="sTimezoneName")
    fki_language_id: Annotated[int, Field(le=2, strict=True, ge=1)] = Field(description="The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|", alias="fkiLanguageID")
    s_language_name_x: StrictStr = Field(description="The Name of the Language in the language of the requester", alias="sLanguageNameX")
    obj_email: EmailResponseCompound = Field(alias="objEmail")
    fki_billingentityinternal_id: Annotated[int, Field(strict=True, ge=0)] = Field(description="The unique ID of the Billingentityinternal.", alias="fkiBillingentityinternalID")
    s_billingentityinternal_description_x: StrictStr = Field(description="The description of the Billingentityinternal in the language of the requester", alias="sBillingentityinternalDescriptionX")
    obj_phone_home: Optional[PhoneResponseCompound] = Field(default=None, alias="objPhoneHome")
    obj_phone_sms: Optional[PhoneResponseCompound] = Field(default=None, alias="objPhoneSMS")
    fki_secretquestion_id: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The unique ID of the Secretquestion.  Valid values:  |Value|Description| |-|-| |1|The name of the hospital in which you were born| |2|The name of your grade school| |3|The last name of your favorite teacher| |4|Your favorite sports team| |5|Your favorite TV show| |6|Your favorite movie| |7|The name of the street on which you grew up| |8|The name of your first employer| |9|Your first car| |10|Your favorite food| |11|The name of your first pet| |12|Favorite musician/band| |13|What instrument you play| |14|Your father's middle name| |15|Your mother's maiden name| |16|Name of your eldest child| |17|Your spouse's middle name| |18|Favorite restaurant| |19|Childhood nickname| |20|Favorite vacation destination| |21|Your boat's name| |22|Date of Birth (YYYY-MM-DD)| |22|Secret Code| |22|Your reference code|", alias="fkiSecretquestionID")
    fki_module_id_form: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The unique ID of the Module", alias="fkiModuleIDForm")
    s_module_name_x: Optional[StrictStr] = Field(default=None, description="The Name of the Module in the language of the requester", alias="sModuleNameX")
    e_user_origin: FieldEUserOrigin = Field(alias="eUserOrigin")
    e_user_type: FieldEUserType = Field(alias="eUserType")
    e_user_logintype: FieldEUserLogintype = Field(alias="eUserLogintype")
    s_user_firstname: StrictStr = Field(description="The first name of the user", alias="sUserFirstname")
    s_user_lastname: StrictStr = Field(description="The last name of the user", alias="sUserLastname")
    s_user_loginname: Annotated[str, Field(strict=True)] = Field(description="The login name of the User.", alias="sUserLoginname")
    s_user_jobtitle: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="The job title of the user", alias="sUserJobtitle")
    e_user_ezsignaccess: FieldEUserEzsignaccess = Field(alias="eUserEzsignaccess")
    dt_user_lastlogondate: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="The last logon date of the User", alias="dtUserLastlogondate")
    dt_user_passwordchanged: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="The date at which the User's password was last changed", alias="dtUserPasswordchanged")
    dt_user_ezsignprepaidexpiration: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="The eZsign prepaid expiration date", alias="dtUserEzsignprepaidexpiration")
    b_user_isactive: StrictBool = Field(description="Whether the User is active or not", alias="bUserIsactive")
    b_user_validatebyadministration: Optional[StrictBool] = Field(default=None, description="Whether if the transactions in which the User is implicated must be validated by administrative personnel or not", alias="bUserValidatebyadministration")
    b_user_validatebydirector: Optional[StrictBool] = Field(default=None, description="Whether if the transactions in which the User is implicated must be validated by a director or not", alias="bUserValidatebydirector")
    b_user_attachmentautoverified: Optional[StrictBool] = Field(default=None, description="Whether if Attachments uploaded by the User must be validated or not", alias="bUserAttachmentautoverified")
    b_user_changepassword: StrictBool = Field(description="Whether if the User is forced to change its password", alias="bUserChangepassword")
    obj_audit: CommonAudit = Field(alias="objAudit")
    __properties: ClassVar[List[str]] = ["pkiUserID", "fkiAgentID", "fkiBrokerID", "fkiAssistantID", "fkiEmployeeID", "fkiCompanyIDDefault", "sCompanyNameX", "fkiDepartmentIDDefault", "sDepartmentNameX", "fkiTimezoneID", "sTimezoneName", "fkiLanguageID", "sLanguageNameX", "objEmail", "fkiBillingentityinternalID", "sBillingentityinternalDescriptionX", "objPhoneHome", "objPhoneSMS", "fkiSecretquestionID", "fkiModuleIDForm", "sModuleNameX", "eUserOrigin", "eUserType", "eUserLogintype", "sUserFirstname", "sUserLastname", "sUserLoginname", "sUserJobtitle", "eUserEzsignaccess", "dtUserLastlogondate", "dtUserPasswordchanged", "dtUserEzsignprepaidexpiration", "bUserIsactive", "bUserValidatebyadministration", "bUserValidatebydirector", "bUserAttachmentautoverified", "bUserChangepassword", "objAudit"]

    @field_validator('s_user_loginname')
    def s_user_loginname_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^(?:([\w.%+\-!#$%&\'*+\/=?^`{|}~]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,20})|([a-zA-Z0-9]){1,32})$", value):
            raise ValueError(r"must validate the regular expression /^(?:([\w.%+\-!#$%&'*+\/=?^`{|}~]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,20})|([a-zA-Z0-9]){1,32})$/")
        return value

    @field_validator('s_user_jobtitle')
    def s_user_jobtitle_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^.{0,50}$", value):
            raise ValueError(r"must validate the regular expression /^.{0,50}$/")
        return value

    @field_validator('dt_user_lastlogondate')
    def dt_user_lastlogondate_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) ([01]?[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$", value):
            raise ValueError(r"must validate the regular expression /^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) ([01]?[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$/")
        return value

    @field_validator('dt_user_passwordchanged')
    def dt_user_passwordchanged_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) ([01]?[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$", value):
            raise ValueError(r"must validate the regular expression /^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) ([01]?[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$/")
        return value

    @field_validator('dt_user_ezsignprepaidexpiration')
    def dt_user_ezsignprepaidexpiration_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$", value):
            raise ValueError(r"must validate the regular expression /^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of obj_email
        if self.obj_email:
            _dict['objEmail'] = self.obj_email.to_dict()
        # override the default output from pydantic by calling `to_dict()` of obj_phone_home
        if self.obj_phone_home:
            _dict['objPhoneHome'] = self.obj_phone_home.to_dict()
        # override the default output from pydantic by calling `to_dict()` of obj_phone_sms
        if self.obj_phone_sms:
            _dict['objPhoneSMS'] = self.obj_phone_sms.to_dict()
        # override the default output from pydantic by calling `to_dict()` of obj_audit
        if self.obj_audit:
            _dict['objAudit'] = self.obj_audit.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "pkiUserID": obj.get("pkiUserID"),
            "fkiAgentID": obj.get("fkiAgentID"),
            "fkiBrokerID": obj.get("fkiBrokerID"),
            "fkiAssistantID": obj.get("fkiAssistantID"),
            "fkiEmployeeID": obj.get("fkiEmployeeID"),
            "fkiCompanyIDDefault": obj.get("fkiCompanyIDDefault"),
            "sCompanyNameX": obj.get("sCompanyNameX"),
            "fkiDepartmentIDDefault": obj.get("fkiDepartmentIDDefault"),
            "sDepartmentNameX": obj.get("sDepartmentNameX"),
            "fkiTimezoneID": obj.get("fkiTimezoneID"),
            "sTimezoneName": obj.get("sTimezoneName"),
            "fkiLanguageID": obj.get("fkiLanguageID"),
            "sLanguageNameX": obj.get("sLanguageNameX"),
            "objEmail": EmailResponseCompound.from_dict(obj["objEmail"]) if obj.get("objEmail") is not None else None,
            "fkiBillingentityinternalID": obj.get("fkiBillingentityinternalID"),
            "sBillingentityinternalDescriptionX": obj.get("sBillingentityinternalDescriptionX"),
            "objPhoneHome": PhoneResponseCompound.from_dict(obj["objPhoneHome"]) if obj.get("objPhoneHome") is not None else None,
            "objPhoneSMS": PhoneResponseCompound.from_dict(obj["objPhoneSMS"]) if obj.get("objPhoneSMS") is not None else None,
            "fkiSecretquestionID": obj.get("fkiSecretquestionID"),
            "fkiModuleIDForm": obj.get("fkiModuleIDForm"),
            "sModuleNameX": obj.get("sModuleNameX"),
            "eUserOrigin": obj.get("eUserOrigin"),
            "eUserType": obj.get("eUserType"),
            "eUserLogintype": obj.get("eUserLogintype"),
            "sUserFirstname": obj.get("sUserFirstname"),
            "sUserLastname": obj.get("sUserLastname"),
            "sUserLoginname": obj.get("sUserLoginname"),
            "sUserJobtitle": obj.get("sUserJobtitle"),
            "eUserEzsignaccess": obj.get("eUserEzsignaccess"),
            "dtUserLastlogondate": obj.get("dtUserLastlogondate"),
            "dtUserPasswordchanged": obj.get("dtUserPasswordchanged"),
            "dtUserEzsignprepaidexpiration": obj.get("dtUserEzsignprepaidexpiration"),
            "bUserIsactive": obj.get("bUserIsactive"),
            "bUserValidatebyadministration": obj.get("bUserValidatebyadministration"),
            "bUserValidatebydirector": obj.get("bUserValidatebydirector"),
            "bUserAttachmentautoverified": obj.get("bUserAttachmentautoverified"),
            "bUserChangepassword": obj.get("bUserChangepassword"),
            "objAudit": CommonAudit.from_dict(obj["objAudit"]) if obj.get("objAudit") is not None else None
        })
        return _obj


