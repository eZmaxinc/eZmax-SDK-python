# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.0
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conint

class EzsigntemplatepackageRequest(BaseModel):
    """
    A Ezsigntemplatepackage Object  # noqa: E501
    """
    pki_ezsigntemplatepackage_id: Optional[conint(strict=True, ge=0)] = Field(None, alias="pkiEzsigntemplatepackageID", description="The unique ID of the Ezsigntemplatepackage")
    fki_ezsignfoldertype_id: conint(strict=True, ge=0) = Field(..., alias="fkiEzsignfoldertypeID", description="The unique ID of the Ezsignfoldertype.")
    fki_language_id: conint(strict=True, le=2, ge=1) = Field(..., alias="fkiLanguageID", description="The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|")
    s_ezsigntemplatepackage_description: StrictStr = Field(..., alias="sEzsigntemplatepackageDescription", description="The description of the Ezsigntemplatepackage")
    b_ezsigntemplatepackage_adminonly: StrictBool = Field(..., alias="bEzsigntemplatepackageAdminonly", description="Whether the Ezsigntemplatepackage can be accessed by admin users only (eUserType=Normal)")
    b_ezsigntemplatepackage_isactive: StrictBool = Field(..., alias="bEzsigntemplatepackageIsactive", description="Whether the Ezsigntemplatepackage is active or not")
    __properties = ["pkiEzsigntemplatepackageID", "fkiEzsignfoldertypeID", "fkiLanguageID", "sEzsigntemplatepackageDescription", "bEzsigntemplatepackageAdminonly", "bEzsigntemplatepackageIsactive"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> EzsigntemplatepackageRequest:
        """Create an instance of EzsigntemplatepackageRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> EzsigntemplatepackageRequest:
        """Create an instance of EzsigntemplatepackageRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return EzsigntemplatepackageRequest.parse_obj(obj)

        _obj = EzsigntemplatepackageRequest.parse_obj({
            "pki_ezsigntemplatepackage_id": obj.get("pkiEzsigntemplatepackageID"),
            "fki_ezsignfoldertype_id": obj.get("fkiEzsignfoldertypeID"),
            "fki_language_id": obj.get("fkiLanguageID"),
            "s_ezsigntemplatepackage_description": obj.get("sEzsigntemplatepackageDescription"),
            "b_ezsigntemplatepackage_adminonly": obj.get("bEzsigntemplatepackageAdminonly"),
            "b_ezsigntemplatepackage_isactive": obj.get("bEzsigntemplatepackageIsactive")
        })
        return _obj


