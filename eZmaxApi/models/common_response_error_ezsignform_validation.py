# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.0
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import BaseModel, Field, conlist, constr, validator
from eZmaxApi.models.custom_ezsignformfielderror_response import CustomEzsignformfielderrorResponse
from eZmaxApi.models.field_e_error_code import FieldEErrorCode

class CommonResponseErrorEzsignformValidation(BaseModel):
    """
    Generic Error Message  # noqa: E501
    """
    s_error_message: constr(strict=True) = Field(..., alias="sErrorMessage", description="The message giving details about the error")
    e_error_code: FieldEErrorCode = Field(..., alias="eErrorCode")
    a_obj_ezsignformfielderror: conlist(CustomEzsignformfielderrorResponse) = Field(..., alias="a_objEzsignformfielderror")
    __properties = ["sErrorMessage", "eErrorCode", "a_objEzsignformfielderror"]

    @validator('s_error_message')
    def s_error_message_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^.{0,500}$", value):
            raise ValueError(r"must validate the regular expression /^.{0,500}$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CommonResponseErrorEzsignformValidation:
        """Create an instance of CommonResponseErrorEzsignformValidation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in a_obj_ezsignformfielderror (list)
        _items = []
        if self.a_obj_ezsignformfielderror:
            for _item in self.a_obj_ezsignformfielderror:
                if _item:
                    _items.append(_item.to_dict())
            _dict['a_objEzsignformfielderror'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CommonResponseErrorEzsignformValidation:
        """Create an instance of CommonResponseErrorEzsignformValidation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CommonResponseErrorEzsignformValidation.parse_obj(obj)

        _obj = CommonResponseErrorEzsignformValidation.parse_obj({
            "s_error_message": obj.get("sErrorMessage"),
            "e_error_code": obj.get("eErrorCode"),
            "a_obj_ezsignformfielderror": [CustomEzsignformfielderrorResponse.from_dict(_item) for _item in obj.get("a_objEzsignformfielderror")] if obj.get("a_objEzsignformfielderror") is not None else None
        })
        return _obj


