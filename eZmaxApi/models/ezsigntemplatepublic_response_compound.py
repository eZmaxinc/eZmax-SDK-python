# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.1
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import ConfigDict, Field
from typing import Any, ClassVar, Dict, List
from eZmaxApi.models.common_audit import CommonAudit
from eZmaxApi.models.custom_ezsignfolderezsigntemplatepublic_response import CustomEzsignfolderezsigntemplatepublicResponse
from eZmaxApi.models.ezsigntemplatepublic_response import EzsigntemplatepublicResponse
from eZmaxApi.models.field_e_ezsigntemplatepublic_limittype import FieldEEzsigntemplatepublicLimittype
from typing import Optional, Set
from typing_extensions import Self

class EzsigntemplatepublicResponseCompound(EzsigntemplatepublicResponse):
    """
    A Ezsigntemplatepublic Object
    """ # noqa: E501
    a_obj_ezsignfolderezsigntemplatepublic: List[CustomEzsignfolderezsigntemplatepublicResponse] = Field(alias="a_objEzsignfolderezsigntemplatepublic")
    __properties: ClassVar[List[str]] = ["pkiEzsigntemplatepublicID", "fkiEzsignfoldertypeID", "sEzsignfoldertypeNameX", "fkiUserlogintypeID", "sUserlogintypeDescriptionX", "fkiEzsigntemplateID", "fkiEzsigntemplatepackageID", "sEzsigntemplatepublicDescription", "sEzsigntemplatepublicReferenceid", "bEzsigntemplatepublicIsactive", "tEzsigntemplatepublicNote", "eEzsigntemplatepublicLimittype", "iEzsigntemplatepublicLimit", "iEzsigntemplatepublicLimitexceeded", "dtEzsigntemplatepublicLimitexceededsince", "sEzsigntemplatepublicUrl", "sEzsigntemplatepublicEzsigntemplatedescription", "objAudit", "a_objEzsignfolderezsigntemplatepublic"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EzsigntemplatepublicResponseCompound from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of obj_audit
        if self.obj_audit:
            _dict['objAudit'] = self.obj_audit.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in a_obj_ezsignfolderezsigntemplatepublic (list)
        _items = []
        if self.a_obj_ezsignfolderezsigntemplatepublic:
            for _item_a_obj_ezsignfolderezsigntemplatepublic in self.a_obj_ezsignfolderezsigntemplatepublic:
                if _item_a_obj_ezsignfolderezsigntemplatepublic:
                    _items.append(_item_a_obj_ezsignfolderezsigntemplatepublic.to_dict())
            _dict['a_objEzsignfolderezsigntemplatepublic'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EzsigntemplatepublicResponseCompound from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "pkiEzsigntemplatepublicID": obj.get("pkiEzsigntemplatepublicID"),
            "fkiEzsignfoldertypeID": obj.get("fkiEzsignfoldertypeID"),
            "sEzsignfoldertypeNameX": obj.get("sEzsignfoldertypeNameX"),
            "fkiUserlogintypeID": obj.get("fkiUserlogintypeID"),
            "sUserlogintypeDescriptionX": obj.get("sUserlogintypeDescriptionX"),
            "fkiEzsigntemplateID": obj.get("fkiEzsigntemplateID"),
            "fkiEzsigntemplatepackageID": obj.get("fkiEzsigntemplatepackageID"),
            "sEzsigntemplatepublicDescription": obj.get("sEzsigntemplatepublicDescription"),
            "sEzsigntemplatepublicReferenceid": obj.get("sEzsigntemplatepublicReferenceid"),
            "bEzsigntemplatepublicIsactive": obj.get("bEzsigntemplatepublicIsactive"),
            "tEzsigntemplatepublicNote": obj.get("tEzsigntemplatepublicNote"),
            "eEzsigntemplatepublicLimittype": obj.get("eEzsigntemplatepublicLimittype"),
            "iEzsigntemplatepublicLimit": obj.get("iEzsigntemplatepublicLimit"),
            "iEzsigntemplatepublicLimitexceeded": obj.get("iEzsigntemplatepublicLimitexceeded"),
            "dtEzsigntemplatepublicLimitexceededsince": obj.get("dtEzsigntemplatepublicLimitexceededsince"),
            "sEzsigntemplatepublicUrl": obj.get("sEzsigntemplatepublicUrl"),
            "sEzsigntemplatepublicEzsigntemplatedescription": obj.get("sEzsigntemplatepublicEzsigntemplatedescription"),
            "objAudit": CommonAudit.from_dict(obj["objAudit"]) if obj.get("objAudit") is not None else None,
            "a_objEzsignfolderezsigntemplatepublic": [CustomEzsignfolderezsigntemplatepublicResponse.from_dict(_item) for _item in obj["a_objEzsignfolderezsigntemplatepublic"]] if obj.get("a_objEzsignfolderezsigntemplatepublic") is not None else None
        })
        return _obj


