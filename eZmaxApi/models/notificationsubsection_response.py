# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.0
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, conint
from eZmaxApi.models.multilingual_notificationsubsection_name import MultilingualNotificationsubsectionName

class NotificationsubsectionResponse(BaseModel):
    """
    A Notificationsubsection Object  # noqa: E501
    """
    pki_notificationsubsection_id: conint(strict=True, ge=0) = Field(..., alias="pkiNotificationsubsectionID", description="The unique ID of the Notificationsubsection")
    fki_notificationsection_id: conint(strict=True, ge=0) = Field(..., alias="fkiNotificationsectionID", description="The unique ID of the Notificationsection")
    obj_notificationsubsection_name: Optional[MultilingualNotificationsubsectionName] = Field(None, alias="objNotificationsubsectionName")
    s_notificationsection_name_x: Optional[StrictStr] = Field(None, alias="sNotificationsectionNameX", description="The name of the Notificationsection in the language of the requester")
    s_notificationsubsection_name_x: StrictStr = Field(..., alias="sNotificationsubsectionNameX", description="The name of the Notificationsubsection in the language of the requester")
    __properties = ["pkiNotificationsubsectionID", "fkiNotificationsectionID", "objNotificationsubsectionName", "sNotificationsectionNameX", "sNotificationsubsectionNameX"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> NotificationsubsectionResponse:
        """Create an instance of NotificationsubsectionResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of obj_notificationsubsection_name
        if self.obj_notificationsubsection_name:
            _dict['objNotificationsubsectionName'] = self.obj_notificationsubsection_name.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> NotificationsubsectionResponse:
        """Create an instance of NotificationsubsectionResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return NotificationsubsectionResponse.parse_obj(obj)

        _obj = NotificationsubsectionResponse.parse_obj({
            "pki_notificationsubsection_id": obj.get("pkiNotificationsubsectionID"),
            "fki_notificationsection_id": obj.get("fkiNotificationsectionID"),
            "obj_notificationsubsection_name": MultilingualNotificationsubsectionName.from_dict(obj.get("objNotificationsubsectionName")) if obj.get("objNotificationsubsectionName") is not None else None,
            "s_notificationsection_name_x": obj.get("sNotificationsectionNameX"),
            "s_notificationsubsection_name_x": obj.get("sNotificationsubsectionNameX")
        })
        return _obj


