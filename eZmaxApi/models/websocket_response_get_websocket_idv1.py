# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.0
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictStr, validator
from eZmaxApi.models.websocket_response_get_websocket_idv1_m_payload import WebsocketResponseGetWebsocketIDV1MPayload

class WebsocketResponseGetWebsocketIDV1(BaseModel):
    """
    Response for Websocket GetWebsocketID V1  # noqa: E501
    """
    e_websocket_messagetype: StrictStr = Field(..., alias="eWebsocketMessagetype", description="The Type of message")
    m_payload: WebsocketResponseGetWebsocketIDV1MPayload = Field(..., alias="mPayload")
    __properties = ["eWebsocketMessagetype", "mPayload"]

    @validator('e_websocket_messagetype')
    def e_websocket_messagetype_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('Response-GetWebsocketID-V1'):
            raise ValueError("must be one of enum values ('Response-GetWebsocketID-V1')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> WebsocketResponseGetWebsocketIDV1:
        """Create an instance of WebsocketResponseGetWebsocketIDV1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of m_payload
        if self.m_payload:
            _dict['mPayload'] = self.m_payload.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> WebsocketResponseGetWebsocketIDV1:
        """Create an instance of WebsocketResponseGetWebsocketIDV1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return WebsocketResponseGetWebsocketIDV1.parse_obj(obj)

        _obj = WebsocketResponseGetWebsocketIDV1.parse_obj({
            "e_websocket_messagetype": obj.get("eWebsocketMessagetype"),
            "m_payload": WebsocketResponseGetWebsocketIDV1MPayload.from_dict(obj.get("mPayload")) if obj.get("mPayload") is not None else None
        })
        return _obj


