# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.0
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conint, constr, validator
from eZmaxApi.models.common_audit import CommonAudit
from eZmaxApi.models.field_e_ezmaxinvoicing_paymenttype import FieldEEzmaxinvoicingPaymenttype

class EzmaxinvoicingResponse(BaseModel):
    """
    A Ezmaxinvoicing Object  # noqa: E501
    """
    pki_ezmaxinvoicing_id: Optional[conint(strict=True, ge=0)] = Field(None, alias="pkiEzmaxinvoicingID", description="The unique ID of the Ezmaxinvoicing")
    fki_ezmaxinvoicingcontract_id: conint(strict=True, ge=1) = Field(..., alias="fkiEzmaxinvoicingcontractID", description="The unique ID of the Ezmaxinvoicingcontract")
    fki_ezmaxpricing_id: conint(strict=True, ge=1) = Field(..., alias="fkiEzmaxpricingID", description="The unique ID of the Ezmaxpricing")
    fki_systemconfigurationtype_id: conint(strict=True, ge=1) = Field(..., alias="fkiSystemconfigurationtypeID", description="The unique ID of the Systemconfigurationtype")
    s_systemconfigurationtype_description_x: StrictStr = Field(..., alias="sSystemconfigurationtypeDescriptionX", description="The description of the Systemconfigurationtype in the language of the requester")
    yyyymm_ezmaxinvoicing: constr(strict=True, max_length=7) = Field(..., alias="yyyymmEzmaxinvoicing", description="The YYYYMM period of the Ezmaxinvoicing")
    i_ezmaxinvoicing_days: conint(strict=True, ge=1) = Field(..., alias="iEzmaxinvoicingDays", description="The number of days invoiced")
    e_ezmaxinvoicing_paymenttype: FieldEEzmaxinvoicingPaymenttype = Field(..., alias="eEzmaxinvoicingPaymenttype")
    d_ezmaxinvoicing_rebatepaymenttype: constr(strict=True) = Field(..., alias="dEzmaxinvoicingRebatepaymenttype", description="The percentage of rebate depending of the payment type")
    i_ezmaxinvoicing_contractlength: conint(strict=True, ge=1) = Field(..., alias="iEzmaxinvoicingContractlength", description="The length of the contract in years")
    d_ezmaxinvoicing_rebatecontractlength: constr(strict=True) = Field(..., alias="dEzmaxinvoicingRebatecontractlength", description="The percentage of rebate depending of the contract length")
    b_ezmaxinvoicing_rebate_ezsignallagents: StrictBool = Field(..., alias="bEzmaxinvoicingRebateEzsignallagents", description="Whether the rebate for eZsign is for all agents")
    obj_audit: Optional[CommonAudit] = Field(None, alias="objAudit")
    __properties = ["pkiEzmaxinvoicingID", "fkiEzmaxinvoicingcontractID", "fkiEzmaxpricingID", "fkiSystemconfigurationtypeID", "sSystemconfigurationtypeDescriptionX", "yyyymmEzmaxinvoicing", "iEzmaxinvoicingDays", "eEzmaxinvoicingPaymenttype", "dEzmaxinvoicingRebatepaymenttype", "iEzmaxinvoicingContractlength", "dEzmaxinvoicingRebatecontractlength", "bEzmaxinvoicingRebateEzsignallagents", "objAudit"]

    @validator('d_ezmaxinvoicing_rebatepaymenttype')
    def d_ezmaxinvoicing_rebatepaymenttype_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^-{0,1}[\d]{1,3}?\.[\d]{2}$", value):
            raise ValueError(r"must validate the regular expression /^-{0,1}[\d]{1,3}?\.[\d]{2}$/")
        return value

    @validator('d_ezmaxinvoicing_rebatecontractlength')
    def d_ezmaxinvoicing_rebatecontractlength_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^-{0,1}[\d]{1,3}?\.[\d]{2}$", value):
            raise ValueError(r"must validate the regular expression /^-{0,1}[\d]{1,3}?\.[\d]{2}$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> EzmaxinvoicingResponse:
        """Create an instance of EzmaxinvoicingResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of obj_audit
        if self.obj_audit:
            _dict['objAudit'] = self.obj_audit.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> EzmaxinvoicingResponse:
        """Create an instance of EzmaxinvoicingResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return EzmaxinvoicingResponse.parse_obj(obj)

        _obj = EzmaxinvoicingResponse.parse_obj({
            "pki_ezmaxinvoicing_id": obj.get("pkiEzmaxinvoicingID"),
            "fki_ezmaxinvoicingcontract_id": obj.get("fkiEzmaxinvoicingcontractID"),
            "fki_ezmaxpricing_id": obj.get("fkiEzmaxpricingID"),
            "fki_systemconfigurationtype_id": obj.get("fkiSystemconfigurationtypeID"),
            "s_systemconfigurationtype_description_x": obj.get("sSystemconfigurationtypeDescriptionX"),
            "yyyymm_ezmaxinvoicing": obj.get("yyyymmEzmaxinvoicing"),
            "i_ezmaxinvoicing_days": obj.get("iEzmaxinvoicingDays"),
            "e_ezmaxinvoicing_paymenttype": obj.get("eEzmaxinvoicingPaymenttype"),
            "d_ezmaxinvoicing_rebatepaymenttype": obj.get("dEzmaxinvoicingRebatepaymenttype"),
            "i_ezmaxinvoicing_contractlength": obj.get("iEzmaxinvoicingContractlength"),
            "d_ezmaxinvoicing_rebatecontractlength": obj.get("dEzmaxinvoicingRebatecontractlength"),
            "b_ezmaxinvoicing_rebate_ezsignallagents": obj.get("bEzmaxinvoicingRebateEzsignallagents"),
            "obj_audit": CommonAudit.from_dict(obj.get("objAudit")) if obj.get("objAudit") is not None else None
        })
        return _obj


