# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.0
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictBool, StrictStr, conint

class UserlogintypeAutocompleteElementResponse(BaseModel):
    """
    A Userlogintype AutocompleteElement Response  # noqa: E501
    """
    pki_userlogintype_id: conint(strict=True, ge=0) = Field(..., alias="pkiUserlogintypeID", description="The unique ID of the Userlogintype  Valid values:  |Value|Description|Detail| |-|-|-| |1|**Email Only**|The Ezsignsigner will receive a secure link by email| |2|**Email and phone or SMS**|The Ezsignsigner will receive a secure link by email and will need to authenticate using SMS or Phone call. **Additional fee applies**| |3|**Email and secret question**|The Ezsignsigner will receive a secure link by email and will need to authenticate using a predefined question and answer| |4|**In person only**|The Ezsignsigner will only be able to sign \"In-Person\" and there won't be any authentication. No email will be sent for invitation to sign. Make sure you evaluate the risk of signature denial and at minimum, we recommend you use a handwritten signature type| |5|**In person with phone or SMS**|The Ezsignsigner will only be able to sign \"In-Person\" and will need to authenticate using SMS or Phone call. No email will be sent for invitation to sign. **Additional fee applies**|")
    s_userlogintype_description_x: StrictStr = Field(..., alias="sUserlogintypeDescriptionX", description="The description of the Userlogintype in the language of the requester")
    b_userlogintype_isactive: StrictBool = Field(..., alias="bUserlogintypeIsactive", description="Whether the Userlogintype is active or not")
    __properties = ["pkiUserlogintypeID", "sUserlogintypeDescriptionX", "bUserlogintypeIsactive"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UserlogintypeAutocompleteElementResponse:
        """Create an instance of UserlogintypeAutocompleteElementResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UserlogintypeAutocompleteElementResponse:
        """Create an instance of UserlogintypeAutocompleteElementResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UserlogintypeAutocompleteElementResponse.parse_obj(obj)

        _obj = UserlogintypeAutocompleteElementResponse.parse_obj({
            "pki_userlogintype_id": obj.get("pkiUserlogintypeID"),
            "s_userlogintype_description_x": obj.get("sUserlogintypeDescriptionX"),
            "b_userlogintype_isactive": obj.get("bUserlogintypeIsactive")
        })
        return _obj


