# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.0
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, conint

class CustomWordPositionOccurenceResponse(BaseModel):
    """
    A Word Position Object  # noqa: E501
    """
    i_page: Optional[conint(strict=True, ge=1)] = Field(None, alias="iPage", description="The page where the word occurence was found")
    i_x: Optional[conint(strict=True, ge=0)] = Field(None, alias="iX", description="The X coordinate (Horizontal) where the Word occurence was found.  Coordinate is calculated at 100dpi (dot per inch).")
    i_y: Optional[conint(strict=True, ge=0)] = Field(None, alias="iY", description="The Y coordinate (Vertical) where the Word occurence was found.  Coordinate is calculated at 100dpi (dot per inch).")
    __properties = ["iPage", "iX", "iY"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CustomWordPositionOccurenceResponse:
        """Create an instance of CustomWordPositionOccurenceResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CustomWordPositionOccurenceResponse:
        """Create an instance of CustomWordPositionOccurenceResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CustomWordPositionOccurenceResponse.parse_obj(obj)

        _obj = CustomWordPositionOccurenceResponse.parse_obj({
            "i_page": obj.get("iPage"),
            "i_x": obj.get("iX"),
            "i_y": obj.get("iY")
        })
        return _obj


