# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.2
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from eZmaxApi.models.field_e_ezmaxinvoicinguser_variationezsign import FieldEEzmaxinvoicinguserVariationezsign
from typing import Optional, Set
from typing_extensions import Self

class EzmaxinvoicinguserResponse(BaseModel):
    """
    A Ezmaxinvoicinguser Object
    """ # noqa: E501
    pki_ezmaxinvoicinguser_id: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The unique ID of the Ezmaxinvoicinguser", alias="pkiEzmaxinvoicinguserID")
    fki_ezmaxinvoicing_id: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The unique ID of the Ezmaxinvoicing", alias="fkiEzmaxinvoicingID")
    fki_billingentityinternal_id: Annotated[int, Field(strict=True, ge=0)] = Field(description="The unique ID of the Billingentityinternal.", alias="fkiBillingentityinternalID")
    s_billingentityinternal_description_x: StrictStr = Field(description="The description of the Billingentityinternal in the language of the requester", alias="sBillingentityinternalDescriptionX")
    fki_user_id: Annotated[int, Field(strict=True, ge=0)] = Field(description="The unique ID of the User", alias="fkiUserID")
    i_ezmaxinvoicinguser_ezsigndocument: Annotated[int, Field(strict=True, ge=0)] = Field(description="The number of ezsign documents", alias="iEzmaxinvoicinguserEzsigndocument")
    b_ezmaxinvoicinguser_ezsignaccount: StrictBool = Field(description="Whether there is an eZsign account", alias="bEzmaxinvoicinguserEzsignaccount")
    b_ezmaxinvoicinguser_billableezsign: StrictBool = Field(description="Whether it is billable for eZsign", alias="bEzmaxinvoicinguserBillableezsign")
    e_ezmaxinvoicinguser_variationezsign: FieldEEzmaxinvoicinguserVariationezsign = Field(alias="eEzmaxinvoicinguserVariationezsign")
    __properties: ClassVar[List[str]] = ["pkiEzmaxinvoicinguserID", "fkiEzmaxinvoicingID", "fkiBillingentityinternalID", "sBillingentityinternalDescriptionX", "fkiUserID", "iEzmaxinvoicinguserEzsigndocument", "bEzmaxinvoicinguserEzsignaccount", "bEzmaxinvoicinguserBillableezsign", "eEzmaxinvoicinguserVariationezsign"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EzmaxinvoicinguserResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EzmaxinvoicinguserResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "pkiEzmaxinvoicinguserID": obj.get("pkiEzmaxinvoicinguserID"),
            "fkiEzmaxinvoicingID": obj.get("fkiEzmaxinvoicingID"),
            "fkiBillingentityinternalID": obj.get("fkiBillingentityinternalID"),
            "sBillingentityinternalDescriptionX": obj.get("sBillingentityinternalDescriptionX"),
            "fkiUserID": obj.get("fkiUserID"),
            "iEzmaxinvoicinguserEzsigndocument": obj.get("iEzmaxinvoicinguserEzsigndocument"),
            "bEzmaxinvoicinguserEzsignaccount": obj.get("bEzmaxinvoicinguserEzsignaccount"),
            "bEzmaxinvoicinguserBillableezsign": obj.get("bEzmaxinvoicinguserBillableezsign"),
            "eEzmaxinvoicinguserVariationezsign": obj.get("eEzmaxinvoicinguserVariationezsign")
        })
        return _obj


