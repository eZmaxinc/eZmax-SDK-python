# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.0
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictStr, conint, constr, validator

class UserstagedListElement(BaseModel):
    """
    A Userstaged List Element  # noqa: E501
    """
    pki_userstaged_id: conint(strict=True, le=65535, ge=1) = Field(..., alias="pkiUserstagedID", description="The unique ID of the Userstaged")
    s_email_address: StrictStr = Field(..., alias="sEmailAddress", description="The email address.")
    s_userstaged_firstname: constr(strict=True) = Field(..., alias="sUserstagedFirstname", description="The firstname of the Userstaged")
    s_userstaged_lastname: constr(strict=True) = Field(..., alias="sUserstagedLastname", description="The lastname of the Userstaged")
    s_userstaged_externalid: constr(strict=True) = Field(..., alias="sUserstagedExternalid", description="The externalid of the Userstaged")
    __properties = ["pkiUserstagedID", "sEmailAddress", "sUserstagedFirstname", "sUserstagedLastname", "sUserstagedExternalid"]

    @validator('s_userstaged_firstname')
    def s_userstaged_firstname_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^.{0,20}$", value):
            raise ValueError(r"must validate the regular expression /^.{0,20}$/")
        return value

    @validator('s_userstaged_lastname')
    def s_userstaged_lastname_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^.{0,25}$", value):
            raise ValueError(r"must validate the regular expression /^.{0,25}$/")
        return value

    @validator('s_userstaged_externalid')
    def s_userstaged_externalid_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^.{1,60}$", value):
            raise ValueError(r"must validate the regular expression /^.{1,60}$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UserstagedListElement:
        """Create an instance of UserstagedListElement from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UserstagedListElement:
        """Create an instance of UserstagedListElement from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UserstagedListElement.parse_obj(obj)

        _obj = UserstagedListElement.parse_obj({
            "pki_userstaged_id": obj.get("pkiUserstagedID"),
            "s_email_address": obj.get("sEmailAddress"),
            "s_userstaged_firstname": obj.get("sUserstagedFirstname"),
            "s_userstaged_lastname": obj.get("sUserstagedLastname"),
            "s_userstaged_externalid": obj.get("sUserstagedExternalid")
        })
        return _obj


