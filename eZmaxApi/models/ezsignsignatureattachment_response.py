# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.0
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictStr, conint, constr, validator

class EzsignsignatureattachmentResponse(BaseModel):
    """
    An Ezsignsignatureattachment Object  # noqa: E501
    """
    pki_ezsignsignatureattachment_id: conint(strict=True, le=16777215, ge=1) = Field(..., alias="pkiEzsignsignatureattachmentID", description="The unique ID of the Ezsignsignatureattachment")
    fki_ezsignsignature_id: conint(strict=True, ge=0) = Field(..., alias="fkiEzsignsignatureID", description="The unique ID of the Ezsignsignature")
    bin_ezsignsignatureattachment_md5: StrictStr = Field(..., alias="binEzsignsignatureattachmentMD5", description="The md5 of the Ezsignsignatureattachment")
    s_ezsignsignatureattachment_name: constr(strict=True) = Field(..., alias="sEzsignsignatureattachmentName", description="The name of the Ezsignsignatureattachment")
    s_download_url: StrictStr = Field(..., alias="sDownloadUrl", description="The Url to the requested document.  Url will expire after 3 hours.")
    __properties = ["pkiEzsignsignatureattachmentID", "fkiEzsignsignatureID", "binEzsignsignatureattachmentMD5", "sEzsignsignatureattachmentName", "sDownloadUrl"]

    @validator('s_ezsignsignatureattachment_name')
    def s_ezsignsignatureattachment_name_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^.{0,75}$", value):
            raise ValueError(r"must validate the regular expression /^.{0,75}$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> EzsignsignatureattachmentResponse:
        """Create an instance of EzsignsignatureattachmentResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> EzsignsignatureattachmentResponse:
        """Create an instance of EzsignsignatureattachmentResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return EzsignsignatureattachmentResponse.parse_obj(obj)

        _obj = EzsignsignatureattachmentResponse.parse_obj({
            "pki_ezsignsignatureattachment_id": obj.get("pkiEzsignsignatureattachmentID"),
            "fki_ezsignsignature_id": obj.get("fkiEzsignsignatureID"),
            "bin_ezsignsignatureattachment_md5": obj.get("binEzsignsignatureattachmentMD5"),
            "s_ezsignsignatureattachment_name": obj.get("sEzsignsignatureattachmentName"),
            "s_download_url": obj.get("sDownloadUrl")
        })
        return _obj


