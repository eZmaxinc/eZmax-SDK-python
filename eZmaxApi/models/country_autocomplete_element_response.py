# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.1
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, field_validator
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class CountryAutocompleteElementResponse(BaseModel):
    """
    A Country AutocompleteElement Response
    """ # noqa: E501
    pki_country_id: Annotated[int, Field(strict=True, ge=0)] = Field(description="The unique ID of the Country.  Here are some common values (Complete list must be retrieved from API):  |Value|Description| |-|-| |1|Canada| |2|United-States|", alias="pkiCountryID")
    s_country_name_x: Annotated[str, Field(strict=True)] = Field(description="The name of the Country in the language of the requester", alias="sCountryNameX")
    s_country_shortname: Annotated[str, Field(strict=True)] = Field(description="The shortname of the Country", alias="sCountryShortname")
    b_country_isactive: StrictBool = Field(description="Whether the Country is active or not", alias="bCountryIsactive")
    __properties: ClassVar[List[str]] = ["pkiCountryID", "sCountryNameX", "sCountryShortname", "bCountryIsactive"]

    @field_validator('s_country_name_x')
    def s_country_name_x_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^.{0,40}$", value):
            raise ValueError(r"must validate the regular expression /^.{0,40}$/")
        return value

    @field_validator('s_country_shortname')
    def s_country_shortname_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^.{1,3}$", value):
            raise ValueError(r"must validate the regular expression /^.{1,3}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CountryAutocompleteElementResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CountryAutocompleteElementResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "pkiCountryID": obj.get("pkiCountryID"),
            "sCountryNameX": obj.get("sCountryNameX"),
            "sCountryShortname": obj.get("sCountryShortname"),
            "bCountryIsactive": obj.get("bCountryIsactive")
        })
        return _obj


