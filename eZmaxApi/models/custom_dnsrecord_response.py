# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.1
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CustomDnsrecordResponse(BaseModel):
    """
    A Custom Dnsrecord Object
    """ # noqa: E501
    e_dnsrecord_type: StrictStr = Field(description="The type of the Dnsrecord", alias="eDnsrecordType")
    e_dnsrecord_validation: StrictStr = Field(description="The validation of the Dnsrecord", alias="eDnsrecordValidation")
    s_dnsrecord_name: StrictStr = Field(description="The name of the Dnsrecord", alias="sDnsrecordName")
    s_dnsrecord_value: Optional[StrictStr] = Field(default=None, description="The value of the Dnsrecord", alias="sDnsrecordValue")
    s_dnsrecord_expectedvalue: Optional[StrictStr] = Field(default=None, description="The expected value of the Dnsrecord", alias="sDnsrecordExpectedvalue")
    b_dnsrecord_must_match: StrictBool = Field(description="Whether the Dnsrecord must match or not", alias="bDnsrecordMustMatch")
    __properties: ClassVar[List[str]] = ["eDnsrecordType", "eDnsrecordValidation", "sDnsrecordName", "sDnsrecordValue", "sDnsrecordExpectedvalue", "bDnsrecordMustMatch"]

    @field_validator('e_dnsrecord_type')
    def e_dnsrecord_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['CNAME', 'MX', 'TXT']):
            raise ValueError("must be one of enum values ('CNAME', 'MX', 'TXT')")
        return value

    @field_validator('e_dnsrecord_validation')
    def e_dnsrecord_validation_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Match', 'Mismatch', 'NotFound']):
            raise ValueError("must be one of enum values ('Match', 'Mismatch', 'NotFound')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CustomDnsrecordResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CustomDnsrecordResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "eDnsrecordType": obj.get("eDnsrecordType"),
            "eDnsrecordValidation": obj.get("eDnsrecordValidation"),
            "sDnsrecordName": obj.get("sDnsrecordName"),
            "sDnsrecordValue": obj.get("sDnsrecordValue"),
            "sDnsrecordExpectedvalue": obj.get("sDnsrecordExpectedvalue"),
            "bDnsrecordMustMatch": obj.get("bDnsrecordMustMatch")
        })
        return _obj


