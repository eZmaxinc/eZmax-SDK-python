# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.0
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import BaseModel, Field, StrictStr, conlist, validator
from eZmaxApi.models.common_reportrow import CommonReportrow

class CommonReportsubsectionpart(BaseModel):
    """
    A part in the Reportsubsection   # noqa: E501
    """
    e_reportsubsectionpart_type: StrictStr = Field(..., alias="eReportsubsectionpartType", description="The type of the Reportsubsectionpart")
    a_obj_reportrow: conlist(CommonReportrow) = Field(..., alias="a_objReportrow")
    __properties = ["eReportsubsectionpartType", "a_objReportrow"]

    @validator('e_reportsubsectionpart_type')
    def e_reportsubsectionpart_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('Header', 'Body', 'Footer'):
            raise ValueError("must be one of enum values ('Header', 'Body', 'Footer')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CommonReportsubsectionpart:
        """Create an instance of CommonReportsubsectionpart from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in a_obj_reportrow (list)
        _items = []
        if self.a_obj_reportrow:
            for _item in self.a_obj_reportrow:
                if _item:
                    _items.append(_item.to_dict())
            _dict['a_objReportrow'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CommonReportsubsectionpart:
        """Create an instance of CommonReportsubsectionpart from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CommonReportsubsectionpart.parse_obj(obj)

        _obj = CommonReportsubsectionpart.parse_obj({
            "e_reportsubsectionpart_type": obj.get("eReportsubsectionpartType"),
            "a_obj_reportrow": [CommonReportrow.from_dict(_item) for _item in obj.get("a_objReportrow")] if obj.get("a_objReportrow") is not None else None
        })
        return _obj


