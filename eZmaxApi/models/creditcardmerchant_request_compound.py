# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.1
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class CreditcardmerchantRequestCompound(BaseModel):
    """
    A Creditcardmerchant Object and children
    """ # noqa: E501
    pki_creditcardmerchant_id: Optional[Annotated[int, Field(le=255, strict=True, ge=0)]] = Field(default=None, description="The unique ID of the Creditcardmerchant", alias="pkiCreditcardmerchantID")
    fki_bankaccount_id: Annotated[int, Field(le=255, strict=True, ge=0)] = Field(description="The unique ID of the Bankaccount", alias="fkiBankaccountID")
    fki_language_id: Optional[Annotated[int, Field(le=2, strict=True, ge=1)]] = Field(default=None, description="The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|", alias="fkiLanguageID")
    b_creditcardmerchant_denyvisa: StrictBool = Field(description="Whether if visa are denied", alias="bCreditcardmerchantDenyvisa")
    b_creditcardmerchant_denymastercard: StrictBool = Field(description="Whether if mastercard are denied", alias="bCreditcardmerchantDenymastercard")
    b_creditcardmerchant_denyamex: StrictBool = Field(description="Whether if amex are denied", alias="bCreditcardmerchantDenyamex")
    b_creditcardmerchant_isactive: StrictBool = Field(description="Whether the creditcardmerchant is active or not", alias="bCreditcardmerchantIsactive")
    s_creditcardmerchant_apitoken: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="The apitoken of the Creditcardmerchant", alias="sCreditcardmerchantApitoken")
    s_creditcardmerchant_description: Annotated[str, Field(strict=True)] = Field(description="The description of the Creditcardmerchant", alias="sCreditcardmerchantDescription")
    s_creditcardmerchant_storeid: Annotated[str, Field(strict=True)] = Field(description="The storeid of the Creditcardmerchant", alias="sCreditcardmerchantStoreid")
    __properties: ClassVar[List[str]] = ["pkiCreditcardmerchantID", "fkiBankaccountID", "fkiLanguageID", "bCreditcardmerchantDenyvisa", "bCreditcardmerchantDenymastercard", "bCreditcardmerchantDenyamex", "bCreditcardmerchantIsactive", "sCreditcardmerchantApitoken", "sCreditcardmerchantDescription", "sCreditcardmerchantStoreid"]

    @field_validator('s_creditcardmerchant_apitoken')
    def s_creditcardmerchant_apitoken_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^.{0,25}$", value):
            raise ValueError(r"must validate the regular expression /^.{0,25}$/")
        return value

    @field_validator('s_creditcardmerchant_description')
    def s_creditcardmerchant_description_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^.{0,25}$", value):
            raise ValueError(r"must validate the regular expression /^.{0,25}$/")
        return value

    @field_validator('s_creditcardmerchant_storeid')
    def s_creditcardmerchant_storeid_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^.{0,25}$", value):
            raise ValueError(r"must validate the regular expression /^.{0,25}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreditcardmerchantRequestCompound from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreditcardmerchantRequestCompound from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "pkiCreditcardmerchantID": obj.get("pkiCreditcardmerchantID"),
            "fkiBankaccountID": obj.get("fkiBankaccountID"),
            "fkiLanguageID": obj.get("fkiLanguageID"),
            "bCreditcardmerchantDenyvisa": obj.get("bCreditcardmerchantDenyvisa"),
            "bCreditcardmerchantDenymastercard": obj.get("bCreditcardmerchantDenymastercard"),
            "bCreditcardmerchantDenyamex": obj.get("bCreditcardmerchantDenyamex"),
            "bCreditcardmerchantIsactive": obj.get("bCreditcardmerchantIsactive"),
            "sCreditcardmerchantApitoken": obj.get("sCreditcardmerchantApitoken"),
            "sCreditcardmerchantDescription": obj.get("sCreditcardmerchantDescription"),
            "sCreditcardmerchantStoreid": obj.get("sCreditcardmerchantStoreid")
        })
        return _obj


