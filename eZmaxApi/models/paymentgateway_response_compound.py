# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.2
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from eZmaxApi.models.creditcardmerchant_response_compound import CreditcardmerchantResponseCompound
from eZmaxApi.models.field_e_paymentgateway_processor import FieldEPaymentgatewayProcessor
from eZmaxApi.models.multilingual_paymentgateway_description import MultilingualPaymentgatewayDescription
from typing import Optional, Set
from typing_extensions import Self

class PaymentgatewayResponseCompound(BaseModel):
    """
    A Paymentgateway Object
    """ # noqa: E501
    pki_paymentgateway_id: Annotated[int, Field(le=255, strict=True, ge=0)] = Field(description="The unique ID of the Paymentgateway", alias="pkiPaymentgatewayID")
    fki_creditcardmerchant_id: Optional[Annotated[int, Field(le=255, strict=True, ge=0)]] = Field(default=None, description="The unique ID of the Creditcardmerchant", alias="fkiCreditcardmerchantID")
    s_creditcardmerchant_description: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="The description of the Creditcardmerchant", alias="sCreditcardmerchantDescription")
    e_paymentgateway_processor: FieldEPaymentgatewayProcessor = Field(alias="ePaymentgatewayProcessor")
    obj_paymentgateway_description: MultilingualPaymentgatewayDescription = Field(alias="objPaymentgatewayDescription")
    obj_creditcardmerchant: Optional[CreditcardmerchantResponseCompound] = Field(default=None, alias="objCreditcardmerchant")
    __properties: ClassVar[List[str]] = ["pkiPaymentgatewayID", "fkiCreditcardmerchantID", "sCreditcardmerchantDescription", "ePaymentgatewayProcessor", "objPaymentgatewayDescription", "objCreditcardmerchant"]

    @field_validator('s_creditcardmerchant_description')
    def s_creditcardmerchant_description_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^.{0,25}$", value):
            raise ValueError(r"must validate the regular expression /^.{0,25}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PaymentgatewayResponseCompound from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of obj_paymentgateway_description
        if self.obj_paymentgateway_description:
            _dict['objPaymentgatewayDescription'] = self.obj_paymentgateway_description.to_dict()
        # override the default output from pydantic by calling `to_dict()` of obj_creditcardmerchant
        if self.obj_creditcardmerchant:
            _dict['objCreditcardmerchant'] = self.obj_creditcardmerchant.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PaymentgatewayResponseCompound from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "pkiPaymentgatewayID": obj.get("pkiPaymentgatewayID"),
            "fkiCreditcardmerchantID": obj.get("fkiCreditcardmerchantID"),
            "sCreditcardmerchantDescription": obj.get("sCreditcardmerchantDescription"),
            "ePaymentgatewayProcessor": obj.get("ePaymentgatewayProcessor"),
            "objPaymentgatewayDescription": MultilingualPaymentgatewayDescription.from_dict(obj["objPaymentgatewayDescription"]) if obj.get("objPaymentgatewayDescription") is not None else None,
            "objCreditcardmerchant": CreditcardmerchantResponseCompound.from_dict(obj["objCreditcardmerchant"]) if obj.get("objCreditcardmerchant") is not None else None
        })
        return _obj


