# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.0
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conint

class CustomEzsignformfieldRequest(BaseModel):
    """
    A Custom Ezsignformfield Object to fill an Ezsignform using submitForm  # noqa: E501
    """
    pki_ezsignformfield_id: Optional[conint(strict=True, ge=0)] = Field(None, alias="pkiEzsignformfieldID", description="The unique ID of the Ezsignformfield")
    s_ezsignformfield_label: Optional[StrictStr] = Field(None, alias="sEzsignformfieldLabel", description="The Label for the Ezsignformfield")
    b_ezsignformfield_selected: Optional[StrictBool] = Field(None, alias="bEzsignformfieldSelected", description="Whether the Ezsignformfield is selected or not by default.  This can only be set if eEzsignformfieldgroupType is **Checkbox** or **Radio**")
    s_ezsignformfield_enteredvalue: Optional[StrictStr] = Field(None, alias="sEzsignformfieldEnteredvalue", description="This is the value enterred for the Ezsignformfield  This can only be set if eEzsignformfieldgroupType is **Dropdown**, **Text** or **Textarea**")
    __properties = ["pkiEzsignformfieldID", "sEzsignformfieldLabel", "bEzsignformfieldSelected", "sEzsignformfieldEnteredvalue"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CustomEzsignformfieldRequest:
        """Create an instance of CustomEzsignformfieldRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CustomEzsignformfieldRequest:
        """Create an instance of CustomEzsignformfieldRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CustomEzsignformfieldRequest.parse_obj(obj)

        _obj = CustomEzsignformfieldRequest.parse_obj({
            "pki_ezsignformfield_id": obj.get("pkiEzsignformfieldID"),
            "s_ezsignformfield_label": obj.get("sEzsignformfieldLabel"),
            "b_ezsignformfield_selected": obj.get("bEzsignformfieldSelected"),
            "s_ezsignformfield_enteredvalue": obj.get("sEzsignformfieldEnteredvalue")
        })
        return _obj


