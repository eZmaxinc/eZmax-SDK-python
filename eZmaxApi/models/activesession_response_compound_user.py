# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.0
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictBool, StrictStr, conint
from eZmaxApi.models.field_e_user_ezsignsendreminderfrequency import FieldEUserEzsignsendreminderfrequency

class ActivesessionResponseCompoundUser(BaseModel):
    """
    An Activesession->User Object and children to create a complete structure  # noqa: E501
    """
    pki_user_id: conint(strict=True, ge=0) = Field(..., alias="pkiUserID", description="The unique ID of the User")
    fki_timezone_id: conint(strict=True, ge=0) = Field(..., alias="fkiTimezoneID", description="The unique ID of the Timezone")
    s_avatar_url: StrictStr = Field(..., alias="sAvatarUrl", description="The url of the picture used as avatar")
    s_user_firstname: StrictStr = Field(..., alias="sUserFirstname", description="The first name of the user")
    s_user_lastname: StrictStr = Field(..., alias="sUserLastname", description="The last name of the user")
    s_email_address: StrictStr = Field(..., alias="sEmailAddress", description="The email address.")
    e_user_ezsignsendreminderfrequency: FieldEUserEzsignsendreminderfrequency = Field(..., alias="eUserEzsignsendreminderfrequency")
    i_user_interfacecolor: conint(strict=True, ge=0) = Field(..., alias="iUserInterfacecolor", description="The int32 representation of the interface color. For example, RGB color #39435B would be 3752795")
    b_user_interfacedark: StrictBool = Field(..., alias="bUserInterfacedark", description="Whether to use a dark mode interface")
    i_user_listresult: conint(strict=True, le=500, ge=5) = Field(..., alias="iUserListresult", description="The number of rows to return by default in lists")
    __properties = ["pkiUserID", "fkiTimezoneID", "sAvatarUrl", "sUserFirstname", "sUserLastname", "sEmailAddress", "eUserEzsignsendreminderfrequency", "iUserInterfacecolor", "bUserInterfacedark", "iUserListresult"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ActivesessionResponseCompoundUser:
        """Create an instance of ActivesessionResponseCompoundUser from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ActivesessionResponseCompoundUser:
        """Create an instance of ActivesessionResponseCompoundUser from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ActivesessionResponseCompoundUser.parse_obj(obj)

        _obj = ActivesessionResponseCompoundUser.parse_obj({
            "pki_user_id": obj.get("pkiUserID"),
            "fki_timezone_id": obj.get("fkiTimezoneID"),
            "s_avatar_url": obj.get("sAvatarUrl"),
            "s_user_firstname": obj.get("sUserFirstname"),
            "s_user_lastname": obj.get("sUserLastname"),
            "s_email_address": obj.get("sEmailAddress"),
            "e_user_ezsignsendreminderfrequency": obj.get("eUserEzsignsendreminderfrequency"),
            "i_user_interfacecolor": obj.get("iUserInterfacecolor"),
            "b_user_interfacedark": obj.get("bUserInterfacedark"),
            "i_user_listresult": obj.get("iUserListresult")
        })
        return _obj


