# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.1
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from eZmaxApi.models.common_audit import CommonAudit
from eZmaxApi.models.field_e_ezsigntemplatepublic_limittype import FieldEEzsigntemplatepublicLimittype
from typing import Optional, Set
from typing_extensions import Self

class EzsigntemplatepublicResponse(BaseModel):
    """
    A Ezsigntemplatepublic Object
    """ # noqa: E501
    pki_ezsigntemplatepublic_id: Annotated[int, Field(le=65535, strict=True, ge=0)] = Field(description="The unique ID of the Ezsigntemplatepublic", alias="pkiEzsigntemplatepublicID")
    fki_ezsignfoldertype_id: Annotated[int, Field(le=65535, strict=True, ge=0)] = Field(description="The unique ID of the Ezsignfoldertype.", alias="fkiEzsignfoldertypeID")
    s_ezsignfoldertype_name_x: StrictStr = Field(description="The name of the Ezsignfoldertype in the language of the requester", alias="sEzsignfoldertypeNameX")
    fki_userlogintype_id: Annotated[int, Field(strict=True, ge=0)] = Field(description="The unique ID of the Userlogintype  Valid values:  |Value|Description|Detail| |-|-|-| |1|**Email Only**|The Ezsignsigner will receive a secure link by email| |2|**Email and phone or SMS**|The Ezsignsigner will receive a secure link by email and will need to authenticate using SMS or Phone call. **Additional fee applies**| |3|**Email and secret question**|The Ezsignsigner will receive a secure link by email and will need to authenticate using a predefined question and answer| |4|**In person only**|The Ezsignsigner will only be able to sign \"In-Person\" and there won't be any authentication. No email will be sent for invitation to sign. Make sure you evaluate the risk of signature denial and at minimum, we recommend you use a handwritten signature type| |5|**In person with phone or SMS**|The Ezsignsigner will only be able to sign \"In-Person\" and will need to authenticate using SMS or Phone call. No email will be sent for invitation to sign. **Additional fee applies**| |6|**Embedded**|The Ezsignsigner will only be able to sign in the embedded solution. No email will be sent for invitation to sign. **Additional fee applies**|   |7|**Embedded with phone or SMS**|The Ezsignsigner will only be able to sign in the embedded solution and will need to authenticate using SMS or Phone call. No email will be sent for invitation to sign. **Additional fee applies**|   |8|**No validation**|The Ezsignsigner will not receive an email and won't have to validate his connection using 2 factor. **Additional fee applies**|      |9|**Sms only**|The Ezsignsigner will not receive an email but will will need to authenticate using SMS. **Additional fee applies**|     ", alias="fkiUserlogintypeID")
    s_userlogintype_description_x: StrictStr = Field(description="The description of the Userlogintype in the language of the requester", alias="sUserlogintypeDescriptionX")
    fki_ezsigntemplate_id: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The unique ID of the Ezsigntemplate", alias="fkiEzsigntemplateID")
    fki_ezsigntemplatepackage_id: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The unique ID of the Ezsigntemplatepackage", alias="fkiEzsigntemplatepackageID")
    s_ezsigntemplatepublic_description: Annotated[str, Field(strict=True)] = Field(description="The description of the Ezsigntemplatepublic", alias="sEzsigntemplatepublicDescription")
    s_ezsigntemplatepublic_referenceid: Annotated[str, Field(strict=True)] = Field(description="The referenceid of the Ezsigntemplatepublic", alias="sEzsigntemplatepublicReferenceid")
    b_ezsigntemplatepublic_isactive: StrictBool = Field(description="Whether the ezsigntemplatepublic is active or not", alias="bEzsigntemplatepublicIsactive")
    t_ezsigntemplatepublic_note: Annotated[str, Field(strict=True)] = Field(description="The note of the Ezsigntemplatepublic", alias="tEzsigntemplatepublicNote")
    e_ezsigntemplatepublic_limittype: FieldEEzsigntemplatepublicLimittype = Field(alias="eEzsigntemplatepublicLimittype")
    i_ezsigntemplatepublic_limit: Annotated[int, Field(le=65535, strict=True, ge=0)] = Field(description="The limit of the Ezsigntemplatepublic", alias="iEzsigntemplatepublicLimit")
    i_ezsigntemplatepublic_limitexceeded: Annotated[int, Field(le=65535, strict=True, ge=0)] = Field(description="The limitexceeded of the Ezsigntemplatepublic", alias="iEzsigntemplatepublicLimitexceeded")
    dt_ezsigntemplatepublic_limitexceededsince: Annotated[str, Field(strict=True)] = Field(description="The limitexceededsince of the Ezsigntemplatepublic", alias="dtEzsigntemplatepublicLimitexceededsince")
    s_ezsigntemplatepublic_url: Annotated[str, Field(strict=True)] = Field(description="The url of the Ezsigntemplatepublic  You can add these value as query parameters to prefill the corresponding role  |Parameter|Description| |-|-| |sEzsigntemplatesignerDescription|The role to fill| |sContactFirstname|The contact firstname| |sContactLastname|The contact lastname| |sEmailAddress|The contact email| |sPhoneE164|The contact phone number| |sPhoneE164Cell|The contact cell phone number|", alias="sEzsigntemplatepublicUrl")
    s_ezsigntemplatepublic_ezsigntemplatedescription: Annotated[str, Field(strict=True)] = Field(description="The Ezsigntemplate/Ezsigntemplatepackage description", alias="sEzsigntemplatepublicEzsigntemplatedescription")
    obj_audit: Optional[CommonAudit] = Field(default=None, alias="objAudit")
    __properties: ClassVar[List[str]] = ["pkiEzsigntemplatepublicID", "fkiEzsignfoldertypeID", "sEzsignfoldertypeNameX", "fkiUserlogintypeID", "sUserlogintypeDescriptionX", "fkiEzsigntemplateID", "fkiEzsigntemplatepackageID", "sEzsigntemplatepublicDescription", "sEzsigntemplatepublicReferenceid", "bEzsigntemplatepublicIsactive", "tEzsigntemplatepublicNote", "eEzsigntemplatepublicLimittype", "iEzsigntemplatepublicLimit", "iEzsigntemplatepublicLimitexceeded", "dtEzsigntemplatepublicLimitexceededsince", "sEzsigntemplatepublicUrl", "sEzsigntemplatepublicEzsigntemplatedescription", "objAudit"]

    @field_validator('s_ezsigntemplatepublic_description')
    def s_ezsigntemplatepublic_description_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^.{0,80}$", value):
            raise ValueError(r"must validate the regular expression /^.{0,80}$/")
        return value

    @field_validator('s_ezsigntemplatepublic_referenceid')
    def s_ezsigntemplatepublic_referenceid_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^.{0,36}$", value):
            raise ValueError(r"must validate the regular expression /^.{0,36}$/")
        return value

    @field_validator('t_ezsigntemplatepublic_note')
    def t_ezsigntemplatepublic_note_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^.{0,65535}$", value):
            raise ValueError(r"must validate the regular expression /^.{0,65535}$/")
        return value

    @field_validator('dt_ezsigntemplatepublic_limitexceededsince')
    def dt_ezsigntemplatepublic_limitexceededsince_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) ([01]?[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$", value):
            raise ValueError(r"must validate the regular expression /^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) ([01]?[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$/")
        return value

    @field_validator('s_ezsigntemplatepublic_url')
    def s_ezsigntemplatepublic_url_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^(https|http):\/\/[^\s\/$.?#].[^\s]*$", value):
            raise ValueError(r"must validate the regular expression /^(https|http):\/\/[^\s\/$.?#].[^\s]*$/")
        return value

    @field_validator('s_ezsigntemplatepublic_ezsigntemplatedescription')
    def s_ezsigntemplatepublic_ezsigntemplatedescription_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^.{1,80}$", value):
            raise ValueError(r"must validate the regular expression /^.{1,80}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EzsigntemplatepublicResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of obj_audit
        if self.obj_audit:
            _dict['objAudit'] = self.obj_audit.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Optional[Self]:
        """Create an instance of EzsigntemplatepublicResponse from a dict"""


