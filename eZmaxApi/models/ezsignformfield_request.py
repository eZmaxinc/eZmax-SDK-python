# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.0
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conint
from eZmaxApi.models.field_e_ezsignformfield_dependencyrequirement import FieldEEzsignformfieldDependencyrequirement

class EzsignformfieldRequest(BaseModel):
    """
    A Ezsignformfield Object  # noqa: E501
    """
    pki_ezsignformfield_id: Optional[conint(strict=True, ge=0)] = Field(None, alias="pkiEzsignformfieldID", description="The unique ID of the Ezsignformfield")
    i_ezsignpage_pagenumber: conint(strict=True, ge=1) = Field(..., alias="iEzsignpagePagenumber", description="The page number in the Ezsigndocument")
    s_ezsignformfield_label: StrictStr = Field(..., alias="sEzsignformfieldLabel", description="The Label for the Ezsignformfield")
    s_ezsignformfield_value: Optional[StrictStr] = Field(None, alias="sEzsignformfieldValue", description="The value for the Ezsignformfield  This can only be set if eEzsignformfieldgroupType is Checkbox or Radio")
    i_ezsignformfield_x: conint(strict=True, ge=0) = Field(..., alias="iEzsignformfieldX", description="The X coordinate (Horizontal) where to put the Ezsignformfield on the Ezsignpage.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsignformfield 2 inches from the left border of the page, you would use \"200\" for the X coordinate.")
    i_ezsignformfield_y: conint(strict=True, ge=0) = Field(..., alias="iEzsignformfieldY", description="The Y coordinate (Vertical) where to put the Ezsignformfield on the Ezsignpage.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsignformfield 3 inches from the top border of the page, you would use \"300\" for the Y coordinate.")
    i_ezsignformfield_width: conint(strict=True, ge=0) = Field(..., alias="iEzsignformfieldWidth", description="The Width of the Ezsignformfield in pixels calculated at 100 DPI  The allowed values are varying based on the eEzsignformfieldgroupType.  | eEzsignformfieldgroupType | Valid values | | ------------------------- | ------------ | | Checkbox                  | 22           | | Dropdown                  | 22-65535     | | Radio                     | 22           | | Text                      | 22-65535     | | Textarea                  | 22-65535     |")
    i_ezsignformfield_height: conint(strict=True, ge=0) = Field(..., alias="iEzsignformfieldHeight", description="The Height of the Ezsignformfield in pixels calculated at 100 DPI  The allowed values are varying based on the eEzsignformfieldgroupType.  | eEzsignformfieldgroupType | Valid values | | ------------------------- | ------------ | | Checkbox                  | 22           | | Dropdown                  | 22           | | Radio                     | 22           | | Text                      | 22           | | Textarea                  | 22-65535     | ")
    b_ezsignformfield_autocomplete: Optional[StrictBool] = Field(None, alias="bEzsignformfieldAutocomplete", description="Whether the Ezsignformfield allows the use of the autocomplete of the browser.  This can only be set if eEzsignformfieldgroupType is **Text**")
    b_ezsignformfield_selected: Optional[StrictBool] = Field(None, alias="bEzsignformfieldSelected", description="Whether the Ezsignformfield is selected or not by default.  This can only be set if eEzsignformfieldgroupType is **Checkbox** or **Radio**")
    s_ezsignformfield_enteredvalue: Optional[StrictStr] = Field(None, alias="sEzsignformfieldEnteredvalue", description="This is the value enterred for the Ezsignformfield  This can only be set if eEzsignformfieldgroupType is **Dropdown**, **Text** or **Textarea**")
    e_ezsignformfield_dependencyrequirement: Optional[FieldEEzsignformfieldDependencyrequirement] = Field(None, alias="eEzsignformfieldDependencyrequirement")
    __properties = ["pkiEzsignformfieldID", "iEzsignpagePagenumber", "sEzsignformfieldLabel", "sEzsignformfieldValue", "iEzsignformfieldX", "iEzsignformfieldY", "iEzsignformfieldWidth", "iEzsignformfieldHeight", "bEzsignformfieldAutocomplete", "bEzsignformfieldSelected", "sEzsignformfieldEnteredvalue", "eEzsignformfieldDependencyrequirement"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> EzsignformfieldRequest:
        """Create an instance of EzsignformfieldRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> EzsignformfieldRequest:
        """Create an instance of EzsignformfieldRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return EzsignformfieldRequest.parse_obj(obj)

        _obj = EzsignformfieldRequest.parse_obj({
            "pki_ezsignformfield_id": obj.get("pkiEzsignformfieldID"),
            "i_ezsignpage_pagenumber": obj.get("iEzsignpagePagenumber"),
            "s_ezsignformfield_label": obj.get("sEzsignformfieldLabel"),
            "s_ezsignformfield_value": obj.get("sEzsignformfieldValue"),
            "i_ezsignformfield_x": obj.get("iEzsignformfieldX"),
            "i_ezsignformfield_y": obj.get("iEzsignformfieldY"),
            "i_ezsignformfield_width": obj.get("iEzsignformfieldWidth"),
            "i_ezsignformfield_height": obj.get("iEzsignformfieldHeight"),
            "b_ezsignformfield_autocomplete": obj.get("bEzsignformfieldAutocomplete"),
            "b_ezsignformfield_selected": obj.get("bEzsignformfieldSelected"),
            "s_ezsignformfield_enteredvalue": obj.get("sEzsignformfieldEnteredvalue"),
            "e_ezsignformfield_dependencyrequirement": obj.get("eEzsignformfieldDependencyrequirement")
        })
        return _obj


