# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.0
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictBytes, StrictStr, conint, validator

class EzsigntemplatedocumentRequestCompound(BaseModel):
    """
    A Ezsigntemplatedocument Object and children  # noqa: E501
    """
    pki_ezsigntemplatedocument_id: Optional[conint(strict=True, ge=0)] = Field(None, alias="pkiEzsigntemplatedocumentID", description="The unique ID of the Ezsigntemplatedocument")
    fki_ezsigntemplate_id: conint(strict=True, ge=0) = Field(..., alias="fkiEzsigntemplateID", description="The unique ID of the Ezsigntemplate")
    fki_ezsigndocument_id: Optional[conint(strict=True, ge=0)] = Field(None, alias="fkiEzsigndocumentID", description="The unique ID of the Ezsigndocument")
    fki_ezsigntemplatesigner_id: Optional[conint(strict=True, ge=0)] = Field(None, alias="fkiEzsigntemplatesignerID", description="The unique ID of the Ezsigntemplatesigner")
    s_ezsigntemplatedocument_name: StrictStr = Field(..., alias="sEzsigntemplatedocumentName", description="The name of the Ezsigntemplatedocument.")
    e_ezsigntemplatedocument_source: StrictStr = Field(..., alias="eEzsigntemplatedocumentSource", description="Indicates where to look for the document binary content.")
    e_ezsigntemplatedocument_format: Optional[StrictStr] = Field(None, alias="eEzsigntemplatedocumentFormat", description="Indicates the format of the template.")
    s_ezsigntemplatedocument_base64: Optional[Union[StrictBytes, StrictStr]] = Field(None, alias="sEzsigntemplatedocumentBase64", description="The Base64 encoded binary content of the document.  This field is Required when eEzsigntemplatedocumentSource = Base64.")
    s_ezsigntemplatedocument_url: Optional[StrictStr] = Field(None, alias="sEzsigntemplatedocumentUrl", description="The url where the document content resides.  This field is Required when eEzsigntemplatedocumentSource = Url.")
    b_ezsigntemplatedocument_forcerepair: Optional[StrictBool] = Field(None, alias="bEzsigntemplatedocumentForcerepair", description="Try to repair the document or flatten it if it cannot be used for electronic signature.")
    e_ezsigntemplatedocument_form: Optional[StrictStr] = Field(None, alias="eEzsigntemplatedocumentForm", description="If the document contains an existing PDF form this property must be set.  **Keep** leaves the form as-is in the document.  **Convert** removes the form and convert all the existing fields to Ezsigntemplateformfieldgroups and assign them to the specified **fkiEzsigntemplatesignerID**")
    s_ezsigntemplatedocument_password: Optional[StrictStr] = Field('', alias="sEzsigntemplatedocumentPassword", description="If the source template is password protected, the password to open/modify it.")
    __properties = ["pkiEzsigntemplatedocumentID", "fkiEzsigntemplateID", "fkiEzsigndocumentID", "fkiEzsigntemplatesignerID", "sEzsigntemplatedocumentName", "eEzsigntemplatedocumentSource", "eEzsigntemplatedocumentFormat", "sEzsigntemplatedocumentBase64", "sEzsigntemplatedocumentUrl", "bEzsigntemplatedocumentForcerepair", "eEzsigntemplatedocumentForm", "sEzsigntemplatedocumentPassword"]

    @validator('e_ezsigntemplatedocument_source')
    def e_ezsigntemplatedocument_source_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('Base64', 'Url', 'Ezsigndocument'):
            raise ValueError("must be one of enum values ('Base64', 'Url', 'Ezsigndocument')")
        return value

    @validator('e_ezsigntemplatedocument_format')
    def e_ezsigntemplatedocument_format_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Pdf', 'Doc', 'Docx', 'Xls', 'Xlsx', 'Ppt', 'Pptx'):
            raise ValueError("must be one of enum values ('Pdf', 'Doc', 'Docx', 'Xls', 'Xlsx', 'Ppt', 'Pptx')")
        return value

    @validator('e_ezsigntemplatedocument_form')
    def e_ezsigntemplatedocument_form_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Keep', 'Convert'):
            raise ValueError("must be one of enum values ('Keep', 'Convert')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> EzsigntemplatedocumentRequestCompound:
        """Create an instance of EzsigntemplatedocumentRequestCompound from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> EzsigntemplatedocumentRequestCompound:
        """Create an instance of EzsigntemplatedocumentRequestCompound from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return EzsigntemplatedocumentRequestCompound.parse_obj(obj)

        _obj = EzsigntemplatedocumentRequestCompound.parse_obj({
            "pki_ezsigntemplatedocument_id": obj.get("pkiEzsigntemplatedocumentID"),
            "fki_ezsigntemplate_id": obj.get("fkiEzsigntemplateID"),
            "fki_ezsigndocument_id": obj.get("fkiEzsigndocumentID"),
            "fki_ezsigntemplatesigner_id": obj.get("fkiEzsigntemplatesignerID"),
            "s_ezsigntemplatedocument_name": obj.get("sEzsigntemplatedocumentName"),
            "e_ezsigntemplatedocument_source": obj.get("eEzsigntemplatedocumentSource"),
            "e_ezsigntemplatedocument_format": obj.get("eEzsigntemplatedocumentFormat"),
            "s_ezsigntemplatedocument_base64": obj.get("sEzsigntemplatedocumentBase64"),
            "s_ezsigntemplatedocument_url": obj.get("sEzsigntemplatedocumentUrl"),
            "b_ezsigntemplatedocument_forcerepair": obj.get("bEzsigntemplatedocumentForcerepair"),
            "e_ezsigntemplatedocument_form": obj.get("eEzsigntemplatedocumentForm"),
            "s_ezsigntemplatedocument_password": obj.get("sEzsigntemplatedocumentPassword") if obj.get("sEzsigntemplatedocumentPassword") is not None else ''
        })
        return _obj


