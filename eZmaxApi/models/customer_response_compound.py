# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.1
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import ConfigDict
from typing import Any, ClassVar, Dict, List
from eZmaxApi.models.customer_response import CustomerResponse
from eZmaxApi.models.field_e_customer_marketingcorrespondence import FieldECustomerMarketingcorrespondence
from eZmaxApi.models.field_e_customer_type import FieldECustomerType
from typing import Optional, Set
from typing_extensions import Self

class CustomerResponseCompound(CustomerResponse):
    """
    A Customer Object
    """ # noqa: E501
    __properties: ClassVar[List[str]] = ["pkiCustomerID", "fkiCompanyID", "fkiCustomergroupID", "sCustomerName", "fkiContactinformationsID", "fkiContactcontainerID", "fkiImageID", "fkiGlaccountcontainerID", "fkiLanguageID", "fkiDepartmentID", "fkiPaymentmethodID", "fkiElectronicfundstransferbankaccountID", "fkiElectronicfundstransferbankaccountIDDirectdebit", "fkiSendingmethodID", "fkiTaxassignmentID", "fkiAttendancestatusID", "fkiAgentIDVariableexpensechargeto", "fkiBrokerIDVariableexpensechargeto", "fkiCustomerIDVariableexpensechargeto", "fkiGlaccountcontainerIDVariableexpensechargeto", "fkiAgentIDSupplychargechargeto", "fkiBrokerIDSupplychargechargeto", "fkiCustomerIDSupplychargechargeto", "fkiGlaccountcontainerIDSupplychargechargeto", "fkiInvoicealternatelogoID", "fkiSynchronizationlinkserverID", "efkiUserID", "efksCustomerCode", "sCustomerCode", "dCustomerFulltimeequivalent", "iCustomerPhotocopiercode", "iCustomerLongdistancecode", "iCustomerTimewindowstart", "iCustomerTimewindowend", "dCustomerMinimumchargeableinterests", "dtCustomerBirthdate", "dtCustomerTransfer", "dtCustomerTransferappointment", "dtCustomerTransfersurvey", "bCustomerIsactive", "bCustomerVariableexpensefinanced", "bCustomerVariableexpensefinancedtaxes", "bCustomerSupplychargefinanced", "bCustomerSupplychargefinancedtaxes", "bCustomerAttendance", "eCustomerType", "eCustomerMarketingcorrespondence", "bCustomerBlackcopycarbon", "bCustomerUnsubscribeinfo", "tCustomerComment", "IMPORTID"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CustomerResponseCompound from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CustomerResponseCompound from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "pkiCustomerID": obj.get("pkiCustomerID"),
            "fkiCompanyID": obj.get("fkiCompanyID"),
            "fkiCustomergroupID": obj.get("fkiCustomergroupID"),
            "sCustomerName": obj.get("sCustomerName"),
            "fkiContactinformationsID": obj.get("fkiContactinformationsID"),
            "fkiContactcontainerID": obj.get("fkiContactcontainerID"),
            "fkiImageID": obj.get("fkiImageID"),
            "fkiGlaccountcontainerID": obj.get("fkiGlaccountcontainerID"),
            "fkiLanguageID": obj.get("fkiLanguageID"),
            "fkiDepartmentID": obj.get("fkiDepartmentID"),
            "fkiPaymentmethodID": obj.get("fkiPaymentmethodID"),
            "fkiElectronicfundstransferbankaccountID": obj.get("fkiElectronicfundstransferbankaccountID"),
            "fkiElectronicfundstransferbankaccountIDDirectdebit": obj.get("fkiElectronicfundstransferbankaccountIDDirectdebit"),
            "fkiSendingmethodID": obj.get("fkiSendingmethodID"),
            "fkiTaxassignmentID": obj.get("fkiTaxassignmentID"),
            "fkiAttendancestatusID": obj.get("fkiAttendancestatusID"),
            "fkiAgentIDVariableexpensechargeto": obj.get("fkiAgentIDVariableexpensechargeto"),
            "fkiBrokerIDVariableexpensechargeto": obj.get("fkiBrokerIDVariableexpensechargeto"),
            "fkiCustomerIDVariableexpensechargeto": obj.get("fkiCustomerIDVariableexpensechargeto"),
            "fkiGlaccountcontainerIDVariableexpensechargeto": obj.get("fkiGlaccountcontainerIDVariableexpensechargeto"),
            "fkiAgentIDSupplychargechargeto": obj.get("fkiAgentIDSupplychargechargeto"),
            "fkiBrokerIDSupplychargechargeto": obj.get("fkiBrokerIDSupplychargechargeto"),
            "fkiCustomerIDSupplychargechargeto": obj.get("fkiCustomerIDSupplychargechargeto"),
            "fkiGlaccountcontainerIDSupplychargechargeto": obj.get("fkiGlaccountcontainerIDSupplychargechargeto"),
            "fkiInvoicealternatelogoID": obj.get("fkiInvoicealternatelogoID"),
            "fkiSynchronizationlinkserverID": obj.get("fkiSynchronizationlinkserverID"),
            "efkiUserID": obj.get("efkiUserID"),
            "efksCustomerCode": obj.get("efksCustomerCode"),
            "sCustomerCode": obj.get("sCustomerCode"),
            "dCustomerFulltimeequivalent": obj.get("dCustomerFulltimeequivalent"),
            "iCustomerPhotocopiercode": obj.get("iCustomerPhotocopiercode"),
            "iCustomerLongdistancecode": obj.get("iCustomerLongdistancecode"),
            "iCustomerTimewindowstart": obj.get("iCustomerTimewindowstart"),
            "iCustomerTimewindowend": obj.get("iCustomerTimewindowend"),
            "dCustomerMinimumchargeableinterests": obj.get("dCustomerMinimumchargeableinterests"),
            "dtCustomerBirthdate": obj.get("dtCustomerBirthdate"),
            "dtCustomerTransfer": obj.get("dtCustomerTransfer"),
            "dtCustomerTransferappointment": obj.get("dtCustomerTransferappointment"),
            "dtCustomerTransfersurvey": obj.get("dtCustomerTransfersurvey"),
            "bCustomerIsactive": obj.get("bCustomerIsactive"),
            "bCustomerVariableexpensefinanced": obj.get("bCustomerVariableexpensefinanced"),
            "bCustomerVariableexpensefinancedtaxes": obj.get("bCustomerVariableexpensefinancedtaxes"),
            "bCustomerSupplychargefinanced": obj.get("bCustomerSupplychargefinanced"),
            "bCustomerSupplychargefinancedtaxes": obj.get("bCustomerSupplychargefinancedtaxes"),
            "bCustomerAttendance": obj.get("bCustomerAttendance"),
            "eCustomerType": obj.get("eCustomerType"),
            "eCustomerMarketingcorrespondence": obj.get("eCustomerMarketingcorrespondence"),
            "bCustomerBlackcopycarbon": obj.get("bCustomerBlackcopycarbon"),
            "bCustomerUnsubscribeinfo": obj.get("bCustomerUnsubscribeinfo"),
            "tCustomerComment": obj.get("tCustomerComment"),
            "IMPORTID": obj.get("IMPORTID")
        })
        return _obj


