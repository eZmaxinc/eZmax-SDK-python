# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.1
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from eZmaxApi.models.enum_horizontalalignment import EnumHorizontalalignment
from eZmaxApi.models.ezsignelementdependency_response import EzsignelementdependencyResponse
from eZmaxApi.models.ezsignformfield_response import EzsignformfieldResponse
from eZmaxApi.models.field_e_ezsignformfield_dependencyrequirement import FieldEEzsignformfieldDependencyrequirement
from eZmaxApi.models.textstylestatic_response_compound import TextstylestaticResponseCompound
from typing import Optional, Set
from typing_extensions import Self

class EzsignformfieldResponseCompound(EzsignformfieldResponse):
    """
    An Ezsignformfield Object and children to create a complete structure
    """ # noqa: E501
    a_obj_ezsignelementdependency: Optional[List[EzsignelementdependencyResponse]] = Field(default=None, alias="a_objEzsignelementdependency")
    __properties: ClassVar[List[str]] = ["pkiEzsignformfieldID", "iEzsignpagePagenumber", "sEzsignformfieldLabel", "sEzsignformfieldValue", "iEzsignformfieldX", "iEzsignformfieldY", "iEzsignformfieldWidth", "iEzsignformfieldHeight", "bEzsignformfieldAutocomplete", "bEzsignformfieldSelected", "sEzsignformfieldEnteredvalue", "eEzsignformfieldDependencyrequirement", "eEzsignformfieldHorizontalalignment", "objTextstylestatic", "a_objEzsignelementdependency"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EzsignformfieldResponseCompound from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of obj_textstylestatic
        if self.obj_textstylestatic:
            _dict['objTextstylestatic'] = self.obj_textstylestatic.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in a_obj_ezsignelementdependency (list)
        _items = []
        if self.a_obj_ezsignelementdependency:
            for _item_a_obj_ezsignelementdependency in self.a_obj_ezsignelementdependency:
                if _item_a_obj_ezsignelementdependency:
                    _items.append(_item_a_obj_ezsignelementdependency.to_dict())
            _dict['a_objEzsignelementdependency'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EzsignformfieldResponseCompound from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "pkiEzsignformfieldID": obj.get("pkiEzsignformfieldID"),
            "iEzsignpagePagenumber": obj.get("iEzsignpagePagenumber"),
            "sEzsignformfieldLabel": obj.get("sEzsignformfieldLabel"),
            "sEzsignformfieldValue": obj.get("sEzsignformfieldValue"),
            "iEzsignformfieldX": obj.get("iEzsignformfieldX"),
            "iEzsignformfieldY": obj.get("iEzsignformfieldY"),
            "iEzsignformfieldWidth": obj.get("iEzsignformfieldWidth"),
            "iEzsignformfieldHeight": obj.get("iEzsignformfieldHeight"),
            "bEzsignformfieldAutocomplete": obj.get("bEzsignformfieldAutocomplete"),
            "bEzsignformfieldSelected": obj.get("bEzsignformfieldSelected"),
            "sEzsignformfieldEnteredvalue": obj.get("sEzsignformfieldEnteredvalue"),
            "eEzsignformfieldDependencyrequirement": obj.get("eEzsignformfieldDependencyrequirement"),
            "eEzsignformfieldHorizontalalignment": obj.get("eEzsignformfieldHorizontalalignment"),
            "objTextstylestatic": TextstylestaticResponseCompound.from_dict(obj["objTextstylestatic"]) if obj.get("objTextstylestatic") is not None else None,
            "a_objEzsignelementdependency": [EzsignelementdependencyResponse.from_dict(_item) for _item in obj["a_objEzsignelementdependency"]] if obj.get("a_objEzsignelementdependency") is not None else None
        })
        return _obj


