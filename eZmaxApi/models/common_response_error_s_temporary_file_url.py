# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.0
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, constr, validator
from eZmaxApi.models.field_e_error_code import FieldEErrorCode

class CommonResponseErrorSTemporaryFileUrl(BaseModel):
    """
    Generic Error Message  # noqa: E501
    """
    s_error_message: constr(strict=True) = Field(..., alias="sErrorMessage", description="The message giving details about the error")
    e_error_code: FieldEErrorCode = Field(..., alias="eErrorCode")
    s_temporary_file_url: Optional[StrictStr] = Field(None, alias="sTemporaryFileUrl", description="The Temporary File Url of the document that was uploaded. That url can be reused instead of uploading the file again.")
    __properties = ["sErrorMessage", "eErrorCode", "sTemporaryFileUrl"]

    @validator('s_error_message')
    def s_error_message_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^.{0,500}$", value):
            raise ValueError(r"must validate the regular expression /^.{0,500}$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CommonResponseErrorSTemporaryFileUrl:
        """Create an instance of CommonResponseErrorSTemporaryFileUrl from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CommonResponseErrorSTemporaryFileUrl:
        """Create an instance of CommonResponseErrorSTemporaryFileUrl from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CommonResponseErrorSTemporaryFileUrl.parse_obj(obj)

        _obj = CommonResponseErrorSTemporaryFileUrl.parse_obj({
            "s_error_message": obj.get("sErrorMessage"),
            "e_error_code": obj.get("eErrorCode"),
            "s_temporary_file_url": obj.get("sTemporaryFileUrl")
        })
        return _obj


