# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.1
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import ConfigDict
from typing import Any, ClassVar, Dict, List
from eZmaxApi.models.activesession_response_compound import ActivesessionResponseCompound
from eZmaxApi.models.activesession_response_compound_apikey import ActivesessionResponseCompoundApikey
from eZmaxApi.models.activesession_response_compound_user import ActivesessionResponseCompoundUser
from eZmaxApi.models.field_e_activesession_ezsign import FieldEActivesessionEzsign
from eZmaxApi.models.field_e_activesession_ezsignaccess import FieldEActivesessionEzsignaccess
from eZmaxApi.models.field_e_activesession_ezsignprepaid import FieldEActivesessionEzsignprepaid
from eZmaxApi.models.field_e_activesession_origin import FieldEActivesessionOrigin
from eZmaxApi.models.field_e_activesession_realestateinprogress import FieldEActivesessionRealestateinprogress
from eZmaxApi.models.field_e_activesession_usertype import FieldEActivesessionUsertype
from eZmaxApi.models.field_e_activesession_weekdaystart import FieldEActivesessionWeekdaystart
from eZmaxApi.models.field_e_systemconfiguration_ezsignofficeplan import FieldESystemconfigurationEzsignofficeplan
from eZmaxApi.models.field_e_user_ezsignaccess import FieldEUserEzsignaccess
from eZmaxApi.models.field_e_user_ezsignprepaid import FieldEUserEzsignprepaid
from typing import Optional, Set
from typing_extensions import Self

class ActivesessionGetCurrentV1ResponseMPayload(ActivesessionResponseCompound):
    """
    Payload for GET /1/object/activesession/getCurrent
    """ # noqa: E501
    __properties: ClassVar[List[str]] = ["eActivesessionUsertype", "eActivesessionOrigin", "eActivesessionWeekdaystart", "fkiLanguageID", "sCompanyNameX", "sDepartmentNameX", "bActivesessionDebug", "bActivesessionIssuperadmin", "bActivesessionAttachment", "bActivesessionCanafe", "bActivesessionFinancial", "bActivesessionRealestatecompleted", "eActivesessionEzsign", "eActivesessionEzsignaccess", "eActivesessionEzsignprepaid", "eActivesessionRealestateinprogress", "pksCustomerCode", "fkiSystemconfigurationtypeID", "fkiSignatureID", "fkiEzsignuserID", "bSystemconfigurationEzsignpaidbyoffice", "eSystemconfigurationEzsignofficeplan", "eUserEzsignaccess", "eUserEzsignprepaid", "bUserEzsigntrial", "dtUserEzsignprepaidexpiration", "a_pkiPermissionID", "objUserReal", "objUserCloned", "objApikey", "a_eModuleInternalname"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ActivesessionGetCurrentV1ResponseMPayload from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of obj_user_real
        if self.obj_user_real:
            _dict['objUserReal'] = self.obj_user_real.to_dict()
        # override the default output from pydantic by calling `to_dict()` of obj_user_cloned
        if self.obj_user_cloned:
            _dict['objUserCloned'] = self.obj_user_cloned.to_dict()
        # override the default output from pydantic by calling `to_dict()` of obj_apikey
        if self.obj_apikey:
            _dict['objApikey'] = self.obj_apikey.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ActivesessionGetCurrentV1ResponseMPayload from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "eActivesessionUsertype": obj.get("eActivesessionUsertype"),
            "eActivesessionOrigin": obj.get("eActivesessionOrigin"),
            "eActivesessionWeekdaystart": obj.get("eActivesessionWeekdaystart"),
            "fkiLanguageID": obj.get("fkiLanguageID"),
            "sCompanyNameX": obj.get("sCompanyNameX"),
            "sDepartmentNameX": obj.get("sDepartmentNameX"),
            "bActivesessionDebug": obj.get("bActivesessionDebug"),
            "bActivesessionIssuperadmin": obj.get("bActivesessionIssuperadmin"),
            "bActivesessionAttachment": obj.get("bActivesessionAttachment"),
            "bActivesessionCanafe": obj.get("bActivesessionCanafe"),
            "bActivesessionFinancial": obj.get("bActivesessionFinancial"),
            "bActivesessionRealestatecompleted": obj.get("bActivesessionRealestatecompleted"),
            "eActivesessionEzsign": obj.get("eActivesessionEzsign"),
            "eActivesessionEzsignaccess": obj.get("eActivesessionEzsignaccess"),
            "eActivesessionEzsignprepaid": obj.get("eActivesessionEzsignprepaid"),
            "eActivesessionRealestateinprogress": obj.get("eActivesessionRealestateinprogress"),
            "pksCustomerCode": obj.get("pksCustomerCode"),
            "fkiSystemconfigurationtypeID": obj.get("fkiSystemconfigurationtypeID"),
            "fkiSignatureID": obj.get("fkiSignatureID"),
            "fkiEzsignuserID": obj.get("fkiEzsignuserID"),
            "bSystemconfigurationEzsignpaidbyoffice": obj.get("bSystemconfigurationEzsignpaidbyoffice"),
            "eSystemconfigurationEzsignofficeplan": obj.get("eSystemconfigurationEzsignofficeplan"),
            "eUserEzsignaccess": obj.get("eUserEzsignaccess"),
            "eUserEzsignprepaid": obj.get("eUserEzsignprepaid"),
            "bUserEzsigntrial": obj.get("bUserEzsigntrial"),
            "dtUserEzsignprepaidexpiration": obj.get("dtUserEzsignprepaidexpiration"),
            "a_pkiPermissionID": obj.get("a_pkiPermissionID"),
            "objUserReal": ActivesessionResponseCompoundUser.from_dict(obj["objUserReal"]) if obj.get("objUserReal") is not None else None,
            "objUserCloned": ActivesessionResponseCompoundUser.from_dict(obj["objUserCloned"]) if obj.get("objUserCloned") is not None else None,
            "objApikey": ActivesessionResponseCompoundApikey.from_dict(obj["objApikey"]) if obj.get("objApikey") is not None else None,
            "a_eModuleInternalname": obj.get("a_eModuleInternalname")
        })
        return _obj


