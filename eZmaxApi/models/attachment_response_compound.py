# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.1
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import ConfigDict
from typing import Any, ClassVar, Dict, List
from eZmaxApi.models.attachment_response import AttachmentResponse
from eZmaxApi.models.common_audit import CommonAudit
from eZmaxApi.models.field_e_attachment_documenttype import FieldEAttachmentDocumenttype
from eZmaxApi.models.field_e_attachment_privacy import FieldEAttachmentPrivacy
from eZmaxApi.models.field_e_attachment_type import FieldEAttachmentType
from eZmaxApi.models.field_e_attachment_verified import FieldEAttachmentVerified
from typing import Optional, Set
from typing_extensions import Self

class AttachmentResponseCompound(AttachmentResponse):
    """
    A Attachment Object
    """ # noqa: E501
    __properties: ClassVar[List[str]] = ["pkiAttachmentID", "fkiComputerID", "fkiAdjustmentID", "fkiAgentID", "fkiBankaccountID", "fkiBrokerID", "fkiCommissionadvanceID", "fkiCommunicationID", "fkiCustomerID", "fkiCustomertemplateID", "fkiDepositID", "fkiDeposittransitchequeID", "fkiElectronicfundstransferID", "fkiEmployeeID", "fkiExternalbrokerID", "fkiEzcomadvanceserverID", "fkiEzcomcompanyID", "fkiEzsigndocumentID", "fkiGhacqcontractID", "fkiInscriptionID", "fkiInscriptiontempID", "fkiInscriptionnotauthenticatedID", "fkiInvoiceID", "fkiBuyercontractID", "fkiFranchisebrokerID", "fkiFranchiseagenceID", "fkiFranchiseofficeID", "fkiFranchisefranchiseID", "fkiFranchisecomplaintID", "fkiLeadID", "fkiMarketingprogramID", "fkiMarketingfollowID", "fkiNotaryID", "fkiOfficetaxreportID", "fkiOtherincomeID", "fkiPaymentpreparationID", "fkiPurchaseID", "fkiSalaryID", "fkiSupplierID", "fkiTranqcontractID", "fkiTemplateID", "fkiInscriptionchecklistID", "fkiFolderID", "fkiRejectedoffertopurchaseID", "fkiDisclosureID", "fkiReconciliationID", "fkiEzsigndocumentIDReference", "eAttachmentDocumenttype", "sAttachmentName", "eAttachmentPrivacy", "fkiUserIDSpecific", "eAttachmentType", "iAttachmentSize", "iAttachmentEDMmoduleflag", "sAttachmentMD5", "bAttachmentDeleted", "bAttachmentValid", "eAttachmentVerified", "tAttachmentRejectioncomment", "fkiUserIDOwner", "objAudit"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AttachmentResponseCompound from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of obj_audit
        if self.obj_audit:
            _dict['objAudit'] = self.obj_audit.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AttachmentResponseCompound from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "pkiAttachmentID": obj.get("pkiAttachmentID"),
            "fkiComputerID": obj.get("fkiComputerID"),
            "fkiAdjustmentID": obj.get("fkiAdjustmentID"),
            "fkiAgentID": obj.get("fkiAgentID"),
            "fkiBankaccountID": obj.get("fkiBankaccountID"),
            "fkiBrokerID": obj.get("fkiBrokerID"),
            "fkiCommissionadvanceID": obj.get("fkiCommissionadvanceID"),
            "fkiCommunicationID": obj.get("fkiCommunicationID"),
            "fkiCustomerID": obj.get("fkiCustomerID"),
            "fkiCustomertemplateID": obj.get("fkiCustomertemplateID"),
            "fkiDepositID": obj.get("fkiDepositID"),
            "fkiDeposittransitchequeID": obj.get("fkiDeposittransitchequeID"),
            "fkiElectronicfundstransferID": obj.get("fkiElectronicfundstransferID"),
            "fkiEmployeeID": obj.get("fkiEmployeeID"),
            "fkiExternalbrokerID": obj.get("fkiExternalbrokerID"),
            "fkiEzcomadvanceserverID": obj.get("fkiEzcomadvanceserverID"),
            "fkiEzcomcompanyID": obj.get("fkiEzcomcompanyID"),
            "fkiEzsigndocumentID": obj.get("fkiEzsigndocumentID"),
            "fkiGhacqcontractID": obj.get("fkiGhacqcontractID"),
            "fkiInscriptionID": obj.get("fkiInscriptionID"),
            "fkiInscriptiontempID": obj.get("fkiInscriptiontempID"),
            "fkiInscriptionnotauthenticatedID": obj.get("fkiInscriptionnotauthenticatedID"),
            "fkiInvoiceID": obj.get("fkiInvoiceID"),
            "fkiBuyercontractID": obj.get("fkiBuyercontractID"),
            "fkiFranchisebrokerID": obj.get("fkiFranchisebrokerID"),
            "fkiFranchiseagenceID": obj.get("fkiFranchiseagenceID"),
            "fkiFranchiseofficeID": obj.get("fkiFranchiseofficeID"),
            "fkiFranchisefranchiseID": obj.get("fkiFranchisefranchiseID"),
            "fkiFranchisecomplaintID": obj.get("fkiFranchisecomplaintID"),
            "fkiLeadID": obj.get("fkiLeadID"),
            "fkiMarketingprogramID": obj.get("fkiMarketingprogramID"),
            "fkiMarketingfollowID": obj.get("fkiMarketingfollowID"),
            "fkiNotaryID": obj.get("fkiNotaryID"),
            "fkiOfficetaxreportID": obj.get("fkiOfficetaxreportID"),
            "fkiOtherincomeID": obj.get("fkiOtherincomeID"),
            "fkiPaymentpreparationID": obj.get("fkiPaymentpreparationID"),
            "fkiPurchaseID": obj.get("fkiPurchaseID"),
            "fkiSalaryID": obj.get("fkiSalaryID"),
            "fkiSupplierID": obj.get("fkiSupplierID"),
            "fkiTranqcontractID": obj.get("fkiTranqcontractID"),
            "fkiTemplateID": obj.get("fkiTemplateID"),
            "fkiInscriptionchecklistID": obj.get("fkiInscriptionchecklistID"),
            "fkiFolderID": obj.get("fkiFolderID"),
            "fkiRejectedoffertopurchaseID": obj.get("fkiRejectedoffertopurchaseID"),
            "fkiDisclosureID": obj.get("fkiDisclosureID"),
            "fkiReconciliationID": obj.get("fkiReconciliationID"),
            "fkiEzsigndocumentIDReference": obj.get("fkiEzsigndocumentIDReference"),
            "eAttachmentDocumenttype": obj.get("eAttachmentDocumenttype"),
            "sAttachmentName": obj.get("sAttachmentName"),
            "eAttachmentPrivacy": obj.get("eAttachmentPrivacy"),
            "fkiUserIDSpecific": obj.get("fkiUserIDSpecific"),
            "eAttachmentType": obj.get("eAttachmentType"),
            "iAttachmentSize": obj.get("iAttachmentSize"),
            "iAttachmentEDMmoduleflag": obj.get("iAttachmentEDMmoduleflag"),
            "sAttachmentMD5": obj.get("sAttachmentMD5"),
            "bAttachmentDeleted": obj.get("bAttachmentDeleted"),
            "bAttachmentValid": obj.get("bAttachmentValid"),
            "eAttachmentVerified": obj.get("eAttachmentVerified"),
            "tAttachmentRejectioncomment": obj.get("tAttachmentRejectioncomment"),
            "fkiUserIDOwner": obj.get("fkiUserIDOwner"),
            "objAudit": CommonAudit.from_dict(obj["objAudit"]) if obj.get("objAudit") is not None else None
        })
        return _obj


