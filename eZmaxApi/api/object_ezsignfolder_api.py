# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.0
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from pydantic import Field, StrictStr, conint, conlist

from typing import Any, Dict, Optional, Union

from eZmaxApi.models.ezsignfolder_archive_v1_response import EzsignfolderArchiveV1Response
from eZmaxApi.models.ezsignfolder_batch_download_v1_request import EzsignfolderBatchDownloadV1Request
from eZmaxApi.models.ezsignfolder_create_object_v1_request import EzsignfolderCreateObjectV1Request
from eZmaxApi.models.ezsignfolder_create_object_v1_response import EzsignfolderCreateObjectV1Response
from eZmaxApi.models.ezsignfolder_create_object_v2_request import EzsignfolderCreateObjectV2Request
from eZmaxApi.models.ezsignfolder_create_object_v2_response import EzsignfolderCreateObjectV2Response
from eZmaxApi.models.ezsignfolder_delete_object_v1_response import EzsignfolderDeleteObjectV1Response
from eZmaxApi.models.ezsignfolder_dispose_ezsignfolders_v1_request import EzsignfolderDisposeEzsignfoldersV1Request
from eZmaxApi.models.ezsignfolder_dispose_ezsignfolders_v1_response import EzsignfolderDisposeEzsignfoldersV1Response
from eZmaxApi.models.ezsignfolder_dispose_v1_response import EzsignfolderDisposeV1Response
from eZmaxApi.models.ezsignfolder_edit_object_v1_request import EzsignfolderEditObjectV1Request
from eZmaxApi.models.ezsignfolder_edit_object_v1_response import EzsignfolderEditObjectV1Response
from eZmaxApi.models.ezsignfolder_get_actionable_elements_v1_response import EzsignfolderGetActionableElementsV1Response
from eZmaxApi.models.ezsignfolder_get_communication_count_v1_response import EzsignfolderGetCommunicationCountV1Response
from eZmaxApi.models.ezsignfolder_get_communication_list_v1_response import EzsignfolderGetCommunicationListV1Response
from eZmaxApi.models.ezsignfolder_get_ezsigndocuments_v1_response import EzsignfolderGetEzsigndocumentsV1Response
from eZmaxApi.models.ezsignfolder_get_ezsignfoldersignerassociations_v1_response import EzsignfolderGetEzsignfoldersignerassociationsV1Response
from eZmaxApi.models.ezsignfolder_get_ezsignsignatures_automatic_v1_response import EzsignfolderGetEzsignsignaturesAutomaticV1Response
from eZmaxApi.models.ezsignfolder_get_forms_data_v1_response import EzsignfolderGetFormsDataV1Response
from eZmaxApi.models.ezsignfolder_get_list_v1_response import EzsignfolderGetListV1Response
from eZmaxApi.models.ezsignfolder_get_object_v1_response import EzsignfolderGetObjectV1Response
from eZmaxApi.models.ezsignfolder_get_object_v2_response import EzsignfolderGetObjectV2Response
from eZmaxApi.models.ezsignfolder_import_ezsignfoldersignerassociations_v1_request import EzsignfolderImportEzsignfoldersignerassociationsV1Request
from eZmaxApi.models.ezsignfolder_import_ezsignfoldersignerassociations_v1_response import EzsignfolderImportEzsignfoldersignerassociationsV1Response
from eZmaxApi.models.ezsignfolder_import_ezsigntemplatepackage_v1_request import EzsignfolderImportEzsigntemplatepackageV1Request
from eZmaxApi.models.ezsignfolder_import_ezsigntemplatepackage_v1_response import EzsignfolderImportEzsigntemplatepackageV1Response
from eZmaxApi.models.ezsignfolder_reorder_v1_request import EzsignfolderReorderV1Request
from eZmaxApi.models.ezsignfolder_reorder_v1_response import EzsignfolderReorderV1Response
from eZmaxApi.models.ezsignfolder_send_v1_request import EzsignfolderSendV1Request
from eZmaxApi.models.ezsignfolder_send_v1_response import EzsignfolderSendV1Response
from eZmaxApi.models.ezsignfolder_send_v2_request import EzsignfolderSendV2Request
from eZmaxApi.models.ezsignfolder_send_v2_response import EzsignfolderSendV2Response
from eZmaxApi.models.ezsignfolder_send_v3_request import EzsignfolderSendV3Request
from eZmaxApi.models.ezsignfolder_send_v3_response import EzsignfolderSendV3Response
from eZmaxApi.models.ezsignfolder_unsend_v1_response import EzsignfolderUnsendV1Response
from eZmaxApi.models.header_accept_language import HeaderAcceptLanguage

from eZmaxApi.api_client import ApiClient
from eZmaxApi.api_response import ApiResponse
from eZmaxApi.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class ObjectEzsignfolderApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def ezsignfolder_archive_v1(self, pki_ezsignfolder_id : conint(strict=True, ge=0), body : Dict[str, Any], **kwargs) -> EzsignfolderArchiveV1Response:  # noqa: E501
        """Archive the Ezsignfolder  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsignfolder_archive_v1(pki_ezsignfolder_id, body, async_req=True)
        >>> result = thread.get()

        :param pki_ezsignfolder_id: (required)
        :type pki_ezsignfolder_id: int
        :param body: (required)
        :type body: object
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: EzsignfolderArchiveV1Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the ezsignfolder_archive_v1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.ezsignfolder_archive_v1_with_http_info(pki_ezsignfolder_id, body, **kwargs)  # noqa: E501

    @validate_arguments
    def ezsignfolder_archive_v1_with_http_info(self, pki_ezsignfolder_id : conint(strict=True, ge=0), body : Dict[str, Any], **kwargs) -> ApiResponse:  # noqa: E501
        """Archive the Ezsignfolder  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsignfolder_archive_v1_with_http_info(pki_ezsignfolder_id, body, async_req=True)
        >>> result = thread.get()

        :param pki_ezsignfolder_id: (required)
        :type pki_ezsignfolder_id: int
        :param body: (required)
        :type body: object
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(EzsignfolderArchiveV1Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'pki_ezsignfolder_id',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ezsignfolder_archive_v1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['pki_ezsignfolder_id']:
            _path_params['pkiEzsignfolderID'] = _params['pki_ezsignfolder_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['Authorization']  # noqa: E501

        _response_types_map = {
            '200': "EzsignfolderArchiveV1Response",
            '404': "CommonResponseError",
            '422': "CommonResponseError",
        }

        return self.api_client.call_api(
            '/1/object/ezsignfolder/{pkiEzsignfolderID}/archive', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def ezsignfolder_batch_download_v1(self, pki_ezsignfolder_id : conint(strict=True, ge=0), ezsignfolder_batch_download_v1_request : EzsignfolderBatchDownloadV1Request, **kwargs) -> bytearray:  # noqa: E501
        """Download multiples files from an Ezsignfolder  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsignfolder_batch_download_v1(pki_ezsignfolder_id, ezsignfolder_batch_download_v1_request, async_req=True)
        >>> result = thread.get()

        :param pki_ezsignfolder_id: (required)
        :type pki_ezsignfolder_id: int
        :param ezsignfolder_batch_download_v1_request: (required)
        :type ezsignfolder_batch_download_v1_request: EzsignfolderBatchDownloadV1Request
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: bytearray
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the ezsignfolder_batch_download_v1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.ezsignfolder_batch_download_v1_with_http_info(pki_ezsignfolder_id, ezsignfolder_batch_download_v1_request, **kwargs)  # noqa: E501

    @validate_arguments
    def ezsignfolder_batch_download_v1_with_http_info(self, pki_ezsignfolder_id : conint(strict=True, ge=0), ezsignfolder_batch_download_v1_request : EzsignfolderBatchDownloadV1Request, **kwargs) -> ApiResponse:  # noqa: E501
        """Download multiples files from an Ezsignfolder  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsignfolder_batch_download_v1_with_http_info(pki_ezsignfolder_id, ezsignfolder_batch_download_v1_request, async_req=True)
        >>> result = thread.get()

        :param pki_ezsignfolder_id: (required)
        :type pki_ezsignfolder_id: int
        :param ezsignfolder_batch_download_v1_request: (required)
        :type ezsignfolder_batch_download_v1_request: EzsignfolderBatchDownloadV1Request
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(bytearray, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'pki_ezsignfolder_id',
            'ezsignfolder_batch_download_v1_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ezsignfolder_batch_download_v1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['pki_ezsignfolder_id']:
            _path_params['pkiEzsignfolderID'] = _params['pki_ezsignfolder_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['ezsignfolder_batch_download_v1_request'] is not None:
            _body_params = _params['ezsignfolder_batch_download_v1_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/zip', 'application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['Authorization']  # noqa: E501

        _response_types_map = {
            '200': "bytearray",
            '404': "CommonResponseError",
            '406': "CommonResponseError",
            '422': "CommonResponseError",
        }

        return self.api_client.call_api(
            '/1/object/ezsignfolder/{pkiEzsignfolderID}/batchDownload', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def ezsignfolder_create_object_v1(self, ezsignfolder_create_object_v1_request : conlist(EzsignfolderCreateObjectV1Request), **kwargs) -> EzsignfolderCreateObjectV1Response:  # noqa: E501
        """(Deprecated) Create a new Ezsignfolder  # noqa: E501

        The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsignfolder_create_object_v1(ezsignfolder_create_object_v1_request, async_req=True)
        >>> result = thread.get()

        :param ezsignfolder_create_object_v1_request: (required)
        :type ezsignfolder_create_object_v1_request: List[EzsignfolderCreateObjectV1Request]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: EzsignfolderCreateObjectV1Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the ezsignfolder_create_object_v1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.ezsignfolder_create_object_v1_with_http_info(ezsignfolder_create_object_v1_request, **kwargs)  # noqa: E501

    @validate_arguments
    def ezsignfolder_create_object_v1_with_http_info(self, ezsignfolder_create_object_v1_request : conlist(EzsignfolderCreateObjectV1Request), **kwargs) -> ApiResponse:  # noqa: E501
        """(Deprecated) Create a new Ezsignfolder  # noqa: E501

        The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsignfolder_create_object_v1_with_http_info(ezsignfolder_create_object_v1_request, async_req=True)
        >>> result = thread.get()

        :param ezsignfolder_create_object_v1_request: (required)
        :type ezsignfolder_create_object_v1_request: List[EzsignfolderCreateObjectV1Request]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(EzsignfolderCreateObjectV1Response, status_code(int), headers(HTTPHeaderDict))
        """

        warnings.warn("POST /1/object/ezsignfolder is deprecated.", DeprecationWarning)

        _params = locals()

        _all_params = [
            'ezsignfolder_create_object_v1_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ezsignfolder_create_object_v1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['ezsignfolder_create_object_v1_request'] is not None:
            _body_params = _params['ezsignfolder_create_object_v1_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['Authorization']  # noqa: E501

        _response_types_map = {
            '201': "EzsignfolderCreateObjectV1Response",
        }

        return self.api_client.call_api(
            '/1/object/ezsignfolder', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def ezsignfolder_create_object_v2(self, ezsignfolder_create_object_v2_request : EzsignfolderCreateObjectV2Request, **kwargs) -> EzsignfolderCreateObjectV2Response:  # noqa: E501
        """Create a new Ezsignfolder  # noqa: E501

        The endpoint allows to create one or many elements at once.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsignfolder_create_object_v2(ezsignfolder_create_object_v2_request, async_req=True)
        >>> result = thread.get()

        :param ezsignfolder_create_object_v2_request: (required)
        :type ezsignfolder_create_object_v2_request: EzsignfolderCreateObjectV2Request
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: EzsignfolderCreateObjectV2Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the ezsignfolder_create_object_v2_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.ezsignfolder_create_object_v2_with_http_info(ezsignfolder_create_object_v2_request, **kwargs)  # noqa: E501

    @validate_arguments
    def ezsignfolder_create_object_v2_with_http_info(self, ezsignfolder_create_object_v2_request : EzsignfolderCreateObjectV2Request, **kwargs) -> ApiResponse:  # noqa: E501
        """Create a new Ezsignfolder  # noqa: E501

        The endpoint allows to create one or many elements at once.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsignfolder_create_object_v2_with_http_info(ezsignfolder_create_object_v2_request, async_req=True)
        >>> result = thread.get()

        :param ezsignfolder_create_object_v2_request: (required)
        :type ezsignfolder_create_object_v2_request: EzsignfolderCreateObjectV2Request
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(EzsignfolderCreateObjectV2Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'ezsignfolder_create_object_v2_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ezsignfolder_create_object_v2" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['ezsignfolder_create_object_v2_request'] is not None:
            _body_params = _params['ezsignfolder_create_object_v2_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['Authorization']  # noqa: E501

        _response_types_map = {
            '201': "EzsignfolderCreateObjectV2Response",
        }

        return self.api_client.call_api(
            '/2/object/ezsignfolder', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def ezsignfolder_delete_object_v1(self, pki_ezsignfolder_id : conint(strict=True, ge=0), **kwargs) -> EzsignfolderDeleteObjectV1Response:  # noqa: E501
        """Delete an existing Ezsignfolder  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsignfolder_delete_object_v1(pki_ezsignfolder_id, async_req=True)
        >>> result = thread.get()

        :param pki_ezsignfolder_id: (required)
        :type pki_ezsignfolder_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: EzsignfolderDeleteObjectV1Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the ezsignfolder_delete_object_v1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.ezsignfolder_delete_object_v1_with_http_info(pki_ezsignfolder_id, **kwargs)  # noqa: E501

    @validate_arguments
    def ezsignfolder_delete_object_v1_with_http_info(self, pki_ezsignfolder_id : conint(strict=True, ge=0), **kwargs) -> ApiResponse:  # noqa: E501
        """Delete an existing Ezsignfolder  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsignfolder_delete_object_v1_with_http_info(pki_ezsignfolder_id, async_req=True)
        >>> result = thread.get()

        :param pki_ezsignfolder_id: (required)
        :type pki_ezsignfolder_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(EzsignfolderDeleteObjectV1Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'pki_ezsignfolder_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ezsignfolder_delete_object_v1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['pki_ezsignfolder_id']:
            _path_params['pkiEzsignfolderID'] = _params['pki_ezsignfolder_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Authorization']  # noqa: E501

        _response_types_map = {
            '200': "EzsignfolderDeleteObjectV1Response",
            '404': "CommonResponseError",
            '422': "CommonResponseError",
        }

        return self.api_client.call_api(
            '/1/object/ezsignfolder/{pkiEzsignfolderID}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def ezsignfolder_dispose_ezsignfolders_v1(self, ezsignfolder_dispose_ezsignfolders_v1_request : EzsignfolderDisposeEzsignfoldersV1Request, **kwargs) -> EzsignfolderDisposeEzsignfoldersV1Response:  # noqa: E501
        """Dispose Ezsignfolders  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsignfolder_dispose_ezsignfolders_v1(ezsignfolder_dispose_ezsignfolders_v1_request, async_req=True)
        >>> result = thread.get()

        :param ezsignfolder_dispose_ezsignfolders_v1_request: (required)
        :type ezsignfolder_dispose_ezsignfolders_v1_request: EzsignfolderDisposeEzsignfoldersV1Request
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: EzsignfolderDisposeEzsignfoldersV1Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the ezsignfolder_dispose_ezsignfolders_v1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.ezsignfolder_dispose_ezsignfolders_v1_with_http_info(ezsignfolder_dispose_ezsignfolders_v1_request, **kwargs)  # noqa: E501

    @validate_arguments
    def ezsignfolder_dispose_ezsignfolders_v1_with_http_info(self, ezsignfolder_dispose_ezsignfolders_v1_request : EzsignfolderDisposeEzsignfoldersV1Request, **kwargs) -> ApiResponse:  # noqa: E501
        """Dispose Ezsignfolders  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsignfolder_dispose_ezsignfolders_v1_with_http_info(ezsignfolder_dispose_ezsignfolders_v1_request, async_req=True)
        >>> result = thread.get()

        :param ezsignfolder_dispose_ezsignfolders_v1_request: (required)
        :type ezsignfolder_dispose_ezsignfolders_v1_request: EzsignfolderDisposeEzsignfoldersV1Request
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(EzsignfolderDisposeEzsignfoldersV1Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'ezsignfolder_dispose_ezsignfolders_v1_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ezsignfolder_dispose_ezsignfolders_v1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['ezsignfolder_dispose_ezsignfolders_v1_request'] is not None:
            _body_params = _params['ezsignfolder_dispose_ezsignfolders_v1_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['Authorization']  # noqa: E501

        _response_types_map = {
            '200': "EzsignfolderDisposeEzsignfoldersV1Response",
            '404': "CommonResponseError",
            '422': "CommonResponseError",
        }

        return self.api_client.call_api(
            '/1/object/ezsignfolder/disposeEzsignfolders', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def ezsignfolder_dispose_v1(self, pki_ezsignfolder_id : conint(strict=True, ge=0), body : Dict[str, Any], **kwargs) -> EzsignfolderDisposeV1Response:  # noqa: E501
        """Dispose the Ezsignfolder  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsignfolder_dispose_v1(pki_ezsignfolder_id, body, async_req=True)
        >>> result = thread.get()

        :param pki_ezsignfolder_id: (required)
        :type pki_ezsignfolder_id: int
        :param body: (required)
        :type body: object
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: EzsignfolderDisposeV1Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the ezsignfolder_dispose_v1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.ezsignfolder_dispose_v1_with_http_info(pki_ezsignfolder_id, body, **kwargs)  # noqa: E501

    @validate_arguments
    def ezsignfolder_dispose_v1_with_http_info(self, pki_ezsignfolder_id : conint(strict=True, ge=0), body : Dict[str, Any], **kwargs) -> ApiResponse:  # noqa: E501
        """Dispose the Ezsignfolder  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsignfolder_dispose_v1_with_http_info(pki_ezsignfolder_id, body, async_req=True)
        >>> result = thread.get()

        :param pki_ezsignfolder_id: (required)
        :type pki_ezsignfolder_id: int
        :param body: (required)
        :type body: object
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(EzsignfolderDisposeV1Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'pki_ezsignfolder_id',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ezsignfolder_dispose_v1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['pki_ezsignfolder_id']:
            _path_params['pkiEzsignfolderID'] = _params['pki_ezsignfolder_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['Authorization']  # noqa: E501

        _response_types_map = {
            '200': "EzsignfolderDisposeV1Response",
            '404': "CommonResponseError",
            '422': "CommonResponseError",
        }

        return self.api_client.call_api(
            '/1/object/ezsignfolder/{pkiEzsignfolderID}/dispose', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def ezsignfolder_edit_object_v1(self, pki_ezsignfolder_id : conint(strict=True, ge=0), ezsignfolder_edit_object_v1_request : EzsignfolderEditObjectV1Request, **kwargs) -> EzsignfolderEditObjectV1Response:  # noqa: E501
        """Edit an existing Ezsignfolder  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsignfolder_edit_object_v1(pki_ezsignfolder_id, ezsignfolder_edit_object_v1_request, async_req=True)
        >>> result = thread.get()

        :param pki_ezsignfolder_id: (required)
        :type pki_ezsignfolder_id: int
        :param ezsignfolder_edit_object_v1_request: (required)
        :type ezsignfolder_edit_object_v1_request: EzsignfolderEditObjectV1Request
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: EzsignfolderEditObjectV1Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the ezsignfolder_edit_object_v1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.ezsignfolder_edit_object_v1_with_http_info(pki_ezsignfolder_id, ezsignfolder_edit_object_v1_request, **kwargs)  # noqa: E501

    @validate_arguments
    def ezsignfolder_edit_object_v1_with_http_info(self, pki_ezsignfolder_id : conint(strict=True, ge=0), ezsignfolder_edit_object_v1_request : EzsignfolderEditObjectV1Request, **kwargs) -> ApiResponse:  # noqa: E501
        """Edit an existing Ezsignfolder  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsignfolder_edit_object_v1_with_http_info(pki_ezsignfolder_id, ezsignfolder_edit_object_v1_request, async_req=True)
        >>> result = thread.get()

        :param pki_ezsignfolder_id: (required)
        :type pki_ezsignfolder_id: int
        :param ezsignfolder_edit_object_v1_request: (required)
        :type ezsignfolder_edit_object_v1_request: EzsignfolderEditObjectV1Request
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(EzsignfolderEditObjectV1Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'pki_ezsignfolder_id',
            'ezsignfolder_edit_object_v1_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ezsignfolder_edit_object_v1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['pki_ezsignfolder_id']:
            _path_params['pkiEzsignfolderID'] = _params['pki_ezsignfolder_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['ezsignfolder_edit_object_v1_request'] is not None:
            _body_params = _params['ezsignfolder_edit_object_v1_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['Authorization']  # noqa: E501

        _response_types_map = {
            '200': "EzsignfolderEditObjectV1Response",
            '404': "CommonResponseError",
            '422': "CommonResponseError",
        }

        return self.api_client.call_api(
            '/1/object/ezsignfolder/{pkiEzsignfolderID}', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def ezsignfolder_get_actionable_elements_v1(self, pki_ezsignfolder_id : conint(strict=True, ge=0), **kwargs) -> EzsignfolderGetActionableElementsV1Response:  # noqa: E501
        """Retrieve actionable elements for the Ezsignfolder  # noqa: E501

        Return the Ezsignsignatures that can be signed and Ezsignformfieldgroups that can be filled by the current user at the current step in the process  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsignfolder_get_actionable_elements_v1(pki_ezsignfolder_id, async_req=True)
        >>> result = thread.get()

        :param pki_ezsignfolder_id: (required)
        :type pki_ezsignfolder_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: EzsignfolderGetActionableElementsV1Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the ezsignfolder_get_actionable_elements_v1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.ezsignfolder_get_actionable_elements_v1_with_http_info(pki_ezsignfolder_id, **kwargs)  # noqa: E501

    @validate_arguments
    def ezsignfolder_get_actionable_elements_v1_with_http_info(self, pki_ezsignfolder_id : conint(strict=True, ge=0), **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve actionable elements for the Ezsignfolder  # noqa: E501

        Return the Ezsignsignatures that can be signed and Ezsignformfieldgroups that can be filled by the current user at the current step in the process  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsignfolder_get_actionable_elements_v1_with_http_info(pki_ezsignfolder_id, async_req=True)
        >>> result = thread.get()

        :param pki_ezsignfolder_id: (required)
        :type pki_ezsignfolder_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(EzsignfolderGetActionableElementsV1Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'pki_ezsignfolder_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ezsignfolder_get_actionable_elements_v1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['pki_ezsignfolder_id']:
            _path_params['pkiEzsignfolderID'] = _params['pki_ezsignfolder_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Authorization']  # noqa: E501

        _response_types_map = {
            '200': "EzsignfolderGetActionableElementsV1Response",
            '404': "CommonResponseError",
            '422': "CommonResponseError",
        }

        return self.api_client.call_api(
            '/1/object/ezsignfolder/{pkiEzsignfolderID}/getActionableElements', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def ezsignfolder_get_communication_count_v1(self, pki_ezsignfolder_id : conint(strict=True, ge=0), **kwargs) -> EzsignfolderGetCommunicationCountV1Response:  # noqa: E501
        """Retrieve Communication count  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsignfolder_get_communication_count_v1(pki_ezsignfolder_id, async_req=True)
        >>> result = thread.get()

        :param pki_ezsignfolder_id: (required)
        :type pki_ezsignfolder_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: EzsignfolderGetCommunicationCountV1Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the ezsignfolder_get_communication_count_v1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.ezsignfolder_get_communication_count_v1_with_http_info(pki_ezsignfolder_id, **kwargs)  # noqa: E501

    @validate_arguments
    def ezsignfolder_get_communication_count_v1_with_http_info(self, pki_ezsignfolder_id : conint(strict=True, ge=0), **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Communication count  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsignfolder_get_communication_count_v1_with_http_info(pki_ezsignfolder_id, async_req=True)
        >>> result = thread.get()

        :param pki_ezsignfolder_id: (required)
        :type pki_ezsignfolder_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(EzsignfolderGetCommunicationCountV1Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'pki_ezsignfolder_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ezsignfolder_get_communication_count_v1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['pki_ezsignfolder_id']:
            _path_params['pkiEzsignfolderID'] = _params['pki_ezsignfolder_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Authorization']  # noqa: E501

        _response_types_map = {
            '200': "EzsignfolderGetCommunicationCountV1Response",
            '404': "CommonResponseError",
        }

        return self.api_client.call_api(
            '/1/object/ezsignfolder/{pkiEzsignfolderID}/getCommunicationCount', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def ezsignfolder_get_communication_list_v1(self, pki_ezsignfolder_id : conint(strict=True, ge=0), **kwargs) -> EzsignfolderGetCommunicationListV1Response:  # noqa: E501
        """Retrieve Communication list  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsignfolder_get_communication_list_v1(pki_ezsignfolder_id, async_req=True)
        >>> result = thread.get()

        :param pki_ezsignfolder_id: (required)
        :type pki_ezsignfolder_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: EzsignfolderGetCommunicationListV1Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the ezsignfolder_get_communication_list_v1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.ezsignfolder_get_communication_list_v1_with_http_info(pki_ezsignfolder_id, **kwargs)  # noqa: E501

    @validate_arguments
    def ezsignfolder_get_communication_list_v1_with_http_info(self, pki_ezsignfolder_id : conint(strict=True, ge=0), **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Communication list  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsignfolder_get_communication_list_v1_with_http_info(pki_ezsignfolder_id, async_req=True)
        >>> result = thread.get()

        :param pki_ezsignfolder_id: (required)
        :type pki_ezsignfolder_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(EzsignfolderGetCommunicationListV1Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'pki_ezsignfolder_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ezsignfolder_get_communication_list_v1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['pki_ezsignfolder_id']:
            _path_params['pkiEzsignfolderID'] = _params['pki_ezsignfolder_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Authorization']  # noqa: E501

        _response_types_map = {
            '200': "EzsignfolderGetCommunicationListV1Response",
            '404': "CommonResponseError",
        }

        return self.api_client.call_api(
            '/1/object/ezsignfolder/{pkiEzsignfolderID}/getCommunicationList', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def ezsignfolder_get_ezsigndocuments_v1(self, pki_ezsignfolder_id : conint(strict=True, ge=0), **kwargs) -> EzsignfolderGetEzsigndocumentsV1Response:  # noqa: E501
        """Retrieve an existing Ezsignfolder's Ezsigndocuments  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsignfolder_get_ezsigndocuments_v1(pki_ezsignfolder_id, async_req=True)
        >>> result = thread.get()

        :param pki_ezsignfolder_id: (required)
        :type pki_ezsignfolder_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: EzsignfolderGetEzsigndocumentsV1Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the ezsignfolder_get_ezsigndocuments_v1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.ezsignfolder_get_ezsigndocuments_v1_with_http_info(pki_ezsignfolder_id, **kwargs)  # noqa: E501

    @validate_arguments
    def ezsignfolder_get_ezsigndocuments_v1_with_http_info(self, pki_ezsignfolder_id : conint(strict=True, ge=0), **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve an existing Ezsignfolder's Ezsigndocuments  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsignfolder_get_ezsigndocuments_v1_with_http_info(pki_ezsignfolder_id, async_req=True)
        >>> result = thread.get()

        :param pki_ezsignfolder_id: (required)
        :type pki_ezsignfolder_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(EzsignfolderGetEzsigndocumentsV1Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'pki_ezsignfolder_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ezsignfolder_get_ezsigndocuments_v1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['pki_ezsignfolder_id']:
            _path_params['pkiEzsignfolderID'] = _params['pki_ezsignfolder_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Authorization']  # noqa: E501

        _response_types_map = {
            '200': "EzsignfolderGetEzsigndocumentsV1Response",
            '404': "CommonResponseError",
        }

        return self.api_client.call_api(
            '/1/object/ezsignfolder/{pkiEzsignfolderID}/getEzsigndocuments', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def ezsignfolder_get_ezsignfoldersignerassociations_v1(self, pki_ezsignfolder_id : conint(strict=True, ge=0), **kwargs) -> EzsignfolderGetEzsignfoldersignerassociationsV1Response:  # noqa: E501
        """Retrieve an existing Ezsignfolder's Ezsignfoldersignerassociations  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsignfolder_get_ezsignfoldersignerassociations_v1(pki_ezsignfolder_id, async_req=True)
        >>> result = thread.get()

        :param pki_ezsignfolder_id: (required)
        :type pki_ezsignfolder_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: EzsignfolderGetEzsignfoldersignerassociationsV1Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the ezsignfolder_get_ezsignfoldersignerassociations_v1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.ezsignfolder_get_ezsignfoldersignerassociations_v1_with_http_info(pki_ezsignfolder_id, **kwargs)  # noqa: E501

    @validate_arguments
    def ezsignfolder_get_ezsignfoldersignerassociations_v1_with_http_info(self, pki_ezsignfolder_id : conint(strict=True, ge=0), **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve an existing Ezsignfolder's Ezsignfoldersignerassociations  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsignfolder_get_ezsignfoldersignerassociations_v1_with_http_info(pki_ezsignfolder_id, async_req=True)
        >>> result = thread.get()

        :param pki_ezsignfolder_id: (required)
        :type pki_ezsignfolder_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(EzsignfolderGetEzsignfoldersignerassociationsV1Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'pki_ezsignfolder_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ezsignfolder_get_ezsignfoldersignerassociations_v1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['pki_ezsignfolder_id']:
            _path_params['pkiEzsignfolderID'] = _params['pki_ezsignfolder_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Authorization']  # noqa: E501

        _response_types_map = {
            '200': "EzsignfolderGetEzsignfoldersignerassociationsV1Response",
            '404': "CommonResponseError",
        }

        return self.api_client.call_api(
            '/1/object/ezsignfolder/{pkiEzsignfolderID}/getEzsignfoldersignerassociations', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def ezsignfolder_get_ezsignsignatures_automatic_v1(self, pki_ezsignfolder_id : conint(strict=True, ge=0), **kwargs) -> EzsignfolderGetEzsignsignaturesAutomaticV1Response:  # noqa: E501
        """Retrieve an existing Ezsignfolder's automatic Ezsignsignatures  # noqa: E501

        Return the Ezsignsignatures that can be signed by the current user at the current step in the process  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsignfolder_get_ezsignsignatures_automatic_v1(pki_ezsignfolder_id, async_req=True)
        >>> result = thread.get()

        :param pki_ezsignfolder_id: (required)
        :type pki_ezsignfolder_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: EzsignfolderGetEzsignsignaturesAutomaticV1Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the ezsignfolder_get_ezsignsignatures_automatic_v1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.ezsignfolder_get_ezsignsignatures_automatic_v1_with_http_info(pki_ezsignfolder_id, **kwargs)  # noqa: E501

    @validate_arguments
    def ezsignfolder_get_ezsignsignatures_automatic_v1_with_http_info(self, pki_ezsignfolder_id : conint(strict=True, ge=0), **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve an existing Ezsignfolder's automatic Ezsignsignatures  # noqa: E501

        Return the Ezsignsignatures that can be signed by the current user at the current step in the process  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsignfolder_get_ezsignsignatures_automatic_v1_with_http_info(pki_ezsignfolder_id, async_req=True)
        >>> result = thread.get()

        :param pki_ezsignfolder_id: (required)
        :type pki_ezsignfolder_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(EzsignfolderGetEzsignsignaturesAutomaticV1Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'pki_ezsignfolder_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ezsignfolder_get_ezsignsignatures_automatic_v1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['pki_ezsignfolder_id']:
            _path_params['pkiEzsignfolderID'] = _params['pki_ezsignfolder_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Authorization']  # noqa: E501

        _response_types_map = {
            '200': "EzsignfolderGetEzsignsignaturesAutomaticV1Response",
            '404': "CommonResponseError",
        }

        return self.api_client.call_api(
            '/1/object/ezsignfolder/{pkiEzsignfolderID}/getEzsignsignaturesAutomatic', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def ezsignfolder_get_forms_data_v1(self, pki_ezsignfolder_id : conint(strict=True, ge=0), **kwargs) -> EzsignfolderGetFormsDataV1Response:  # noqa: E501
        """Retrieve an existing Ezsignfolder's forms data  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsignfolder_get_forms_data_v1(pki_ezsignfolder_id, async_req=True)
        >>> result = thread.get()

        :param pki_ezsignfolder_id: (required)
        :type pki_ezsignfolder_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: EzsignfolderGetFormsDataV1Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the ezsignfolder_get_forms_data_v1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.ezsignfolder_get_forms_data_v1_with_http_info(pki_ezsignfolder_id, **kwargs)  # noqa: E501

    @validate_arguments
    def ezsignfolder_get_forms_data_v1_with_http_info(self, pki_ezsignfolder_id : conint(strict=True, ge=0), **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve an existing Ezsignfolder's forms data  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsignfolder_get_forms_data_v1_with_http_info(pki_ezsignfolder_id, async_req=True)
        >>> result = thread.get()

        :param pki_ezsignfolder_id: (required)
        :type pki_ezsignfolder_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(EzsignfolderGetFormsDataV1Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'pki_ezsignfolder_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ezsignfolder_get_forms_data_v1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['pki_ezsignfolder_id']:
            _path_params['pkiEzsignfolderID'] = _params['pki_ezsignfolder_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/zip'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Authorization']  # noqa: E501

        _response_types_map = {
            '200': "EzsignfolderGetFormsDataV1Response",
            '404': "CommonResponseError",
            '406': "CommonResponseError",
            '422': "CommonResponseError",
        }

        return self.api_client.call_api(
            '/1/object/ezsignfolder/{pkiEzsignfolderID}/getFormsData', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def ezsignfolder_get_list_v1(self, e_order_by : Annotated[Optional[StrictStr], Field(description="Specify how you want the results to be sorted")] = None, i_row_max : Optional[conint(strict=True, le=10000, ge=1)] = None, i_row_offset : Optional[conint(strict=True, ge=0)] = None, accept_language : Optional[HeaderAcceptLanguage] = None, s_filter : Optional[StrictStr] = None, **kwargs) -> EzsignfolderGetListV1Response:  # noqa: E501
        """Retrieve Ezsignfolder list  # noqa: E501

        Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |---|---| | eEzsignfolderStep | Unsent<br>Sent<br>PartiallySigned<br>Expired<br>Completed<br>Archived<br>Disposed| | eEzsignfoldertypePrivacylevel | User<br>Usergroup |  Advanced filters that can be used in query parameter *sFilter*:  | Variable | |---| | sContactFirstname | | sContactLastname | | sEzsigndocumentName |  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsignfolder_get_list_v1(e_order_by, i_row_max, i_row_offset, accept_language, s_filter, async_req=True)
        >>> result = thread.get()

        :param e_order_by: Specify how you want the results to be sorted
        :type e_order_by: str
        :param i_row_max:
        :type i_row_max: int
        :param i_row_offset:
        :type i_row_offset: int
        :param accept_language:
        :type accept_language: HeaderAcceptLanguage
        :param s_filter:
        :type s_filter: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: EzsignfolderGetListV1Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the ezsignfolder_get_list_v1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.ezsignfolder_get_list_v1_with_http_info(e_order_by, i_row_max, i_row_offset, accept_language, s_filter, **kwargs)  # noqa: E501

    @validate_arguments
    def ezsignfolder_get_list_v1_with_http_info(self, e_order_by : Annotated[Optional[StrictStr], Field(description="Specify how you want the results to be sorted")] = None, i_row_max : Optional[conint(strict=True, le=10000, ge=1)] = None, i_row_offset : Optional[conint(strict=True, ge=0)] = None, accept_language : Optional[HeaderAcceptLanguage] = None, s_filter : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Ezsignfolder list  # noqa: E501

        Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |---|---| | eEzsignfolderStep | Unsent<br>Sent<br>PartiallySigned<br>Expired<br>Completed<br>Archived<br>Disposed| | eEzsignfoldertypePrivacylevel | User<br>Usergroup |  Advanced filters that can be used in query parameter *sFilter*:  | Variable | |---| | sContactFirstname | | sContactLastname | | sEzsigndocumentName |  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsignfolder_get_list_v1_with_http_info(e_order_by, i_row_max, i_row_offset, accept_language, s_filter, async_req=True)
        >>> result = thread.get()

        :param e_order_by: Specify how you want the results to be sorted
        :type e_order_by: str
        :param i_row_max:
        :type i_row_max: int
        :param i_row_offset:
        :type i_row_offset: int
        :param accept_language:
        :type accept_language: HeaderAcceptLanguage
        :param s_filter:
        :type s_filter: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(EzsignfolderGetListV1Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'e_order_by',
            'i_row_max',
            'i_row_offset',
            'accept_language',
            's_filter'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ezsignfolder_get_list_v1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('e_order_by') is not None:  # noqa: E501
            _query_params.append(('eOrderBy', _params['e_order_by']))

        if _params.get('i_row_max') is not None:  # noqa: E501
            _query_params.append(('iRowMax', _params['i_row_max']))

        if _params.get('i_row_offset') is not None:  # noqa: E501
            _query_params.append(('iRowOffset', _params['i_row_offset']))

        if _params.get('s_filter') is not None:  # noqa: E501
            _query_params.append(('sFilter', _params['s_filter']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['accept_language']:
            _header_params['Accept-Language'] = _params['accept_language']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Authorization']  # noqa: E501

        _response_types_map = {
            '200': "EzsignfolderGetListV1Response",
            '406': "CommonResponseError",
        }

        return self.api_client.call_api(
            '/1/object/ezsignfolder/getList', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def ezsignfolder_get_object_v1(self, pki_ezsignfolder_id : conint(strict=True, ge=0), **kwargs) -> EzsignfolderGetObjectV1Response:  # noqa: E501
        """(Deprecated) Retrieve an existing Ezsignfolder  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsignfolder_get_object_v1(pki_ezsignfolder_id, async_req=True)
        >>> result = thread.get()

        :param pki_ezsignfolder_id: (required)
        :type pki_ezsignfolder_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: EzsignfolderGetObjectV1Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the ezsignfolder_get_object_v1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.ezsignfolder_get_object_v1_with_http_info(pki_ezsignfolder_id, **kwargs)  # noqa: E501

    @validate_arguments
    def ezsignfolder_get_object_v1_with_http_info(self, pki_ezsignfolder_id : conint(strict=True, ge=0), **kwargs) -> ApiResponse:  # noqa: E501
        """(Deprecated) Retrieve an existing Ezsignfolder  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsignfolder_get_object_v1_with_http_info(pki_ezsignfolder_id, async_req=True)
        >>> result = thread.get()

        :param pki_ezsignfolder_id: (required)
        :type pki_ezsignfolder_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(EzsignfolderGetObjectV1Response, status_code(int), headers(HTTPHeaderDict))
        """

        warnings.warn("GET /1/object/ezsignfolder/{pkiEzsignfolderID} is deprecated.", DeprecationWarning)

        _params = locals()

        _all_params = [
            'pki_ezsignfolder_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ezsignfolder_get_object_v1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['pki_ezsignfolder_id']:
            _path_params['pkiEzsignfolderID'] = _params['pki_ezsignfolder_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Authorization']  # noqa: E501

        _response_types_map = {
            '200': "EzsignfolderGetObjectV1Response",
            '404': "CommonResponseError",
        }

        return self.api_client.call_api(
            '/1/object/ezsignfolder/{pkiEzsignfolderID}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def ezsignfolder_get_object_v2(self, pki_ezsignfolder_id : conint(strict=True, ge=0), **kwargs) -> EzsignfolderGetObjectV2Response:  # noqa: E501
        """Retrieve an existing Ezsignfolder  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsignfolder_get_object_v2(pki_ezsignfolder_id, async_req=True)
        >>> result = thread.get()

        :param pki_ezsignfolder_id: (required)
        :type pki_ezsignfolder_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: EzsignfolderGetObjectV2Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the ezsignfolder_get_object_v2_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.ezsignfolder_get_object_v2_with_http_info(pki_ezsignfolder_id, **kwargs)  # noqa: E501

    @validate_arguments
    def ezsignfolder_get_object_v2_with_http_info(self, pki_ezsignfolder_id : conint(strict=True, ge=0), **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve an existing Ezsignfolder  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsignfolder_get_object_v2_with_http_info(pki_ezsignfolder_id, async_req=True)
        >>> result = thread.get()

        :param pki_ezsignfolder_id: (required)
        :type pki_ezsignfolder_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(EzsignfolderGetObjectV2Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'pki_ezsignfolder_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ezsignfolder_get_object_v2" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['pki_ezsignfolder_id']:
            _path_params['pkiEzsignfolderID'] = _params['pki_ezsignfolder_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Authorization']  # noqa: E501

        _response_types_map = {
            '200': "EzsignfolderGetObjectV2Response",
            '404': "CommonResponseError",
        }

        return self.api_client.call_api(
            '/2/object/ezsignfolder/{pkiEzsignfolderID}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def ezsignfolder_import_ezsignfoldersignerassociations_v1(self, pki_ezsignfolder_id : conint(strict=True, ge=0), ezsignfolder_import_ezsignfoldersignerassociations_v1_request : EzsignfolderImportEzsignfoldersignerassociationsV1Request, **kwargs) -> EzsignfolderImportEzsignfoldersignerassociationsV1Response:  # noqa: E501
        """Import an existing Ezsignfoldersignerassociation into this Ezsignfolder  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsignfolder_import_ezsignfoldersignerassociations_v1(pki_ezsignfolder_id, ezsignfolder_import_ezsignfoldersignerassociations_v1_request, async_req=True)
        >>> result = thread.get()

        :param pki_ezsignfolder_id: (required)
        :type pki_ezsignfolder_id: int
        :param ezsignfolder_import_ezsignfoldersignerassociations_v1_request: (required)
        :type ezsignfolder_import_ezsignfoldersignerassociations_v1_request: EzsignfolderImportEzsignfoldersignerassociationsV1Request
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: EzsignfolderImportEzsignfoldersignerassociationsV1Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the ezsignfolder_import_ezsignfoldersignerassociations_v1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.ezsignfolder_import_ezsignfoldersignerassociations_v1_with_http_info(pki_ezsignfolder_id, ezsignfolder_import_ezsignfoldersignerassociations_v1_request, **kwargs)  # noqa: E501

    @validate_arguments
    def ezsignfolder_import_ezsignfoldersignerassociations_v1_with_http_info(self, pki_ezsignfolder_id : conint(strict=True, ge=0), ezsignfolder_import_ezsignfoldersignerassociations_v1_request : EzsignfolderImportEzsignfoldersignerassociationsV1Request, **kwargs) -> ApiResponse:  # noqa: E501
        """Import an existing Ezsignfoldersignerassociation into this Ezsignfolder  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsignfolder_import_ezsignfoldersignerassociations_v1_with_http_info(pki_ezsignfolder_id, ezsignfolder_import_ezsignfoldersignerassociations_v1_request, async_req=True)
        >>> result = thread.get()

        :param pki_ezsignfolder_id: (required)
        :type pki_ezsignfolder_id: int
        :param ezsignfolder_import_ezsignfoldersignerassociations_v1_request: (required)
        :type ezsignfolder_import_ezsignfoldersignerassociations_v1_request: EzsignfolderImportEzsignfoldersignerassociationsV1Request
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(EzsignfolderImportEzsignfoldersignerassociationsV1Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'pki_ezsignfolder_id',
            'ezsignfolder_import_ezsignfoldersignerassociations_v1_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ezsignfolder_import_ezsignfoldersignerassociations_v1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['pki_ezsignfolder_id']:
            _path_params['pkiEzsignfolderID'] = _params['pki_ezsignfolder_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['ezsignfolder_import_ezsignfoldersignerassociations_v1_request'] is not None:
            _body_params = _params['ezsignfolder_import_ezsignfoldersignerassociations_v1_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['Authorization']  # noqa: E501

        _response_types_map = {
            '200': "EzsignfolderImportEzsignfoldersignerassociationsV1Response",
            '403': "CommonResponseError",
            '404': "CommonResponseError",
            '422': "CommonResponseError",
        }

        return self.api_client.call_api(
            '/1/object/ezsignfolder/{pkiEzsignfolderID}/importEzsignfoldersignerassociations', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def ezsignfolder_import_ezsigntemplatepackage_v1(self, pki_ezsignfolder_id : conint(strict=True, ge=0), ezsignfolder_import_ezsigntemplatepackage_v1_request : EzsignfolderImportEzsigntemplatepackageV1Request, **kwargs) -> EzsignfolderImportEzsigntemplatepackageV1Response:  # noqa: E501
        """Import an Ezsigntemplatepackage in the Ezsignfolder.  # noqa: E501

        This endpoint imports all of the Ezsigntemplates from the Ezsigntemplatepackage into the Ezsignfolder as Ezsigndocuments.  This allows to automatically apply all the Ezsigntemplateformfieldgroups and Ezsigntemplatesignatures on the newly created Ezsigndocuments in a single step.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsignfolder_import_ezsigntemplatepackage_v1(pki_ezsignfolder_id, ezsignfolder_import_ezsigntemplatepackage_v1_request, async_req=True)
        >>> result = thread.get()

        :param pki_ezsignfolder_id: (required)
        :type pki_ezsignfolder_id: int
        :param ezsignfolder_import_ezsigntemplatepackage_v1_request: (required)
        :type ezsignfolder_import_ezsigntemplatepackage_v1_request: EzsignfolderImportEzsigntemplatepackageV1Request
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: EzsignfolderImportEzsigntemplatepackageV1Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the ezsignfolder_import_ezsigntemplatepackage_v1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.ezsignfolder_import_ezsigntemplatepackage_v1_with_http_info(pki_ezsignfolder_id, ezsignfolder_import_ezsigntemplatepackage_v1_request, **kwargs)  # noqa: E501

    @validate_arguments
    def ezsignfolder_import_ezsigntemplatepackage_v1_with_http_info(self, pki_ezsignfolder_id : conint(strict=True, ge=0), ezsignfolder_import_ezsigntemplatepackage_v1_request : EzsignfolderImportEzsigntemplatepackageV1Request, **kwargs) -> ApiResponse:  # noqa: E501
        """Import an Ezsigntemplatepackage in the Ezsignfolder.  # noqa: E501

        This endpoint imports all of the Ezsigntemplates from the Ezsigntemplatepackage into the Ezsignfolder as Ezsigndocuments.  This allows to automatically apply all the Ezsigntemplateformfieldgroups and Ezsigntemplatesignatures on the newly created Ezsigndocuments in a single step.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsignfolder_import_ezsigntemplatepackage_v1_with_http_info(pki_ezsignfolder_id, ezsignfolder_import_ezsigntemplatepackage_v1_request, async_req=True)
        >>> result = thread.get()

        :param pki_ezsignfolder_id: (required)
        :type pki_ezsignfolder_id: int
        :param ezsignfolder_import_ezsigntemplatepackage_v1_request: (required)
        :type ezsignfolder_import_ezsigntemplatepackage_v1_request: EzsignfolderImportEzsigntemplatepackageV1Request
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(EzsignfolderImportEzsigntemplatepackageV1Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'pki_ezsignfolder_id',
            'ezsignfolder_import_ezsigntemplatepackage_v1_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ezsignfolder_import_ezsigntemplatepackage_v1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['pki_ezsignfolder_id']:
            _path_params['pkiEzsignfolderID'] = _params['pki_ezsignfolder_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['ezsignfolder_import_ezsigntemplatepackage_v1_request'] is not None:
            _body_params = _params['ezsignfolder_import_ezsigntemplatepackage_v1_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['Authorization']  # noqa: E501

        _response_types_map = {
            '200': "EzsignfolderImportEzsigntemplatepackageV1Response",
            '404': "CommonResponseError",
            '422': "CommonResponseError",
        }

        return self.api_client.call_api(
            '/1/object/ezsignfolder/{pkiEzsignfolderID}/importEzsigntemplatepackage', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def ezsignfolder_reorder_v1(self, pki_ezsignfolder_id : conint(strict=True, ge=0), ezsignfolder_reorder_v1_request : EzsignfolderReorderV1Request, **kwargs) -> EzsignfolderReorderV1Response:  # noqa: E501
        """Reorder Ezsigndocuments in the Ezsignfolder  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsignfolder_reorder_v1(pki_ezsignfolder_id, ezsignfolder_reorder_v1_request, async_req=True)
        >>> result = thread.get()

        :param pki_ezsignfolder_id: (required)
        :type pki_ezsignfolder_id: int
        :param ezsignfolder_reorder_v1_request: (required)
        :type ezsignfolder_reorder_v1_request: EzsignfolderReorderV1Request
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: EzsignfolderReorderV1Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the ezsignfolder_reorder_v1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.ezsignfolder_reorder_v1_with_http_info(pki_ezsignfolder_id, ezsignfolder_reorder_v1_request, **kwargs)  # noqa: E501

    @validate_arguments
    def ezsignfolder_reorder_v1_with_http_info(self, pki_ezsignfolder_id : conint(strict=True, ge=0), ezsignfolder_reorder_v1_request : EzsignfolderReorderV1Request, **kwargs) -> ApiResponse:  # noqa: E501
        """Reorder Ezsigndocuments in the Ezsignfolder  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsignfolder_reorder_v1_with_http_info(pki_ezsignfolder_id, ezsignfolder_reorder_v1_request, async_req=True)
        >>> result = thread.get()

        :param pki_ezsignfolder_id: (required)
        :type pki_ezsignfolder_id: int
        :param ezsignfolder_reorder_v1_request: (required)
        :type ezsignfolder_reorder_v1_request: EzsignfolderReorderV1Request
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(EzsignfolderReorderV1Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'pki_ezsignfolder_id',
            'ezsignfolder_reorder_v1_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ezsignfolder_reorder_v1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['pki_ezsignfolder_id']:
            _path_params['pkiEzsignfolderID'] = _params['pki_ezsignfolder_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['ezsignfolder_reorder_v1_request'] is not None:
            _body_params = _params['ezsignfolder_reorder_v1_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['Authorization']  # noqa: E501

        _response_types_map = {
            '200': "EzsignfolderReorderV1Response",
            '404': "CommonResponseError",
            '422': "CommonResponseError",
        }

        return self.api_client.call_api(
            '/1/object/ezsignfolder/{pkiEzsignfolderID}/reorder', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def ezsignfolder_send_v1(self, pki_ezsignfolder_id : conint(strict=True, ge=0), ezsignfolder_send_v1_request : EzsignfolderSendV1Request, **kwargs) -> EzsignfolderSendV1Response:  # noqa: E501
        """(Deprecated) Send the Ezsignfolder to the signatories for signature  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsignfolder_send_v1(pki_ezsignfolder_id, ezsignfolder_send_v1_request, async_req=True)
        >>> result = thread.get()

        :param pki_ezsignfolder_id: (required)
        :type pki_ezsignfolder_id: int
        :param ezsignfolder_send_v1_request: (required)
        :type ezsignfolder_send_v1_request: EzsignfolderSendV1Request
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: EzsignfolderSendV1Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the ezsignfolder_send_v1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.ezsignfolder_send_v1_with_http_info(pki_ezsignfolder_id, ezsignfolder_send_v1_request, **kwargs)  # noqa: E501

    @validate_arguments
    def ezsignfolder_send_v1_with_http_info(self, pki_ezsignfolder_id : conint(strict=True, ge=0), ezsignfolder_send_v1_request : EzsignfolderSendV1Request, **kwargs) -> ApiResponse:  # noqa: E501
        """(Deprecated) Send the Ezsignfolder to the signatories for signature  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsignfolder_send_v1_with_http_info(pki_ezsignfolder_id, ezsignfolder_send_v1_request, async_req=True)
        >>> result = thread.get()

        :param pki_ezsignfolder_id: (required)
        :type pki_ezsignfolder_id: int
        :param ezsignfolder_send_v1_request: (required)
        :type ezsignfolder_send_v1_request: EzsignfolderSendV1Request
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(EzsignfolderSendV1Response, status_code(int), headers(HTTPHeaderDict))
        """

        warnings.warn("POST /1/object/ezsignfolder/{pkiEzsignfolderID}/send is deprecated.", DeprecationWarning)

        _params = locals()

        _all_params = [
            'pki_ezsignfolder_id',
            'ezsignfolder_send_v1_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ezsignfolder_send_v1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['pki_ezsignfolder_id']:
            _path_params['pkiEzsignfolderID'] = _params['pki_ezsignfolder_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['ezsignfolder_send_v1_request'] is not None:
            _body_params = _params['ezsignfolder_send_v1_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['Authorization']  # noqa: E501

        _response_types_map = {
            '200': "EzsignfolderSendV1Response",
            '404': "CommonResponseError",
            '422': "CommonResponseError",
        }

        return self.api_client.call_api(
            '/1/object/ezsignfolder/{pkiEzsignfolderID}/send', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def ezsignfolder_send_v2(self, pki_ezsignfolder_id : conint(strict=True, ge=0), ezsignfolder_send_v2_request : EzsignfolderSendV2Request, **kwargs) -> EzsignfolderSendV2Response:  # noqa: E501
        """(Deprecated) Send the Ezsignfolder to the signatories for signature  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsignfolder_send_v2(pki_ezsignfolder_id, ezsignfolder_send_v2_request, async_req=True)
        >>> result = thread.get()

        :param pki_ezsignfolder_id: (required)
        :type pki_ezsignfolder_id: int
        :param ezsignfolder_send_v2_request: (required)
        :type ezsignfolder_send_v2_request: EzsignfolderSendV2Request
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: EzsignfolderSendV2Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the ezsignfolder_send_v2_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.ezsignfolder_send_v2_with_http_info(pki_ezsignfolder_id, ezsignfolder_send_v2_request, **kwargs)  # noqa: E501

    @validate_arguments
    def ezsignfolder_send_v2_with_http_info(self, pki_ezsignfolder_id : conint(strict=True, ge=0), ezsignfolder_send_v2_request : EzsignfolderSendV2Request, **kwargs) -> ApiResponse:  # noqa: E501
        """(Deprecated) Send the Ezsignfolder to the signatories for signature  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsignfolder_send_v2_with_http_info(pki_ezsignfolder_id, ezsignfolder_send_v2_request, async_req=True)
        >>> result = thread.get()

        :param pki_ezsignfolder_id: (required)
        :type pki_ezsignfolder_id: int
        :param ezsignfolder_send_v2_request: (required)
        :type ezsignfolder_send_v2_request: EzsignfolderSendV2Request
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(EzsignfolderSendV2Response, status_code(int), headers(HTTPHeaderDict))
        """

        warnings.warn("POST /2/object/ezsignfolder/{pkiEzsignfolderID}/send is deprecated.", DeprecationWarning)

        _params = locals()

        _all_params = [
            'pki_ezsignfolder_id',
            'ezsignfolder_send_v2_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ezsignfolder_send_v2" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['pki_ezsignfolder_id']:
            _path_params['pkiEzsignfolderID'] = _params['pki_ezsignfolder_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['ezsignfolder_send_v2_request'] is not None:
            _body_params = _params['ezsignfolder_send_v2_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['Authorization']  # noqa: E501

        _response_types_map = {
            '200': "EzsignfolderSendV2Response",
            '404': "CommonResponseError",
            '422': "CommonResponseError",
        }

        return self.api_client.call_api(
            '/2/object/ezsignfolder/{pkiEzsignfolderID}/send', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def ezsignfolder_send_v3(self, pki_ezsignfolder_id : conint(strict=True, ge=0), ezsignfolder_send_v3_request : EzsignfolderSendV3Request, **kwargs) -> EzsignfolderSendV3Response:  # noqa: E501
        """Send the Ezsignfolder to the signatories for signature  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsignfolder_send_v3(pki_ezsignfolder_id, ezsignfolder_send_v3_request, async_req=True)
        >>> result = thread.get()

        :param pki_ezsignfolder_id: (required)
        :type pki_ezsignfolder_id: int
        :param ezsignfolder_send_v3_request: (required)
        :type ezsignfolder_send_v3_request: EzsignfolderSendV3Request
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: EzsignfolderSendV3Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the ezsignfolder_send_v3_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.ezsignfolder_send_v3_with_http_info(pki_ezsignfolder_id, ezsignfolder_send_v3_request, **kwargs)  # noqa: E501

    @validate_arguments
    def ezsignfolder_send_v3_with_http_info(self, pki_ezsignfolder_id : conint(strict=True, ge=0), ezsignfolder_send_v3_request : EzsignfolderSendV3Request, **kwargs) -> ApiResponse:  # noqa: E501
        """Send the Ezsignfolder to the signatories for signature  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsignfolder_send_v3_with_http_info(pki_ezsignfolder_id, ezsignfolder_send_v3_request, async_req=True)
        >>> result = thread.get()

        :param pki_ezsignfolder_id: (required)
        :type pki_ezsignfolder_id: int
        :param ezsignfolder_send_v3_request: (required)
        :type ezsignfolder_send_v3_request: EzsignfolderSendV3Request
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(EzsignfolderSendV3Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'pki_ezsignfolder_id',
            'ezsignfolder_send_v3_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ezsignfolder_send_v3" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['pki_ezsignfolder_id']:
            _path_params['pkiEzsignfolderID'] = _params['pki_ezsignfolder_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['ezsignfolder_send_v3_request'] is not None:
            _body_params = _params['ezsignfolder_send_v3_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['Authorization']  # noqa: E501

        _response_types_map = {
            '200': "EzsignfolderSendV3Response",
            '404': "CommonResponseError",
            '422': "CommonResponseError",
        }

        return self.api_client.call_api(
            '/3/object/ezsignfolder/{pkiEzsignfolderID}/send', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def ezsignfolder_unsend_v1(self, pki_ezsignfolder_id : conint(strict=True, ge=0), body : Dict[str, Any], **kwargs) -> EzsignfolderUnsendV1Response:  # noqa: E501
        """Unsend the Ezsignfolder  # noqa: E501

        Once an Ezsignfolder has been sent to signatories, it cannot be modified.  Using this endpoint, you can unsend the Ezsignfolder and make it modifiable again.  Signatories will receive an email informing them the signature process was aborted and they might receive a new invitation to sign.  ⚠️ Warning: Any signature previously made by signatories on \"Non-completed\" Ezsigndocuments will be lost.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsignfolder_unsend_v1(pki_ezsignfolder_id, body, async_req=True)
        >>> result = thread.get()

        :param pki_ezsignfolder_id: (required)
        :type pki_ezsignfolder_id: int
        :param body: (required)
        :type body: object
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: EzsignfolderUnsendV1Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the ezsignfolder_unsend_v1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.ezsignfolder_unsend_v1_with_http_info(pki_ezsignfolder_id, body, **kwargs)  # noqa: E501

    @validate_arguments
    def ezsignfolder_unsend_v1_with_http_info(self, pki_ezsignfolder_id : conint(strict=True, ge=0), body : Dict[str, Any], **kwargs) -> ApiResponse:  # noqa: E501
        """Unsend the Ezsignfolder  # noqa: E501

        Once an Ezsignfolder has been sent to signatories, it cannot be modified.  Using this endpoint, you can unsend the Ezsignfolder and make it modifiable again.  Signatories will receive an email informing them the signature process was aborted and they might receive a new invitation to sign.  ⚠️ Warning: Any signature previously made by signatories on \"Non-completed\" Ezsigndocuments will be lost.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsignfolder_unsend_v1_with_http_info(pki_ezsignfolder_id, body, async_req=True)
        >>> result = thread.get()

        :param pki_ezsignfolder_id: (required)
        :type pki_ezsignfolder_id: int
        :param body: (required)
        :type body: object
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(EzsignfolderUnsendV1Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'pki_ezsignfolder_id',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ezsignfolder_unsend_v1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['pki_ezsignfolder_id']:
            _path_params['pkiEzsignfolderID'] = _params['pki_ezsignfolder_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['Authorization']  # noqa: E501

        _response_types_map = {
            '200': "EzsignfolderUnsendV1Response",
            '404': "CommonResponseError",
            '422': "CommonResponseError",
        }

        return self.api_client.call_api(
            '/1/object/ezsignfolder/{pkiEzsignfolderID}/unsend', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
