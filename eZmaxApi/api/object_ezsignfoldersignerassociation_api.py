# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.0
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from pydantic import conint, conlist

from typing import Any, Dict

from eZmaxApi.models.ezsignfoldersignerassociation_create_object_v1_request import EzsignfoldersignerassociationCreateObjectV1Request
from eZmaxApi.models.ezsignfoldersignerassociation_create_object_v1_response import EzsignfoldersignerassociationCreateObjectV1Response
from eZmaxApi.models.ezsignfoldersignerassociation_create_object_v2_request import EzsignfoldersignerassociationCreateObjectV2Request
from eZmaxApi.models.ezsignfoldersignerassociation_create_object_v2_response import EzsignfoldersignerassociationCreateObjectV2Response
from eZmaxApi.models.ezsignfoldersignerassociation_delete_object_v1_response import EzsignfoldersignerassociationDeleteObjectV1Response
from eZmaxApi.models.ezsignfoldersignerassociation_edit_object_v1_request import EzsignfoldersignerassociationEditObjectV1Request
from eZmaxApi.models.ezsignfoldersignerassociation_edit_object_v1_response import EzsignfoldersignerassociationEditObjectV1Response
from eZmaxApi.models.ezsignfoldersignerassociation_force_disconnect_v1_response import EzsignfoldersignerassociationForceDisconnectV1Response
from eZmaxApi.models.ezsignfoldersignerassociation_get_in_person_login_url_v1_response import EzsignfoldersignerassociationGetInPersonLoginUrlV1Response
from eZmaxApi.models.ezsignfoldersignerassociation_get_object_v1_response import EzsignfoldersignerassociationGetObjectV1Response
from eZmaxApi.models.ezsignfoldersignerassociation_get_object_v2_response import EzsignfoldersignerassociationGetObjectV2Response
from eZmaxApi.models.ezsignfoldersignerassociation_patch_object_v1_request import EzsignfoldersignerassociationPatchObjectV1Request
from eZmaxApi.models.ezsignfoldersignerassociation_patch_object_v1_response import EzsignfoldersignerassociationPatchObjectV1Response

from eZmaxApi.api_client import ApiClient
from eZmaxApi.api_response import ApiResponse
from eZmaxApi.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class ObjectEzsignfoldersignerassociationApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def ezsignfoldersignerassociation_create_object_v1(self, ezsignfoldersignerassociation_create_object_v1_request : conlist(EzsignfoldersignerassociationCreateObjectV1Request), **kwargs) -> EzsignfoldersignerassociationCreateObjectV1Response:  # noqa: E501
        """(Deprecated) Create a new Ezsignfoldersignerassociation  # noqa: E501

        The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsignfoldersignerassociation_create_object_v1(ezsignfoldersignerassociation_create_object_v1_request, async_req=True)
        >>> result = thread.get()

        :param ezsignfoldersignerassociation_create_object_v1_request: (required)
        :type ezsignfoldersignerassociation_create_object_v1_request: List[EzsignfoldersignerassociationCreateObjectV1Request]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: EzsignfoldersignerassociationCreateObjectV1Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the ezsignfoldersignerassociation_create_object_v1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.ezsignfoldersignerassociation_create_object_v1_with_http_info(ezsignfoldersignerassociation_create_object_v1_request, **kwargs)  # noqa: E501

    @validate_arguments
    def ezsignfoldersignerassociation_create_object_v1_with_http_info(self, ezsignfoldersignerassociation_create_object_v1_request : conlist(EzsignfoldersignerassociationCreateObjectV1Request), **kwargs) -> ApiResponse:  # noqa: E501
        """(Deprecated) Create a new Ezsignfoldersignerassociation  # noqa: E501

        The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsignfoldersignerassociation_create_object_v1_with_http_info(ezsignfoldersignerassociation_create_object_v1_request, async_req=True)
        >>> result = thread.get()

        :param ezsignfoldersignerassociation_create_object_v1_request: (required)
        :type ezsignfoldersignerassociation_create_object_v1_request: List[EzsignfoldersignerassociationCreateObjectV1Request]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(EzsignfoldersignerassociationCreateObjectV1Response, status_code(int), headers(HTTPHeaderDict))
        """

        warnings.warn("POST /1/object/ezsignfoldersignerassociation is deprecated.", DeprecationWarning)

        _params = locals()

        _all_params = [
            'ezsignfoldersignerassociation_create_object_v1_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ezsignfoldersignerassociation_create_object_v1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['ezsignfoldersignerassociation_create_object_v1_request'] is not None:
            _body_params = _params['ezsignfoldersignerassociation_create_object_v1_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['Authorization']  # noqa: E501

        _response_types_map = {
            '201': "EzsignfoldersignerassociationCreateObjectV1Response",
        }

        return self.api_client.call_api(
            '/1/object/ezsignfoldersignerassociation', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def ezsignfoldersignerassociation_create_object_v2(self, ezsignfoldersignerassociation_create_object_v2_request : EzsignfoldersignerassociationCreateObjectV2Request, **kwargs) -> EzsignfoldersignerassociationCreateObjectV2Response:  # noqa: E501
        """Create a new Ezsignfoldersignerassociation  # noqa: E501

        The endpoint allows to create one or many elements at once.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsignfoldersignerassociation_create_object_v2(ezsignfoldersignerassociation_create_object_v2_request, async_req=True)
        >>> result = thread.get()

        :param ezsignfoldersignerassociation_create_object_v2_request: (required)
        :type ezsignfoldersignerassociation_create_object_v2_request: EzsignfoldersignerassociationCreateObjectV2Request
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: EzsignfoldersignerassociationCreateObjectV2Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the ezsignfoldersignerassociation_create_object_v2_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.ezsignfoldersignerassociation_create_object_v2_with_http_info(ezsignfoldersignerassociation_create_object_v2_request, **kwargs)  # noqa: E501

    @validate_arguments
    def ezsignfoldersignerassociation_create_object_v2_with_http_info(self, ezsignfoldersignerassociation_create_object_v2_request : EzsignfoldersignerassociationCreateObjectV2Request, **kwargs) -> ApiResponse:  # noqa: E501
        """Create a new Ezsignfoldersignerassociation  # noqa: E501

        The endpoint allows to create one or many elements at once.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsignfoldersignerassociation_create_object_v2_with_http_info(ezsignfoldersignerassociation_create_object_v2_request, async_req=True)
        >>> result = thread.get()

        :param ezsignfoldersignerassociation_create_object_v2_request: (required)
        :type ezsignfoldersignerassociation_create_object_v2_request: EzsignfoldersignerassociationCreateObjectV2Request
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(EzsignfoldersignerassociationCreateObjectV2Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'ezsignfoldersignerassociation_create_object_v2_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ezsignfoldersignerassociation_create_object_v2" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['ezsignfoldersignerassociation_create_object_v2_request'] is not None:
            _body_params = _params['ezsignfoldersignerassociation_create_object_v2_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['Authorization']  # noqa: E501

        _response_types_map = {
            '201': "EzsignfoldersignerassociationCreateObjectV2Response",
        }

        return self.api_client.call_api(
            '/2/object/ezsignfoldersignerassociation', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def ezsignfoldersignerassociation_delete_object_v1(self, pki_ezsignfoldersignerassociation_id : conint(strict=True, ge=0), **kwargs) -> EzsignfoldersignerassociationDeleteObjectV1Response:  # noqa: E501
        """Delete an existing Ezsignfoldersignerassociation  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsignfoldersignerassociation_delete_object_v1(pki_ezsignfoldersignerassociation_id, async_req=True)
        >>> result = thread.get()

        :param pki_ezsignfoldersignerassociation_id: (required)
        :type pki_ezsignfoldersignerassociation_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: EzsignfoldersignerassociationDeleteObjectV1Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the ezsignfoldersignerassociation_delete_object_v1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.ezsignfoldersignerassociation_delete_object_v1_with_http_info(pki_ezsignfoldersignerassociation_id, **kwargs)  # noqa: E501

    @validate_arguments
    def ezsignfoldersignerassociation_delete_object_v1_with_http_info(self, pki_ezsignfoldersignerassociation_id : conint(strict=True, ge=0), **kwargs) -> ApiResponse:  # noqa: E501
        """Delete an existing Ezsignfoldersignerassociation  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsignfoldersignerassociation_delete_object_v1_with_http_info(pki_ezsignfoldersignerassociation_id, async_req=True)
        >>> result = thread.get()

        :param pki_ezsignfoldersignerassociation_id: (required)
        :type pki_ezsignfoldersignerassociation_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(EzsignfoldersignerassociationDeleteObjectV1Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'pki_ezsignfoldersignerassociation_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ezsignfoldersignerassociation_delete_object_v1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['pki_ezsignfoldersignerassociation_id']:
            _path_params['pkiEzsignfoldersignerassociationID'] = _params['pki_ezsignfoldersignerassociation_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Authorization']  # noqa: E501

        _response_types_map = {
            '200': "EzsignfoldersignerassociationDeleteObjectV1Response",
            '404': "CommonResponseError",
            '422': "CommonResponseError",
        }

        return self.api_client.call_api(
            '/1/object/ezsignfoldersignerassociation/{pkiEzsignfoldersignerassociationID}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def ezsignfoldersignerassociation_edit_object_v1(self, pki_ezsignfoldersignerassociation_id : conint(strict=True, ge=0), ezsignfoldersignerassociation_edit_object_v1_request : EzsignfoldersignerassociationEditObjectV1Request, **kwargs) -> EzsignfoldersignerassociationEditObjectV1Response:  # noqa: E501
        """Edit an existing Ezsignfoldersignerassociation  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsignfoldersignerassociation_edit_object_v1(pki_ezsignfoldersignerassociation_id, ezsignfoldersignerassociation_edit_object_v1_request, async_req=True)
        >>> result = thread.get()

        :param pki_ezsignfoldersignerassociation_id: (required)
        :type pki_ezsignfoldersignerassociation_id: int
        :param ezsignfoldersignerassociation_edit_object_v1_request: (required)
        :type ezsignfoldersignerassociation_edit_object_v1_request: EzsignfoldersignerassociationEditObjectV1Request
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: EzsignfoldersignerassociationEditObjectV1Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the ezsignfoldersignerassociation_edit_object_v1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.ezsignfoldersignerassociation_edit_object_v1_with_http_info(pki_ezsignfoldersignerassociation_id, ezsignfoldersignerassociation_edit_object_v1_request, **kwargs)  # noqa: E501

    @validate_arguments
    def ezsignfoldersignerassociation_edit_object_v1_with_http_info(self, pki_ezsignfoldersignerassociation_id : conint(strict=True, ge=0), ezsignfoldersignerassociation_edit_object_v1_request : EzsignfoldersignerassociationEditObjectV1Request, **kwargs) -> ApiResponse:  # noqa: E501
        """Edit an existing Ezsignfoldersignerassociation  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsignfoldersignerassociation_edit_object_v1_with_http_info(pki_ezsignfoldersignerassociation_id, ezsignfoldersignerassociation_edit_object_v1_request, async_req=True)
        >>> result = thread.get()

        :param pki_ezsignfoldersignerassociation_id: (required)
        :type pki_ezsignfoldersignerassociation_id: int
        :param ezsignfoldersignerassociation_edit_object_v1_request: (required)
        :type ezsignfoldersignerassociation_edit_object_v1_request: EzsignfoldersignerassociationEditObjectV1Request
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(EzsignfoldersignerassociationEditObjectV1Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'pki_ezsignfoldersignerassociation_id',
            'ezsignfoldersignerassociation_edit_object_v1_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ezsignfoldersignerassociation_edit_object_v1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['pki_ezsignfoldersignerassociation_id']:
            _path_params['pkiEzsignfoldersignerassociationID'] = _params['pki_ezsignfoldersignerassociation_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['ezsignfoldersignerassociation_edit_object_v1_request'] is not None:
            _body_params = _params['ezsignfoldersignerassociation_edit_object_v1_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['Authorization']  # noqa: E501

        _response_types_map = {
            '200': "EzsignfoldersignerassociationEditObjectV1Response",
            '404': "CommonResponseError",
            '422': "CommonResponseError",
        }

        return self.api_client.call_api(
            '/1/object/ezsignfoldersignerassociation/{pkiEzsignfoldersignerassociationID}', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def ezsignfoldersignerassociation_force_disconnect_v1(self, pki_ezsignfoldersignerassociation_id : conint(strict=True, ge=0), body : Dict[str, Any], **kwargs) -> EzsignfoldersignerassociationForceDisconnectV1Response:  # noqa: E501
        """Disconnects the Ezsignfoldersignerassociation  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsignfoldersignerassociation_force_disconnect_v1(pki_ezsignfoldersignerassociation_id, body, async_req=True)
        >>> result = thread.get()

        :param pki_ezsignfoldersignerassociation_id: (required)
        :type pki_ezsignfoldersignerassociation_id: int
        :param body: (required)
        :type body: object
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: EzsignfoldersignerassociationForceDisconnectV1Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the ezsignfoldersignerassociation_force_disconnect_v1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.ezsignfoldersignerassociation_force_disconnect_v1_with_http_info(pki_ezsignfoldersignerassociation_id, body, **kwargs)  # noqa: E501

    @validate_arguments
    def ezsignfoldersignerassociation_force_disconnect_v1_with_http_info(self, pki_ezsignfoldersignerassociation_id : conint(strict=True, ge=0), body : Dict[str, Any], **kwargs) -> ApiResponse:  # noqa: E501
        """Disconnects the Ezsignfoldersignerassociation  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsignfoldersignerassociation_force_disconnect_v1_with_http_info(pki_ezsignfoldersignerassociation_id, body, async_req=True)
        >>> result = thread.get()

        :param pki_ezsignfoldersignerassociation_id: (required)
        :type pki_ezsignfoldersignerassociation_id: int
        :param body: (required)
        :type body: object
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(EzsignfoldersignerassociationForceDisconnectV1Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'pki_ezsignfoldersignerassociation_id',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ezsignfoldersignerassociation_force_disconnect_v1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['pki_ezsignfoldersignerassociation_id']:
            _path_params['pkiEzsignfoldersignerassociationID'] = _params['pki_ezsignfoldersignerassociation_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['Authorization']  # noqa: E501

        _response_types_map = {
            '200': "EzsignfoldersignerassociationForceDisconnectV1Response",
            '404': "CommonResponseError",
            '422': "CommonResponseError",
        }

        return self.api_client.call_api(
            '/1/object/ezsignfoldersignerassociation/{pkiEzsignfoldersignerassociationID}/forceDisconnect', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def ezsignfoldersignerassociation_get_in_person_login_url_v1(self, pki_ezsignfoldersignerassociation_id : conint(strict=True, ge=0), **kwargs) -> EzsignfoldersignerassociationGetInPersonLoginUrlV1Response:  # noqa: E501
        """Retrieve a Login Url to allow In-Person signing  # noqa: E501

        This endpoint returns a Login Url that can be used in a browser or embedded in an I-Frame to allow in person signing.  The signer Login type must be configured as In-Person.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsignfoldersignerassociation_get_in_person_login_url_v1(pki_ezsignfoldersignerassociation_id, async_req=True)
        >>> result = thread.get()

        :param pki_ezsignfoldersignerassociation_id: (required)
        :type pki_ezsignfoldersignerassociation_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: EzsignfoldersignerassociationGetInPersonLoginUrlV1Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the ezsignfoldersignerassociation_get_in_person_login_url_v1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.ezsignfoldersignerassociation_get_in_person_login_url_v1_with_http_info(pki_ezsignfoldersignerassociation_id, **kwargs)  # noqa: E501

    @validate_arguments
    def ezsignfoldersignerassociation_get_in_person_login_url_v1_with_http_info(self, pki_ezsignfoldersignerassociation_id : conint(strict=True, ge=0), **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve a Login Url to allow In-Person signing  # noqa: E501

        This endpoint returns a Login Url that can be used in a browser or embedded in an I-Frame to allow in person signing.  The signer Login type must be configured as In-Person.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsignfoldersignerassociation_get_in_person_login_url_v1_with_http_info(pki_ezsignfoldersignerassociation_id, async_req=True)
        >>> result = thread.get()

        :param pki_ezsignfoldersignerassociation_id: (required)
        :type pki_ezsignfoldersignerassociation_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(EzsignfoldersignerassociationGetInPersonLoginUrlV1Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'pki_ezsignfoldersignerassociation_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ezsignfoldersignerassociation_get_in_person_login_url_v1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['pki_ezsignfoldersignerassociation_id']:
            _path_params['pkiEzsignfoldersignerassociationID'] = _params['pki_ezsignfoldersignerassociation_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Authorization']  # noqa: E501

        _response_types_map = {
            '200': "EzsignfoldersignerassociationGetInPersonLoginUrlV1Response",
            '404': "CommonResponseError",
            '422': "CommonResponseError",
        }

        return self.api_client.call_api(
            '/1/object/ezsignfoldersignerassociation/{pkiEzsignfoldersignerassociationID}/getInPersonLoginUrl', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def ezsignfoldersignerassociation_get_object_v1(self, pki_ezsignfoldersignerassociation_id : conint(strict=True, ge=0), **kwargs) -> EzsignfoldersignerassociationGetObjectV1Response:  # noqa: E501
        """(Deprecated) Retrieve an existing Ezsignfoldersignerassociation  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsignfoldersignerassociation_get_object_v1(pki_ezsignfoldersignerassociation_id, async_req=True)
        >>> result = thread.get()

        :param pki_ezsignfoldersignerassociation_id: (required)
        :type pki_ezsignfoldersignerassociation_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: EzsignfoldersignerassociationGetObjectV1Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the ezsignfoldersignerassociation_get_object_v1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.ezsignfoldersignerassociation_get_object_v1_with_http_info(pki_ezsignfoldersignerassociation_id, **kwargs)  # noqa: E501

    @validate_arguments
    def ezsignfoldersignerassociation_get_object_v1_with_http_info(self, pki_ezsignfoldersignerassociation_id : conint(strict=True, ge=0), **kwargs) -> ApiResponse:  # noqa: E501
        """(Deprecated) Retrieve an existing Ezsignfoldersignerassociation  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsignfoldersignerassociation_get_object_v1_with_http_info(pki_ezsignfoldersignerassociation_id, async_req=True)
        >>> result = thread.get()

        :param pki_ezsignfoldersignerassociation_id: (required)
        :type pki_ezsignfoldersignerassociation_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(EzsignfoldersignerassociationGetObjectV1Response, status_code(int), headers(HTTPHeaderDict))
        """

        warnings.warn("GET /1/object/ezsignfoldersignerassociation/{pkiEzsignfoldersignerassociationID} is deprecated.", DeprecationWarning)

        _params = locals()

        _all_params = [
            'pki_ezsignfoldersignerassociation_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ezsignfoldersignerassociation_get_object_v1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['pki_ezsignfoldersignerassociation_id']:
            _path_params['pkiEzsignfoldersignerassociationID'] = _params['pki_ezsignfoldersignerassociation_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Authorization']  # noqa: E501

        _response_types_map = {
            '200': "EzsignfoldersignerassociationGetObjectV1Response",
            '404': "CommonResponseError",
        }

        return self.api_client.call_api(
            '/1/object/ezsignfoldersignerassociation/{pkiEzsignfoldersignerassociationID}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def ezsignfoldersignerassociation_get_object_v2(self, pki_ezsignfoldersignerassociation_id : conint(strict=True, ge=0), **kwargs) -> EzsignfoldersignerassociationGetObjectV2Response:  # noqa: E501
        """Retrieve an existing Ezsignfoldersignerassociation  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsignfoldersignerassociation_get_object_v2(pki_ezsignfoldersignerassociation_id, async_req=True)
        >>> result = thread.get()

        :param pki_ezsignfoldersignerassociation_id: (required)
        :type pki_ezsignfoldersignerassociation_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: EzsignfoldersignerassociationGetObjectV2Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the ezsignfoldersignerassociation_get_object_v2_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.ezsignfoldersignerassociation_get_object_v2_with_http_info(pki_ezsignfoldersignerassociation_id, **kwargs)  # noqa: E501

    @validate_arguments
    def ezsignfoldersignerassociation_get_object_v2_with_http_info(self, pki_ezsignfoldersignerassociation_id : conint(strict=True, ge=0), **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve an existing Ezsignfoldersignerassociation  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsignfoldersignerassociation_get_object_v2_with_http_info(pki_ezsignfoldersignerassociation_id, async_req=True)
        >>> result = thread.get()

        :param pki_ezsignfoldersignerassociation_id: (required)
        :type pki_ezsignfoldersignerassociation_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(EzsignfoldersignerassociationGetObjectV2Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'pki_ezsignfoldersignerassociation_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ezsignfoldersignerassociation_get_object_v2" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['pki_ezsignfoldersignerassociation_id']:
            _path_params['pkiEzsignfoldersignerassociationID'] = _params['pki_ezsignfoldersignerassociation_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Authorization']  # noqa: E501

        _response_types_map = {
            '200': "EzsignfoldersignerassociationGetObjectV2Response",
            '404': "CommonResponseError",
        }

        return self.api_client.call_api(
            '/2/object/ezsignfoldersignerassociation/{pkiEzsignfoldersignerassociationID}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def ezsignfoldersignerassociation_patch_object_v1(self, pki_ezsignfoldersignerassociation_id : conint(strict=True, ge=0), ezsignfoldersignerassociation_patch_object_v1_request : EzsignfoldersignerassociationPatchObjectV1Request, **kwargs) -> EzsignfoldersignerassociationPatchObjectV1Response:  # noqa: E501
        """Patch an existing Ezsignfoldersignerassociation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsignfoldersignerassociation_patch_object_v1(pki_ezsignfoldersignerassociation_id, ezsignfoldersignerassociation_patch_object_v1_request, async_req=True)
        >>> result = thread.get()

        :param pki_ezsignfoldersignerassociation_id: (required)
        :type pki_ezsignfoldersignerassociation_id: int
        :param ezsignfoldersignerassociation_patch_object_v1_request: (required)
        :type ezsignfoldersignerassociation_patch_object_v1_request: EzsignfoldersignerassociationPatchObjectV1Request
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: EzsignfoldersignerassociationPatchObjectV1Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the ezsignfoldersignerassociation_patch_object_v1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.ezsignfoldersignerassociation_patch_object_v1_with_http_info(pki_ezsignfoldersignerassociation_id, ezsignfoldersignerassociation_patch_object_v1_request, **kwargs)  # noqa: E501

    @validate_arguments
    def ezsignfoldersignerassociation_patch_object_v1_with_http_info(self, pki_ezsignfoldersignerassociation_id : conint(strict=True, ge=0), ezsignfoldersignerassociation_patch_object_v1_request : EzsignfoldersignerassociationPatchObjectV1Request, **kwargs) -> ApiResponse:  # noqa: E501
        """Patch an existing Ezsignfoldersignerassociation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsignfoldersignerassociation_patch_object_v1_with_http_info(pki_ezsignfoldersignerassociation_id, ezsignfoldersignerassociation_patch_object_v1_request, async_req=True)
        >>> result = thread.get()

        :param pki_ezsignfoldersignerassociation_id: (required)
        :type pki_ezsignfoldersignerassociation_id: int
        :param ezsignfoldersignerassociation_patch_object_v1_request: (required)
        :type ezsignfoldersignerassociation_patch_object_v1_request: EzsignfoldersignerassociationPatchObjectV1Request
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(EzsignfoldersignerassociationPatchObjectV1Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'pki_ezsignfoldersignerassociation_id',
            'ezsignfoldersignerassociation_patch_object_v1_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ezsignfoldersignerassociation_patch_object_v1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['pki_ezsignfoldersignerassociation_id']:
            _path_params['pkiEzsignfoldersignerassociationID'] = _params['pki_ezsignfoldersignerassociation_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['ezsignfoldersignerassociation_patch_object_v1_request'] is not None:
            _body_params = _params['ezsignfoldersignerassociation_patch_object_v1_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['Authorization']  # noqa: E501

        _response_types_map = {
            '200': "EzsignfoldersignerassociationPatchObjectV1Response",
            '404': "CommonResponseError",
            '422': "CommonResponseError",
        }

        return self.api_client.call_api(
            '/1/object/ezsignfoldersignerassociation/{pkiEzsignfoldersignerassociationID}', 'PATCH',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
