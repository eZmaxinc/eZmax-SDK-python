# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.0
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from pydantic import Field, StrictStr, conint, conlist

from typing import Any, Dict

from eZmaxApi.models.ezsigndocument_apply_ezsigntemplate_v1_request import EzsigndocumentApplyEzsigntemplateV1Request
from eZmaxApi.models.ezsigndocument_apply_ezsigntemplate_v1_response import EzsigndocumentApplyEzsigntemplateV1Response
from eZmaxApi.models.ezsigndocument_apply_ezsigntemplate_v2_request import EzsigndocumentApplyEzsigntemplateV2Request
from eZmaxApi.models.ezsigndocument_apply_ezsigntemplate_v2_response import EzsigndocumentApplyEzsigntemplateV2Response
from eZmaxApi.models.ezsigndocument_create_object_v1_request import EzsigndocumentCreateObjectV1Request
from eZmaxApi.models.ezsigndocument_create_object_v1_response import EzsigndocumentCreateObjectV1Response
from eZmaxApi.models.ezsigndocument_create_object_v2_request import EzsigndocumentCreateObjectV2Request
from eZmaxApi.models.ezsigndocument_create_object_v2_response import EzsigndocumentCreateObjectV2Response
from eZmaxApi.models.ezsigndocument_decline_to_sign_v1_request import EzsigndocumentDeclineToSignV1Request
from eZmaxApi.models.ezsigndocument_decline_to_sign_v1_response import EzsigndocumentDeclineToSignV1Response
from eZmaxApi.models.ezsigndocument_delete_object_v1_response import EzsigndocumentDeleteObjectV1Response
from eZmaxApi.models.ezsigndocument_edit_ezsignformfieldgroups_v1_request import EzsigndocumentEditEzsignformfieldgroupsV1Request
from eZmaxApi.models.ezsigndocument_edit_ezsignformfieldgroups_v1_response import EzsigndocumentEditEzsignformfieldgroupsV1Response
from eZmaxApi.models.ezsigndocument_edit_ezsignsignatures_v1_request import EzsigndocumentEditEzsignsignaturesV1Request
from eZmaxApi.models.ezsigndocument_edit_ezsignsignatures_v1_response import EzsigndocumentEditEzsignsignaturesV1Response
from eZmaxApi.models.ezsigndocument_end_prematurely_v1_response import EzsigndocumentEndPrematurelyV1Response
from eZmaxApi.models.ezsigndocument_flatten_v1_response import EzsigndocumentFlattenV1Response
from eZmaxApi.models.ezsigndocument_get_actionable_elements_v1_response import EzsigndocumentGetActionableElementsV1Response
from eZmaxApi.models.ezsigndocument_get_completed_elements_v1_response import EzsigndocumentGetCompletedElementsV1Response
from eZmaxApi.models.ezsigndocument_get_download_url_v1_response import EzsigndocumentGetDownloadUrlV1Response
from eZmaxApi.models.ezsigndocument_get_ezsignannotations_v1_response import EzsigndocumentGetEzsignannotationsV1Response
from eZmaxApi.models.ezsigndocument_get_ezsignformfieldgroups_v1_response import EzsigndocumentGetEzsignformfieldgroupsV1Response
from eZmaxApi.models.ezsigndocument_get_ezsignpages_v1_response import EzsigndocumentGetEzsignpagesV1Response
from eZmaxApi.models.ezsigndocument_get_ezsignsignatures_automatic_v1_response import EzsigndocumentGetEzsignsignaturesAutomaticV1Response
from eZmaxApi.models.ezsigndocument_get_ezsignsignatures_v1_response import EzsigndocumentGetEzsignsignaturesV1Response
from eZmaxApi.models.ezsigndocument_get_form_data_v1_response import EzsigndocumentGetFormDataV1Response
from eZmaxApi.models.ezsigndocument_get_object_v1_response import EzsigndocumentGetObjectV1Response
from eZmaxApi.models.ezsigndocument_get_object_v2_response import EzsigndocumentGetObjectV2Response
from eZmaxApi.models.ezsigndocument_get_temporary_proof_v1_response import EzsigndocumentGetTemporaryProofV1Response
from eZmaxApi.models.ezsigndocument_get_words_positions_v1_request import EzsigndocumentGetWordsPositionsV1Request
from eZmaxApi.models.ezsigndocument_get_words_positions_v1_response import EzsigndocumentGetWordsPositionsV1Response
from eZmaxApi.models.ezsigndocument_patch_object_v1_request import EzsigndocumentPatchObjectV1Request
from eZmaxApi.models.ezsigndocument_patch_object_v1_response import EzsigndocumentPatchObjectV1Response
from eZmaxApi.models.ezsigndocument_submit_ezsignform_v1_request import EzsigndocumentSubmitEzsignformV1Request
from eZmaxApi.models.ezsigndocument_submit_ezsignform_v1_response import EzsigndocumentSubmitEzsignformV1Response
from eZmaxApi.models.ezsigndocument_unsend_v1_response import EzsigndocumentUnsendV1Response

from eZmaxApi.api_client import ApiClient
from eZmaxApi.api_response import ApiResponse
from eZmaxApi.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class ObjectEzsigndocumentApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def ezsigndocument_apply_ezsigntemplate_v1(self, pki_ezsigndocument_id : conint(strict=True, ge=0), ezsigndocument_apply_ezsigntemplate_v1_request : EzsigndocumentApplyEzsigntemplateV1Request, **kwargs) -> EzsigndocumentApplyEzsigntemplateV1Response:  # noqa: E501
        """(Deprecated) Apply an Ezsigntemplate to the Ezsigndocument.  # noqa: E501

        This function is deprecated. Please use *applyEzsigntemplate* instead which is doing the same thing but with a capital \"E\" to normalize the nomenclature.  This endpoint applies a predefined template to the ezsign document. This allows to automatically apply all the form and signature fields on a document in a single step.  The document must not already have fields otherwise an error will be returned.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsigndocument_apply_ezsigntemplate_v1(pki_ezsigndocument_id, ezsigndocument_apply_ezsigntemplate_v1_request, async_req=True)
        >>> result = thread.get()

        :param pki_ezsigndocument_id: (required)
        :type pki_ezsigndocument_id: int
        :param ezsigndocument_apply_ezsigntemplate_v1_request: (required)
        :type ezsigndocument_apply_ezsigntemplate_v1_request: EzsigndocumentApplyEzsigntemplateV1Request
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: EzsigndocumentApplyEzsigntemplateV1Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the ezsigndocument_apply_ezsigntemplate_v1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.ezsigndocument_apply_ezsigntemplate_v1_with_http_info(pki_ezsigndocument_id, ezsigndocument_apply_ezsigntemplate_v1_request, **kwargs)  # noqa: E501

    @validate_arguments
    def ezsigndocument_apply_ezsigntemplate_v1_with_http_info(self, pki_ezsigndocument_id : conint(strict=True, ge=0), ezsigndocument_apply_ezsigntemplate_v1_request : EzsigndocumentApplyEzsigntemplateV1Request, **kwargs) -> ApiResponse:  # noqa: E501
        """(Deprecated) Apply an Ezsigntemplate to the Ezsigndocument.  # noqa: E501

        This function is deprecated. Please use *applyEzsigntemplate* instead which is doing the same thing but with a capital \"E\" to normalize the nomenclature.  This endpoint applies a predefined template to the ezsign document. This allows to automatically apply all the form and signature fields on a document in a single step.  The document must not already have fields otherwise an error will be returned.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsigndocument_apply_ezsigntemplate_v1_with_http_info(pki_ezsigndocument_id, ezsigndocument_apply_ezsigntemplate_v1_request, async_req=True)
        >>> result = thread.get()

        :param pki_ezsigndocument_id: (required)
        :type pki_ezsigndocument_id: int
        :param ezsigndocument_apply_ezsigntemplate_v1_request: (required)
        :type ezsigndocument_apply_ezsigntemplate_v1_request: EzsigndocumentApplyEzsigntemplateV1Request
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(EzsigndocumentApplyEzsigntemplateV1Response, status_code(int), headers(HTTPHeaderDict))
        """

        warnings.warn("POST /1/object/ezsigndocument/{pkiEzsigndocumentID}/applyezsigntemplate is deprecated.", DeprecationWarning)

        _params = locals()

        _all_params = [
            'pki_ezsigndocument_id',
            'ezsigndocument_apply_ezsigntemplate_v1_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ezsigndocument_apply_ezsigntemplate_v1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['pki_ezsigndocument_id']:
            _path_params['pkiEzsigndocumentID'] = _params['pki_ezsigndocument_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['ezsigndocument_apply_ezsigntemplate_v1_request'] is not None:
            _body_params = _params['ezsigndocument_apply_ezsigntemplate_v1_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['Authorization']  # noqa: E501

        _response_types_map = {
            '200': "EzsigndocumentApplyEzsigntemplateV1Response",
            '404': "CommonResponseError",
            '422': "CommonResponseError",
        }

        return self.api_client.call_api(
            '/1/object/ezsigndocument/{pkiEzsigndocumentID}/applyezsigntemplate', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def ezsigndocument_apply_ezsigntemplate_v2(self, pki_ezsigndocument_id : conint(strict=True, ge=0), ezsigndocument_apply_ezsigntemplate_v2_request : EzsigndocumentApplyEzsigntemplateV2Request, **kwargs) -> EzsigndocumentApplyEzsigntemplateV2Response:  # noqa: E501
        """Apply an Ezsigntemplate to the Ezsigndocument.  # noqa: E501

        This endpoint applies a predefined template to the ezsign document. This allows to automatically apply all the form and signature fields on a document in a single step.  The document must not already have fields otherwise an error will be returned.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsigndocument_apply_ezsigntemplate_v2(pki_ezsigndocument_id, ezsigndocument_apply_ezsigntemplate_v2_request, async_req=True)
        >>> result = thread.get()

        :param pki_ezsigndocument_id: (required)
        :type pki_ezsigndocument_id: int
        :param ezsigndocument_apply_ezsigntemplate_v2_request: (required)
        :type ezsigndocument_apply_ezsigntemplate_v2_request: EzsigndocumentApplyEzsigntemplateV2Request
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: EzsigndocumentApplyEzsigntemplateV2Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the ezsigndocument_apply_ezsigntemplate_v2_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.ezsigndocument_apply_ezsigntemplate_v2_with_http_info(pki_ezsigndocument_id, ezsigndocument_apply_ezsigntemplate_v2_request, **kwargs)  # noqa: E501

    @validate_arguments
    def ezsigndocument_apply_ezsigntemplate_v2_with_http_info(self, pki_ezsigndocument_id : conint(strict=True, ge=0), ezsigndocument_apply_ezsigntemplate_v2_request : EzsigndocumentApplyEzsigntemplateV2Request, **kwargs) -> ApiResponse:  # noqa: E501
        """Apply an Ezsigntemplate to the Ezsigndocument.  # noqa: E501

        This endpoint applies a predefined template to the ezsign document. This allows to automatically apply all the form and signature fields on a document in a single step.  The document must not already have fields otherwise an error will be returned.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsigndocument_apply_ezsigntemplate_v2_with_http_info(pki_ezsigndocument_id, ezsigndocument_apply_ezsigntemplate_v2_request, async_req=True)
        >>> result = thread.get()

        :param pki_ezsigndocument_id: (required)
        :type pki_ezsigndocument_id: int
        :param ezsigndocument_apply_ezsigntemplate_v2_request: (required)
        :type ezsigndocument_apply_ezsigntemplate_v2_request: EzsigndocumentApplyEzsigntemplateV2Request
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(EzsigndocumentApplyEzsigntemplateV2Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'pki_ezsigndocument_id',
            'ezsigndocument_apply_ezsigntemplate_v2_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ezsigndocument_apply_ezsigntemplate_v2" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['pki_ezsigndocument_id']:
            _path_params['pkiEzsigndocumentID'] = _params['pki_ezsigndocument_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['ezsigndocument_apply_ezsigntemplate_v2_request'] is not None:
            _body_params = _params['ezsigndocument_apply_ezsigntemplate_v2_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['Authorization']  # noqa: E501

        _response_types_map = {
            '200': "EzsigndocumentApplyEzsigntemplateV2Response",
            '404': "CommonResponseError",
            '422': "CommonResponseError",
        }

        return self.api_client.call_api(
            '/2/object/ezsigndocument/{pkiEzsigndocumentID}/applyEzsigntemplate', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def ezsigndocument_create_object_v1(self, ezsigndocument_create_object_v1_request : conlist(EzsigndocumentCreateObjectV1Request), **kwargs) -> EzsigndocumentCreateObjectV1Response:  # noqa: E501
        """(Deprecated) Create a new Ezsigndocument  # noqa: E501

        The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsigndocument_create_object_v1(ezsigndocument_create_object_v1_request, async_req=True)
        >>> result = thread.get()

        :param ezsigndocument_create_object_v1_request: (required)
        :type ezsigndocument_create_object_v1_request: List[EzsigndocumentCreateObjectV1Request]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: EzsigndocumentCreateObjectV1Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the ezsigndocument_create_object_v1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.ezsigndocument_create_object_v1_with_http_info(ezsigndocument_create_object_v1_request, **kwargs)  # noqa: E501

    @validate_arguments
    def ezsigndocument_create_object_v1_with_http_info(self, ezsigndocument_create_object_v1_request : conlist(EzsigndocumentCreateObjectV1Request), **kwargs) -> ApiResponse:  # noqa: E501
        """(Deprecated) Create a new Ezsigndocument  # noqa: E501

        The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsigndocument_create_object_v1_with_http_info(ezsigndocument_create_object_v1_request, async_req=True)
        >>> result = thread.get()

        :param ezsigndocument_create_object_v1_request: (required)
        :type ezsigndocument_create_object_v1_request: List[EzsigndocumentCreateObjectV1Request]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(EzsigndocumentCreateObjectV1Response, status_code(int), headers(HTTPHeaderDict))
        """

        warnings.warn("POST /1/object/ezsigndocument is deprecated.", DeprecationWarning)

        _params = locals()

        _all_params = [
            'ezsigndocument_create_object_v1_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ezsigndocument_create_object_v1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['ezsigndocument_create_object_v1_request'] is not None:
            _body_params = _params['ezsigndocument_create_object_v1_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['Authorization']  # noqa: E501

        _response_types_map = {
            '201': "EzsigndocumentCreateObjectV1Response",
            '422': "CommonResponseErrorSTemporaryFileUrl",
        }

        return self.api_client.call_api(
            '/1/object/ezsigndocument', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def ezsigndocument_create_object_v2(self, ezsigndocument_create_object_v2_request : EzsigndocumentCreateObjectV2Request, **kwargs) -> EzsigndocumentCreateObjectV2Response:  # noqa: E501
        """Create a new Ezsigndocument  # noqa: E501

        The endpoint allows to create one or many elements at once.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsigndocument_create_object_v2(ezsigndocument_create_object_v2_request, async_req=True)
        >>> result = thread.get()

        :param ezsigndocument_create_object_v2_request: (required)
        :type ezsigndocument_create_object_v2_request: EzsigndocumentCreateObjectV2Request
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: EzsigndocumentCreateObjectV2Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the ezsigndocument_create_object_v2_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.ezsigndocument_create_object_v2_with_http_info(ezsigndocument_create_object_v2_request, **kwargs)  # noqa: E501

    @validate_arguments
    def ezsigndocument_create_object_v2_with_http_info(self, ezsigndocument_create_object_v2_request : EzsigndocumentCreateObjectV2Request, **kwargs) -> ApiResponse:  # noqa: E501
        """Create a new Ezsigndocument  # noqa: E501

        The endpoint allows to create one or many elements at once.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsigndocument_create_object_v2_with_http_info(ezsigndocument_create_object_v2_request, async_req=True)
        >>> result = thread.get()

        :param ezsigndocument_create_object_v2_request: (required)
        :type ezsigndocument_create_object_v2_request: EzsigndocumentCreateObjectV2Request
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(EzsigndocumentCreateObjectV2Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'ezsigndocument_create_object_v2_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ezsigndocument_create_object_v2" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['ezsigndocument_create_object_v2_request'] is not None:
            _body_params = _params['ezsigndocument_create_object_v2_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['Authorization']  # noqa: E501

        _response_types_map = {
            '201': "EzsigndocumentCreateObjectV2Response",
            '422': "CommonResponseErrorSTemporaryFileUrl",
        }

        return self.api_client.call_api(
            '/2/object/ezsigndocument', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def ezsigndocument_decline_to_sign_v1(self, pki_ezsigndocument_id : conint(strict=True, ge=0), ezsigndocument_decline_to_sign_v1_request : EzsigndocumentDeclineToSignV1Request, **kwargs) -> EzsigndocumentDeclineToSignV1Response:  # noqa: E501
        """Decline to sign  # noqa: E501

        Decline to sign  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsigndocument_decline_to_sign_v1(pki_ezsigndocument_id, ezsigndocument_decline_to_sign_v1_request, async_req=True)
        >>> result = thread.get()

        :param pki_ezsigndocument_id: (required)
        :type pki_ezsigndocument_id: int
        :param ezsigndocument_decline_to_sign_v1_request: (required)
        :type ezsigndocument_decline_to_sign_v1_request: EzsigndocumentDeclineToSignV1Request
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: EzsigndocumentDeclineToSignV1Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the ezsigndocument_decline_to_sign_v1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.ezsigndocument_decline_to_sign_v1_with_http_info(pki_ezsigndocument_id, ezsigndocument_decline_to_sign_v1_request, **kwargs)  # noqa: E501

    @validate_arguments
    def ezsigndocument_decline_to_sign_v1_with_http_info(self, pki_ezsigndocument_id : conint(strict=True, ge=0), ezsigndocument_decline_to_sign_v1_request : EzsigndocumentDeclineToSignV1Request, **kwargs) -> ApiResponse:  # noqa: E501
        """Decline to sign  # noqa: E501

        Decline to sign  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsigndocument_decline_to_sign_v1_with_http_info(pki_ezsigndocument_id, ezsigndocument_decline_to_sign_v1_request, async_req=True)
        >>> result = thread.get()

        :param pki_ezsigndocument_id: (required)
        :type pki_ezsigndocument_id: int
        :param ezsigndocument_decline_to_sign_v1_request: (required)
        :type ezsigndocument_decline_to_sign_v1_request: EzsigndocumentDeclineToSignV1Request
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(EzsigndocumentDeclineToSignV1Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'pki_ezsigndocument_id',
            'ezsigndocument_decline_to_sign_v1_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ezsigndocument_decline_to_sign_v1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['pki_ezsigndocument_id']:
            _path_params['pkiEzsigndocumentID'] = _params['pki_ezsigndocument_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['ezsigndocument_decline_to_sign_v1_request'] is not None:
            _body_params = _params['ezsigndocument_decline_to_sign_v1_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['Authorization']  # noqa: E501

        _response_types_map = {
            '200': "EzsigndocumentDeclineToSignV1Response",
            '404': "CommonResponseError",
            '422': "CommonResponseError",
        }

        return self.api_client.call_api(
            '/1/object/ezsigndocument/{pkiEzsigndocumentID}/declineToSign', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def ezsigndocument_delete_object_v1(self, pki_ezsigndocument_id : conint(strict=True, ge=0), **kwargs) -> EzsigndocumentDeleteObjectV1Response:  # noqa: E501
        """Delete an existing Ezsigndocument  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsigndocument_delete_object_v1(pki_ezsigndocument_id, async_req=True)
        >>> result = thread.get()

        :param pki_ezsigndocument_id: (required)
        :type pki_ezsigndocument_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: EzsigndocumentDeleteObjectV1Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the ezsigndocument_delete_object_v1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.ezsigndocument_delete_object_v1_with_http_info(pki_ezsigndocument_id, **kwargs)  # noqa: E501

    @validate_arguments
    def ezsigndocument_delete_object_v1_with_http_info(self, pki_ezsigndocument_id : conint(strict=True, ge=0), **kwargs) -> ApiResponse:  # noqa: E501
        """Delete an existing Ezsigndocument  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsigndocument_delete_object_v1_with_http_info(pki_ezsigndocument_id, async_req=True)
        >>> result = thread.get()

        :param pki_ezsigndocument_id: (required)
        :type pki_ezsigndocument_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(EzsigndocumentDeleteObjectV1Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'pki_ezsigndocument_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ezsigndocument_delete_object_v1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['pki_ezsigndocument_id']:
            _path_params['pkiEzsigndocumentID'] = _params['pki_ezsigndocument_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Authorization']  # noqa: E501

        _response_types_map = {
            '200': "EzsigndocumentDeleteObjectV1Response",
            '404': "CommonResponseError",
            '422': "CommonResponseError",
        }

        return self.api_client.call_api(
            '/1/object/ezsigndocument/{pkiEzsigndocumentID}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def ezsigndocument_edit_ezsignformfieldgroups_v1(self, pki_ezsigndocument_id : conint(strict=True, ge=0), ezsigndocument_edit_ezsignformfieldgroups_v1_request : EzsigndocumentEditEzsignformfieldgroupsV1Request, **kwargs) -> EzsigndocumentEditEzsignformfieldgroupsV1Response:  # noqa: E501
        """Edit multiple Ezsignformfieldgroups  # noqa: E501

        Using this endpoint, you can edit multiple Ezsignformfieldgroups at the same time.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsigndocument_edit_ezsignformfieldgroups_v1(pki_ezsigndocument_id, ezsigndocument_edit_ezsignformfieldgroups_v1_request, async_req=True)
        >>> result = thread.get()

        :param pki_ezsigndocument_id: (required)
        :type pki_ezsigndocument_id: int
        :param ezsigndocument_edit_ezsignformfieldgroups_v1_request: (required)
        :type ezsigndocument_edit_ezsignformfieldgroups_v1_request: EzsigndocumentEditEzsignformfieldgroupsV1Request
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: EzsigndocumentEditEzsignformfieldgroupsV1Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the ezsigndocument_edit_ezsignformfieldgroups_v1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.ezsigndocument_edit_ezsignformfieldgroups_v1_with_http_info(pki_ezsigndocument_id, ezsigndocument_edit_ezsignformfieldgroups_v1_request, **kwargs)  # noqa: E501

    @validate_arguments
    def ezsigndocument_edit_ezsignformfieldgroups_v1_with_http_info(self, pki_ezsigndocument_id : conint(strict=True, ge=0), ezsigndocument_edit_ezsignformfieldgroups_v1_request : EzsigndocumentEditEzsignformfieldgroupsV1Request, **kwargs) -> ApiResponse:  # noqa: E501
        """Edit multiple Ezsignformfieldgroups  # noqa: E501

        Using this endpoint, you can edit multiple Ezsignformfieldgroups at the same time.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsigndocument_edit_ezsignformfieldgroups_v1_with_http_info(pki_ezsigndocument_id, ezsigndocument_edit_ezsignformfieldgroups_v1_request, async_req=True)
        >>> result = thread.get()

        :param pki_ezsigndocument_id: (required)
        :type pki_ezsigndocument_id: int
        :param ezsigndocument_edit_ezsignformfieldgroups_v1_request: (required)
        :type ezsigndocument_edit_ezsignformfieldgroups_v1_request: EzsigndocumentEditEzsignformfieldgroupsV1Request
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(EzsigndocumentEditEzsignformfieldgroupsV1Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'pki_ezsigndocument_id',
            'ezsigndocument_edit_ezsignformfieldgroups_v1_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ezsigndocument_edit_ezsignformfieldgroups_v1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['pki_ezsigndocument_id']:
            _path_params['pkiEzsigndocumentID'] = _params['pki_ezsigndocument_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['ezsigndocument_edit_ezsignformfieldgroups_v1_request'] is not None:
            _body_params = _params['ezsigndocument_edit_ezsignformfieldgroups_v1_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['Authorization']  # noqa: E501

        _response_types_map = {
            '200': "EzsigndocumentEditEzsignformfieldgroupsV1Response",
            '404': "CommonResponseError",
            '422': "CommonResponseError",
        }

        return self.api_client.call_api(
            '/1/object/ezsigndocument/{pkiEzsigndocumentID}/editEzsignformfieldgroups', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def ezsigndocument_edit_ezsignsignatures_v1(self, pki_ezsigndocument_id : conint(strict=True, ge=0), ezsigndocument_edit_ezsignsignatures_v1_request : EzsigndocumentEditEzsignsignaturesV1Request, **kwargs) -> EzsigndocumentEditEzsignsignaturesV1Response:  # noqa: E501
        """Edit multiple Ezsignsignatures  # noqa: E501

        Using this endpoint, you can edit multiple Ezsignsignatures at the same time.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsigndocument_edit_ezsignsignatures_v1(pki_ezsigndocument_id, ezsigndocument_edit_ezsignsignatures_v1_request, async_req=True)
        >>> result = thread.get()

        :param pki_ezsigndocument_id: (required)
        :type pki_ezsigndocument_id: int
        :param ezsigndocument_edit_ezsignsignatures_v1_request: (required)
        :type ezsigndocument_edit_ezsignsignatures_v1_request: EzsigndocumentEditEzsignsignaturesV1Request
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: EzsigndocumentEditEzsignsignaturesV1Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the ezsigndocument_edit_ezsignsignatures_v1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.ezsigndocument_edit_ezsignsignatures_v1_with_http_info(pki_ezsigndocument_id, ezsigndocument_edit_ezsignsignatures_v1_request, **kwargs)  # noqa: E501

    @validate_arguments
    def ezsigndocument_edit_ezsignsignatures_v1_with_http_info(self, pki_ezsigndocument_id : conint(strict=True, ge=0), ezsigndocument_edit_ezsignsignatures_v1_request : EzsigndocumentEditEzsignsignaturesV1Request, **kwargs) -> ApiResponse:  # noqa: E501
        """Edit multiple Ezsignsignatures  # noqa: E501

        Using this endpoint, you can edit multiple Ezsignsignatures at the same time.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsigndocument_edit_ezsignsignatures_v1_with_http_info(pki_ezsigndocument_id, ezsigndocument_edit_ezsignsignatures_v1_request, async_req=True)
        >>> result = thread.get()

        :param pki_ezsigndocument_id: (required)
        :type pki_ezsigndocument_id: int
        :param ezsigndocument_edit_ezsignsignatures_v1_request: (required)
        :type ezsigndocument_edit_ezsignsignatures_v1_request: EzsigndocumentEditEzsignsignaturesV1Request
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(EzsigndocumentEditEzsignsignaturesV1Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'pki_ezsigndocument_id',
            'ezsigndocument_edit_ezsignsignatures_v1_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ezsigndocument_edit_ezsignsignatures_v1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['pki_ezsigndocument_id']:
            _path_params['pkiEzsigndocumentID'] = _params['pki_ezsigndocument_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['ezsigndocument_edit_ezsignsignatures_v1_request'] is not None:
            _body_params = _params['ezsigndocument_edit_ezsignsignatures_v1_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['Authorization']  # noqa: E501

        _response_types_map = {
            '200': "EzsigndocumentEditEzsignsignaturesV1Response",
            '404': "CommonResponseError",
            '422': "CommonResponseError",
        }

        return self.api_client.call_api(
            '/1/object/ezsigndocument/{pkiEzsigndocumentID}/editEzsignsignatures', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def ezsigndocument_end_prematurely_v1(self, pki_ezsigndocument_id : conint(strict=True, ge=0), body : Dict[str, Any], **kwargs) -> EzsigndocumentEndPrematurelyV1Response:  # noqa: E501
        """End prematurely  # noqa: E501

        End prematurely an Ezsigndocument when some signatures are still required  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsigndocument_end_prematurely_v1(pki_ezsigndocument_id, body, async_req=True)
        >>> result = thread.get()

        :param pki_ezsigndocument_id: (required)
        :type pki_ezsigndocument_id: int
        :param body: (required)
        :type body: object
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: EzsigndocumentEndPrematurelyV1Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the ezsigndocument_end_prematurely_v1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.ezsigndocument_end_prematurely_v1_with_http_info(pki_ezsigndocument_id, body, **kwargs)  # noqa: E501

    @validate_arguments
    def ezsigndocument_end_prematurely_v1_with_http_info(self, pki_ezsigndocument_id : conint(strict=True, ge=0), body : Dict[str, Any], **kwargs) -> ApiResponse:  # noqa: E501
        """End prematurely  # noqa: E501

        End prematurely an Ezsigndocument when some signatures are still required  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsigndocument_end_prematurely_v1_with_http_info(pki_ezsigndocument_id, body, async_req=True)
        >>> result = thread.get()

        :param pki_ezsigndocument_id: (required)
        :type pki_ezsigndocument_id: int
        :param body: (required)
        :type body: object
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(EzsigndocumentEndPrematurelyV1Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'pki_ezsigndocument_id',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ezsigndocument_end_prematurely_v1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['pki_ezsigndocument_id']:
            _path_params['pkiEzsigndocumentID'] = _params['pki_ezsigndocument_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['Authorization']  # noqa: E501

        _response_types_map = {
            '200': "EzsigndocumentEndPrematurelyV1Response",
            '404': "CommonResponseError",
            '422': "CommonResponseError",
        }

        return self.api_client.call_api(
            '/1/object/ezsigndocument/{pkiEzsigndocumentID}/endPrematurely', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def ezsigndocument_flatten_v1(self, pki_ezsigndocument_id : conint(strict=True, ge=0), body : Dict[str, Any], **kwargs) -> EzsigndocumentFlattenV1Response:  # noqa: E501
        """Flatten  # noqa: E501

        Flatten an Ezsigndocument signatures, forms and annotations. This process finalizes the PDF so that the forms and annotations become part of the document content and cannot be edited.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsigndocument_flatten_v1(pki_ezsigndocument_id, body, async_req=True)
        >>> result = thread.get()

        :param pki_ezsigndocument_id: (required)
        :type pki_ezsigndocument_id: int
        :param body: (required)
        :type body: object
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: EzsigndocumentFlattenV1Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the ezsigndocument_flatten_v1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.ezsigndocument_flatten_v1_with_http_info(pki_ezsigndocument_id, body, **kwargs)  # noqa: E501

    @validate_arguments
    def ezsigndocument_flatten_v1_with_http_info(self, pki_ezsigndocument_id : conint(strict=True, ge=0), body : Dict[str, Any], **kwargs) -> ApiResponse:  # noqa: E501
        """Flatten  # noqa: E501

        Flatten an Ezsigndocument signatures, forms and annotations. This process finalizes the PDF so that the forms and annotations become part of the document content and cannot be edited.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsigndocument_flatten_v1_with_http_info(pki_ezsigndocument_id, body, async_req=True)
        >>> result = thread.get()

        :param pki_ezsigndocument_id: (required)
        :type pki_ezsigndocument_id: int
        :param body: (required)
        :type body: object
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(EzsigndocumentFlattenV1Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'pki_ezsigndocument_id',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ezsigndocument_flatten_v1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['pki_ezsigndocument_id']:
            _path_params['pkiEzsigndocumentID'] = _params['pki_ezsigndocument_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['Authorization']  # noqa: E501

        _response_types_map = {
            '200': "EzsigndocumentFlattenV1Response",
            '404': "CommonResponseError",
            '422': "CommonResponseError",
        }

        return self.api_client.call_api(
            '/1/object/ezsigndocument/{pkiEzsigndocumentID}/flatten', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def ezsigndocument_get_actionable_elements_v1(self, pki_ezsigndocument_id : conint(strict=True, ge=0), **kwargs) -> EzsigndocumentGetActionableElementsV1Response:  # noqa: E501
        """Retrieve actionable elements for the Ezsigndocument  # noqa: E501

        Return the Ezsignsignatures that can be signed and Ezsignformfieldgroups that can be filled by the current user at the current step in the process  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsigndocument_get_actionable_elements_v1(pki_ezsigndocument_id, async_req=True)
        >>> result = thread.get()

        :param pki_ezsigndocument_id: (required)
        :type pki_ezsigndocument_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: EzsigndocumentGetActionableElementsV1Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the ezsigndocument_get_actionable_elements_v1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.ezsigndocument_get_actionable_elements_v1_with_http_info(pki_ezsigndocument_id, **kwargs)  # noqa: E501

    @validate_arguments
    def ezsigndocument_get_actionable_elements_v1_with_http_info(self, pki_ezsigndocument_id : conint(strict=True, ge=0), **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve actionable elements for the Ezsigndocument  # noqa: E501

        Return the Ezsignsignatures that can be signed and Ezsignformfieldgroups that can be filled by the current user at the current step in the process  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsigndocument_get_actionable_elements_v1_with_http_info(pki_ezsigndocument_id, async_req=True)
        >>> result = thread.get()

        :param pki_ezsigndocument_id: (required)
        :type pki_ezsigndocument_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(EzsigndocumentGetActionableElementsV1Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'pki_ezsigndocument_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ezsigndocument_get_actionable_elements_v1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['pki_ezsigndocument_id']:
            _path_params['pkiEzsigndocumentID'] = _params['pki_ezsigndocument_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Authorization']  # noqa: E501

        _response_types_map = {
            '200': "EzsigndocumentGetActionableElementsV1Response",
            '404': "CommonResponseError",
            '422': "CommonResponseError",
        }

        return self.api_client.call_api(
            '/1/object/ezsigndocument/{pkiEzsigndocumentID}/getActionableElements', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def ezsigndocument_get_completed_elements_v1(self, pki_ezsigndocument_id : conint(strict=True, ge=0), **kwargs) -> EzsigndocumentGetCompletedElementsV1Response:  # noqa: E501
        """Retrieve completed elements for the Ezsigndocument  # noqa: E501

        Return the completed Ezsignsignatures, Ezsignformfieldgroups and Ezsignannotations at the current step in the process  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsigndocument_get_completed_elements_v1(pki_ezsigndocument_id, async_req=True)
        >>> result = thread.get()

        :param pki_ezsigndocument_id: (required)
        :type pki_ezsigndocument_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: EzsigndocumentGetCompletedElementsV1Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the ezsigndocument_get_completed_elements_v1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.ezsigndocument_get_completed_elements_v1_with_http_info(pki_ezsigndocument_id, **kwargs)  # noqa: E501

    @validate_arguments
    def ezsigndocument_get_completed_elements_v1_with_http_info(self, pki_ezsigndocument_id : conint(strict=True, ge=0), **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve completed elements for the Ezsigndocument  # noqa: E501

        Return the completed Ezsignsignatures, Ezsignformfieldgroups and Ezsignannotations at the current step in the process  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsigndocument_get_completed_elements_v1_with_http_info(pki_ezsigndocument_id, async_req=True)
        >>> result = thread.get()

        :param pki_ezsigndocument_id: (required)
        :type pki_ezsigndocument_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(EzsigndocumentGetCompletedElementsV1Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'pki_ezsigndocument_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ezsigndocument_get_completed_elements_v1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['pki_ezsigndocument_id']:
            _path_params['pkiEzsigndocumentID'] = _params['pki_ezsigndocument_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Authorization']  # noqa: E501

        _response_types_map = {
            '200': "EzsigndocumentGetCompletedElementsV1Response",
            '404': "CommonResponseError",
            '422': "CommonResponseError",
        }

        return self.api_client.call_api(
            '/1/object/ezsigndocument/{pkiEzsigndocumentID}/getCompletedElements', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def ezsigndocument_get_download_url_v1(self, pki_ezsigndocument_id : conint(strict=True, ge=0), e_document_type : Annotated[StrictStr, Field(..., description="The type of document to retrieve.  1. **Initial** Is the initial document before any signature were applied. 2. **Signed** Is the final document once all signatures were applied. 3. **Proofdocument** Is the evidence report. 4. **Proof** Is the complete evidence archive including all of the above and more. ")], **kwargs) -> EzsigndocumentGetDownloadUrlV1Response:  # noqa: E501
        """Retrieve a URL to download documents.  # noqa: E501

        This endpoint returns URLs to different files that can be downloaded during the signing process.  These links will expire after 5 minutes so the download of the file should be made soon after retrieving the link.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsigndocument_get_download_url_v1(pki_ezsigndocument_id, e_document_type, async_req=True)
        >>> result = thread.get()

        :param pki_ezsigndocument_id: (required)
        :type pki_ezsigndocument_id: int
        :param e_document_type: The type of document to retrieve.  1. **Initial** Is the initial document before any signature were applied. 2. **Signed** Is the final document once all signatures were applied. 3. **Proofdocument** Is the evidence report. 4. **Proof** Is the complete evidence archive including all of the above and more.  (required)
        :type e_document_type: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: EzsigndocumentGetDownloadUrlV1Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the ezsigndocument_get_download_url_v1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.ezsigndocument_get_download_url_v1_with_http_info(pki_ezsigndocument_id, e_document_type, **kwargs)  # noqa: E501

    @validate_arguments
    def ezsigndocument_get_download_url_v1_with_http_info(self, pki_ezsigndocument_id : conint(strict=True, ge=0), e_document_type : Annotated[StrictStr, Field(..., description="The type of document to retrieve.  1. **Initial** Is the initial document before any signature were applied. 2. **Signed** Is the final document once all signatures were applied. 3. **Proofdocument** Is the evidence report. 4. **Proof** Is the complete evidence archive including all of the above and more. ")], **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve a URL to download documents.  # noqa: E501

        This endpoint returns URLs to different files that can be downloaded during the signing process.  These links will expire after 5 minutes so the download of the file should be made soon after retrieving the link.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsigndocument_get_download_url_v1_with_http_info(pki_ezsigndocument_id, e_document_type, async_req=True)
        >>> result = thread.get()

        :param pki_ezsigndocument_id: (required)
        :type pki_ezsigndocument_id: int
        :param e_document_type: The type of document to retrieve.  1. **Initial** Is the initial document before any signature were applied. 2. **Signed** Is the final document once all signatures were applied. 3. **Proofdocument** Is the evidence report. 4. **Proof** Is the complete evidence archive including all of the above and more.  (required)
        :type e_document_type: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(EzsigndocumentGetDownloadUrlV1Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'pki_ezsigndocument_id',
            'e_document_type'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ezsigndocument_get_download_url_v1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['pki_ezsigndocument_id']:
            _path_params['pkiEzsigndocumentID'] = _params['pki_ezsigndocument_id']

        if _params['e_document_type']:
            _path_params['eDocumentType'] = _params['e_document_type']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Authorization']  # noqa: E501

        _response_types_map = {
            '200': "EzsigndocumentGetDownloadUrlV1Response",
            '404': "CommonResponseError",
            '422': "CommonResponseError",
        }

        return self.api_client.call_api(
            '/1/object/ezsigndocument/{pkiEzsigndocumentID}/getDownloadUrl/{eDocumentType}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def ezsigndocument_get_ezsignannotations_v1(self, pki_ezsigndocument_id : conint(strict=True, ge=0), **kwargs) -> EzsigndocumentGetEzsignannotationsV1Response:  # noqa: E501
        """Retrieve an existing Ezsigndocument's Ezsignannotations  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsigndocument_get_ezsignannotations_v1(pki_ezsigndocument_id, async_req=True)
        >>> result = thread.get()

        :param pki_ezsigndocument_id: (required)
        :type pki_ezsigndocument_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: EzsigndocumentGetEzsignannotationsV1Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the ezsigndocument_get_ezsignannotations_v1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.ezsigndocument_get_ezsignannotations_v1_with_http_info(pki_ezsigndocument_id, **kwargs)  # noqa: E501

    @validate_arguments
    def ezsigndocument_get_ezsignannotations_v1_with_http_info(self, pki_ezsigndocument_id : conint(strict=True, ge=0), **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve an existing Ezsigndocument's Ezsignannotations  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsigndocument_get_ezsignannotations_v1_with_http_info(pki_ezsigndocument_id, async_req=True)
        >>> result = thread.get()

        :param pki_ezsigndocument_id: (required)
        :type pki_ezsigndocument_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(EzsigndocumentGetEzsignannotationsV1Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'pki_ezsigndocument_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ezsigndocument_get_ezsignannotations_v1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['pki_ezsigndocument_id']:
            _path_params['pkiEzsigndocumentID'] = _params['pki_ezsigndocument_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Authorization']  # noqa: E501

        _response_types_map = {
            '200': "EzsigndocumentGetEzsignannotationsV1Response",
            '404': "CommonResponseError",
            '422': "CommonResponseError",
        }

        return self.api_client.call_api(
            '/1/object/ezsigndocument/{pkiEzsigndocumentID}/getEzsignannotations', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def ezsigndocument_get_ezsignformfieldgroups_v1(self, pki_ezsigndocument_id : conint(strict=True, ge=0), **kwargs) -> EzsigndocumentGetEzsignformfieldgroupsV1Response:  # noqa: E501
        """Retrieve an existing Ezsigndocument's Ezsignformfieldgroups  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsigndocument_get_ezsignformfieldgroups_v1(pki_ezsigndocument_id, async_req=True)
        >>> result = thread.get()

        :param pki_ezsigndocument_id: (required)
        :type pki_ezsigndocument_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: EzsigndocumentGetEzsignformfieldgroupsV1Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the ezsigndocument_get_ezsignformfieldgroups_v1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.ezsigndocument_get_ezsignformfieldgroups_v1_with_http_info(pki_ezsigndocument_id, **kwargs)  # noqa: E501

    @validate_arguments
    def ezsigndocument_get_ezsignformfieldgroups_v1_with_http_info(self, pki_ezsigndocument_id : conint(strict=True, ge=0), **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve an existing Ezsigndocument's Ezsignformfieldgroups  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsigndocument_get_ezsignformfieldgroups_v1_with_http_info(pki_ezsigndocument_id, async_req=True)
        >>> result = thread.get()

        :param pki_ezsigndocument_id: (required)
        :type pki_ezsigndocument_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(EzsigndocumentGetEzsignformfieldgroupsV1Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'pki_ezsigndocument_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ezsigndocument_get_ezsignformfieldgroups_v1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['pki_ezsigndocument_id']:
            _path_params['pkiEzsigndocumentID'] = _params['pki_ezsigndocument_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Authorization']  # noqa: E501

        _response_types_map = {
            '200': "EzsigndocumentGetEzsignformfieldgroupsV1Response",
            '404': "CommonResponseError",
            '422': "CommonResponseError",
        }

        return self.api_client.call_api(
            '/1/object/ezsigndocument/{pkiEzsigndocumentID}/getEzsignformfieldgroups', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def ezsigndocument_get_ezsignpages_v1(self, pki_ezsigndocument_id : conint(strict=True, ge=0), **kwargs) -> EzsigndocumentGetEzsignpagesV1Response:  # noqa: E501
        """Retrieve an existing Ezsigndocument's Ezsignpages  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsigndocument_get_ezsignpages_v1(pki_ezsigndocument_id, async_req=True)
        >>> result = thread.get()

        :param pki_ezsigndocument_id: (required)
        :type pki_ezsigndocument_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: EzsigndocumentGetEzsignpagesV1Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the ezsigndocument_get_ezsignpages_v1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.ezsigndocument_get_ezsignpages_v1_with_http_info(pki_ezsigndocument_id, **kwargs)  # noqa: E501

    @validate_arguments
    def ezsigndocument_get_ezsignpages_v1_with_http_info(self, pki_ezsigndocument_id : conint(strict=True, ge=0), **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve an existing Ezsigndocument's Ezsignpages  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsigndocument_get_ezsignpages_v1_with_http_info(pki_ezsigndocument_id, async_req=True)
        >>> result = thread.get()

        :param pki_ezsigndocument_id: (required)
        :type pki_ezsigndocument_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(EzsigndocumentGetEzsignpagesV1Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'pki_ezsigndocument_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ezsigndocument_get_ezsignpages_v1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['pki_ezsigndocument_id']:
            _path_params['pkiEzsigndocumentID'] = _params['pki_ezsigndocument_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Authorization']  # noqa: E501

        _response_types_map = {
            '200': "EzsigndocumentGetEzsignpagesV1Response",
            '404': "CommonResponseError",
            '422': "CommonResponseError",
        }

        return self.api_client.call_api(
            '/1/object/ezsigndocument/{pkiEzsigndocumentID}/getEzsignpages', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def ezsigndocument_get_ezsignsignatures_automatic_v1(self, pki_ezsigndocument_id : conint(strict=True, ge=0), **kwargs) -> EzsigndocumentGetEzsignsignaturesAutomaticV1Response:  # noqa: E501
        """Retrieve an existing Ezsigndocument's automatic Ezsignsignatures  # noqa: E501

        Return the Ezsignsignatures that can be signed by the current user at the current step in the process  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsigndocument_get_ezsignsignatures_automatic_v1(pki_ezsigndocument_id, async_req=True)
        >>> result = thread.get()

        :param pki_ezsigndocument_id: (required)
        :type pki_ezsigndocument_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: EzsigndocumentGetEzsignsignaturesAutomaticV1Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the ezsigndocument_get_ezsignsignatures_automatic_v1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.ezsigndocument_get_ezsignsignatures_automatic_v1_with_http_info(pki_ezsigndocument_id, **kwargs)  # noqa: E501

    @validate_arguments
    def ezsigndocument_get_ezsignsignatures_automatic_v1_with_http_info(self, pki_ezsigndocument_id : conint(strict=True, ge=0), **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve an existing Ezsigndocument's automatic Ezsignsignatures  # noqa: E501

        Return the Ezsignsignatures that can be signed by the current user at the current step in the process  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsigndocument_get_ezsignsignatures_automatic_v1_with_http_info(pki_ezsigndocument_id, async_req=True)
        >>> result = thread.get()

        :param pki_ezsigndocument_id: (required)
        :type pki_ezsigndocument_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(EzsigndocumentGetEzsignsignaturesAutomaticV1Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'pki_ezsigndocument_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ezsigndocument_get_ezsignsignatures_automatic_v1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['pki_ezsigndocument_id']:
            _path_params['pkiEzsigndocumentID'] = _params['pki_ezsigndocument_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Authorization']  # noqa: E501

        _response_types_map = {
            '200': "EzsigndocumentGetEzsignsignaturesAutomaticV1Response",
            '404': "CommonResponseError",
        }

        return self.api_client.call_api(
            '/1/object/ezsigndocument/{pkiEzsigndocumentID}/getEzsignsignaturesAutomatic', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def ezsigndocument_get_ezsignsignatures_v1(self, pki_ezsigndocument_id : conint(strict=True, ge=0), **kwargs) -> EzsigndocumentGetEzsignsignaturesV1Response:  # noqa: E501
        """Retrieve an existing Ezsigndocument's Ezsignsignatures  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsigndocument_get_ezsignsignatures_v1(pki_ezsigndocument_id, async_req=True)
        >>> result = thread.get()

        :param pki_ezsigndocument_id: (required)
        :type pki_ezsigndocument_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: EzsigndocumentGetEzsignsignaturesV1Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the ezsigndocument_get_ezsignsignatures_v1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.ezsigndocument_get_ezsignsignatures_v1_with_http_info(pki_ezsigndocument_id, **kwargs)  # noqa: E501

    @validate_arguments
    def ezsigndocument_get_ezsignsignatures_v1_with_http_info(self, pki_ezsigndocument_id : conint(strict=True, ge=0), **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve an existing Ezsigndocument's Ezsignsignatures  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsigndocument_get_ezsignsignatures_v1_with_http_info(pki_ezsigndocument_id, async_req=True)
        >>> result = thread.get()

        :param pki_ezsigndocument_id: (required)
        :type pki_ezsigndocument_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(EzsigndocumentGetEzsignsignaturesV1Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'pki_ezsigndocument_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ezsigndocument_get_ezsignsignatures_v1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['pki_ezsigndocument_id']:
            _path_params['pkiEzsigndocumentID'] = _params['pki_ezsigndocument_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Authorization']  # noqa: E501

        _response_types_map = {
            '200': "EzsigndocumentGetEzsignsignaturesV1Response",
            '404': "CommonResponseError",
            '422': "CommonResponseError",
        }

        return self.api_client.call_api(
            '/1/object/ezsigndocument/{pkiEzsigndocumentID}/getEzsignsignatures', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def ezsigndocument_get_form_data_v1(self, pki_ezsigndocument_id : conint(strict=True, ge=0), **kwargs) -> EzsigndocumentGetFormDataV1Response:  # noqa: E501
        """Retrieve an existing Ezsigndocument's Form Data  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsigndocument_get_form_data_v1(pki_ezsigndocument_id, async_req=True)
        >>> result = thread.get()

        :param pki_ezsigndocument_id: (required)
        :type pki_ezsigndocument_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: EzsigndocumentGetFormDataV1Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the ezsigndocument_get_form_data_v1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.ezsigndocument_get_form_data_v1_with_http_info(pki_ezsigndocument_id, **kwargs)  # noqa: E501

    @validate_arguments
    def ezsigndocument_get_form_data_v1_with_http_info(self, pki_ezsigndocument_id : conint(strict=True, ge=0), **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve an existing Ezsigndocument's Form Data  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsigndocument_get_form_data_v1_with_http_info(pki_ezsigndocument_id, async_req=True)
        >>> result = thread.get()

        :param pki_ezsigndocument_id: (required)
        :type pki_ezsigndocument_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(EzsigndocumentGetFormDataV1Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'pki_ezsigndocument_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ezsigndocument_get_form_data_v1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['pki_ezsigndocument_id']:
            _path_params['pkiEzsigndocumentID'] = _params['pki_ezsigndocument_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/zip', 'text/csv'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Authorization']  # noqa: E501

        _response_types_map = {
            '200': "EzsigndocumentGetFormDataV1Response",
            '404': "CommonResponseError",
            '406': "CommonResponseError",
            '422': "CommonResponseError",
        }

        return self.api_client.call_api(
            '/1/object/ezsigndocument/{pkiEzsigndocumentID}/getFormData', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def ezsigndocument_get_object_v1(self, pki_ezsigndocument_id : conint(strict=True, ge=0), **kwargs) -> EzsigndocumentGetObjectV1Response:  # noqa: E501
        """(Deprecated) Retrieve an existing Ezsigndocument  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsigndocument_get_object_v1(pki_ezsigndocument_id, async_req=True)
        >>> result = thread.get()

        :param pki_ezsigndocument_id: (required)
        :type pki_ezsigndocument_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: EzsigndocumentGetObjectV1Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the ezsigndocument_get_object_v1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.ezsigndocument_get_object_v1_with_http_info(pki_ezsigndocument_id, **kwargs)  # noqa: E501

    @validate_arguments
    def ezsigndocument_get_object_v1_with_http_info(self, pki_ezsigndocument_id : conint(strict=True, ge=0), **kwargs) -> ApiResponse:  # noqa: E501
        """(Deprecated) Retrieve an existing Ezsigndocument  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsigndocument_get_object_v1_with_http_info(pki_ezsigndocument_id, async_req=True)
        >>> result = thread.get()

        :param pki_ezsigndocument_id: (required)
        :type pki_ezsigndocument_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(EzsigndocumentGetObjectV1Response, status_code(int), headers(HTTPHeaderDict))
        """

        warnings.warn("GET /1/object/ezsigndocument/{pkiEzsigndocumentID} is deprecated.", DeprecationWarning)

        _params = locals()

        _all_params = [
            'pki_ezsigndocument_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ezsigndocument_get_object_v1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['pki_ezsigndocument_id']:
            _path_params['pkiEzsigndocumentID'] = _params['pki_ezsigndocument_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Authorization']  # noqa: E501

        _response_types_map = {
            '200': "EzsigndocumentGetObjectV1Response",
            '404': "CommonResponseError",
        }

        return self.api_client.call_api(
            '/1/object/ezsigndocument/{pkiEzsigndocumentID}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def ezsigndocument_get_object_v2(self, pki_ezsigndocument_id : conint(strict=True, ge=0), **kwargs) -> EzsigndocumentGetObjectV2Response:  # noqa: E501
        """Retrieve an existing Ezsigndocument  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsigndocument_get_object_v2(pki_ezsigndocument_id, async_req=True)
        >>> result = thread.get()

        :param pki_ezsigndocument_id: (required)
        :type pki_ezsigndocument_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: EzsigndocumentGetObjectV2Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the ezsigndocument_get_object_v2_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.ezsigndocument_get_object_v2_with_http_info(pki_ezsigndocument_id, **kwargs)  # noqa: E501

    @validate_arguments
    def ezsigndocument_get_object_v2_with_http_info(self, pki_ezsigndocument_id : conint(strict=True, ge=0), **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve an existing Ezsigndocument  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsigndocument_get_object_v2_with_http_info(pki_ezsigndocument_id, async_req=True)
        >>> result = thread.get()

        :param pki_ezsigndocument_id: (required)
        :type pki_ezsigndocument_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(EzsigndocumentGetObjectV2Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'pki_ezsigndocument_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ezsigndocument_get_object_v2" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['pki_ezsigndocument_id']:
            _path_params['pkiEzsigndocumentID'] = _params['pki_ezsigndocument_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Authorization']  # noqa: E501

        _response_types_map = {
            '200': "EzsigndocumentGetObjectV2Response",
            '404': "CommonResponseError",
        }

        return self.api_client.call_api(
            '/2/object/ezsigndocument/{pkiEzsigndocumentID}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def ezsigndocument_get_temporary_proof_v1(self, pki_ezsigndocument_id : conint(strict=True, ge=0), **kwargs) -> EzsigndocumentGetTemporaryProofV1Response:  # noqa: E501
        """Retrieve the temporary proof  # noqa: E501

        Retrieve the temporary proof while the Ezsigndocument is being processed since the proof isn't available until the Ezsigndocument is completed  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsigndocument_get_temporary_proof_v1(pki_ezsigndocument_id, async_req=True)
        >>> result = thread.get()

        :param pki_ezsigndocument_id: (required)
        :type pki_ezsigndocument_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: EzsigndocumentGetTemporaryProofV1Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the ezsigndocument_get_temporary_proof_v1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.ezsigndocument_get_temporary_proof_v1_with_http_info(pki_ezsigndocument_id, **kwargs)  # noqa: E501

    @validate_arguments
    def ezsigndocument_get_temporary_proof_v1_with_http_info(self, pki_ezsigndocument_id : conint(strict=True, ge=0), **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve the temporary proof  # noqa: E501

        Retrieve the temporary proof while the Ezsigndocument is being processed since the proof isn't available until the Ezsigndocument is completed  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsigndocument_get_temporary_proof_v1_with_http_info(pki_ezsigndocument_id, async_req=True)
        >>> result = thread.get()

        :param pki_ezsigndocument_id: (required)
        :type pki_ezsigndocument_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(EzsigndocumentGetTemporaryProofV1Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'pki_ezsigndocument_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ezsigndocument_get_temporary_proof_v1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['pki_ezsigndocument_id']:
            _path_params['pkiEzsigndocumentID'] = _params['pki_ezsigndocument_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Authorization']  # noqa: E501

        _response_types_map = {
            '200': "EzsigndocumentGetTemporaryProofV1Response",
            '404': "CommonResponseError",
            '422': "CommonResponseError",
        }

        return self.api_client.call_api(
            '/1/object/ezsigndocument/{pkiEzsigndocumentID}/getTemporaryProof', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def ezsigndocument_get_words_positions_v1(self, pki_ezsigndocument_id : conint(strict=True, ge=0), ezsigndocument_get_words_positions_v1_request : EzsigndocumentGetWordsPositionsV1Request, **kwargs) -> EzsigndocumentGetWordsPositionsV1Response:  # noqa: E501
        """Retrieve positions X,Y of given words from a Ezsigndocument  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsigndocument_get_words_positions_v1(pki_ezsigndocument_id, ezsigndocument_get_words_positions_v1_request, async_req=True)
        >>> result = thread.get()

        :param pki_ezsigndocument_id: (required)
        :type pki_ezsigndocument_id: int
        :param ezsigndocument_get_words_positions_v1_request: (required)
        :type ezsigndocument_get_words_positions_v1_request: EzsigndocumentGetWordsPositionsV1Request
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: EzsigndocumentGetWordsPositionsV1Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the ezsigndocument_get_words_positions_v1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.ezsigndocument_get_words_positions_v1_with_http_info(pki_ezsigndocument_id, ezsigndocument_get_words_positions_v1_request, **kwargs)  # noqa: E501

    @validate_arguments
    def ezsigndocument_get_words_positions_v1_with_http_info(self, pki_ezsigndocument_id : conint(strict=True, ge=0), ezsigndocument_get_words_positions_v1_request : EzsigndocumentGetWordsPositionsV1Request, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve positions X,Y of given words from a Ezsigndocument  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsigndocument_get_words_positions_v1_with_http_info(pki_ezsigndocument_id, ezsigndocument_get_words_positions_v1_request, async_req=True)
        >>> result = thread.get()

        :param pki_ezsigndocument_id: (required)
        :type pki_ezsigndocument_id: int
        :param ezsigndocument_get_words_positions_v1_request: (required)
        :type ezsigndocument_get_words_positions_v1_request: EzsigndocumentGetWordsPositionsV1Request
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(EzsigndocumentGetWordsPositionsV1Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'pki_ezsigndocument_id',
            'ezsigndocument_get_words_positions_v1_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ezsigndocument_get_words_positions_v1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['pki_ezsigndocument_id']:
            _path_params['pkiEzsigndocumentID'] = _params['pki_ezsigndocument_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['ezsigndocument_get_words_positions_v1_request'] is not None:
            _body_params = _params['ezsigndocument_get_words_positions_v1_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['Authorization']  # noqa: E501

        _response_types_map = {
            '200': "EzsigndocumentGetWordsPositionsV1Response",
            '404': "CommonResponseError",
            '422': "CommonResponseError",
        }

        return self.api_client.call_api(
            '/1/object/ezsigndocument/{pkiEzsigndocumentID}/getWordsPositions', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def ezsigndocument_patch_object_v1(self, pki_ezsigndocument_id : conint(strict=True, ge=0), ezsigndocument_patch_object_v1_request : EzsigndocumentPatchObjectV1Request, **kwargs) -> EzsigndocumentPatchObjectV1Response:  # noqa: E501
        """Patch an existing Ezsigndocument  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsigndocument_patch_object_v1(pki_ezsigndocument_id, ezsigndocument_patch_object_v1_request, async_req=True)
        >>> result = thread.get()

        :param pki_ezsigndocument_id: (required)
        :type pki_ezsigndocument_id: int
        :param ezsigndocument_patch_object_v1_request: (required)
        :type ezsigndocument_patch_object_v1_request: EzsigndocumentPatchObjectV1Request
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: EzsigndocumentPatchObjectV1Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the ezsigndocument_patch_object_v1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.ezsigndocument_patch_object_v1_with_http_info(pki_ezsigndocument_id, ezsigndocument_patch_object_v1_request, **kwargs)  # noqa: E501

    @validate_arguments
    def ezsigndocument_patch_object_v1_with_http_info(self, pki_ezsigndocument_id : conint(strict=True, ge=0), ezsigndocument_patch_object_v1_request : EzsigndocumentPatchObjectV1Request, **kwargs) -> ApiResponse:  # noqa: E501
        """Patch an existing Ezsigndocument  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsigndocument_patch_object_v1_with_http_info(pki_ezsigndocument_id, ezsigndocument_patch_object_v1_request, async_req=True)
        >>> result = thread.get()

        :param pki_ezsigndocument_id: (required)
        :type pki_ezsigndocument_id: int
        :param ezsigndocument_patch_object_v1_request: (required)
        :type ezsigndocument_patch_object_v1_request: EzsigndocumentPatchObjectV1Request
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(EzsigndocumentPatchObjectV1Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'pki_ezsigndocument_id',
            'ezsigndocument_patch_object_v1_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ezsigndocument_patch_object_v1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['pki_ezsigndocument_id']:
            _path_params['pkiEzsigndocumentID'] = _params['pki_ezsigndocument_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['ezsigndocument_patch_object_v1_request'] is not None:
            _body_params = _params['ezsigndocument_patch_object_v1_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['Authorization']  # noqa: E501

        _response_types_map = {
            '200': "EzsigndocumentPatchObjectV1Response",
            '404': "CommonResponseError",
            '422': "CommonResponseError",
        }

        return self.api_client.call_api(
            '/1/object/ezsigndocument/{pkiEzsigndocumentID}', 'PATCH',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def ezsigndocument_submit_ezsignform_v1(self, pki_ezsigndocument_id : conint(strict=True, ge=0), ezsigndocument_submit_ezsignform_v1_request : EzsigndocumentSubmitEzsignformV1Request, **kwargs) -> EzsigndocumentSubmitEzsignformV1Response:  # noqa: E501
        """Submit the Ezsignform  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsigndocument_submit_ezsignform_v1(pki_ezsigndocument_id, ezsigndocument_submit_ezsignform_v1_request, async_req=True)
        >>> result = thread.get()

        :param pki_ezsigndocument_id: (required)
        :type pki_ezsigndocument_id: int
        :param ezsigndocument_submit_ezsignform_v1_request: (required)
        :type ezsigndocument_submit_ezsignform_v1_request: EzsigndocumentSubmitEzsignformV1Request
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: EzsigndocumentSubmitEzsignformV1Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the ezsigndocument_submit_ezsignform_v1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.ezsigndocument_submit_ezsignform_v1_with_http_info(pki_ezsigndocument_id, ezsigndocument_submit_ezsignform_v1_request, **kwargs)  # noqa: E501

    @validate_arguments
    def ezsigndocument_submit_ezsignform_v1_with_http_info(self, pki_ezsigndocument_id : conint(strict=True, ge=0), ezsigndocument_submit_ezsignform_v1_request : EzsigndocumentSubmitEzsignformV1Request, **kwargs) -> ApiResponse:  # noqa: E501
        """Submit the Ezsignform  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsigndocument_submit_ezsignform_v1_with_http_info(pki_ezsigndocument_id, ezsigndocument_submit_ezsignform_v1_request, async_req=True)
        >>> result = thread.get()

        :param pki_ezsigndocument_id: (required)
        :type pki_ezsigndocument_id: int
        :param ezsigndocument_submit_ezsignform_v1_request: (required)
        :type ezsigndocument_submit_ezsignform_v1_request: EzsigndocumentSubmitEzsignformV1Request
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(EzsigndocumentSubmitEzsignformV1Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'pki_ezsigndocument_id',
            'ezsigndocument_submit_ezsignform_v1_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ezsigndocument_submit_ezsignform_v1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['pki_ezsigndocument_id']:
            _path_params['pkiEzsigndocumentID'] = _params['pki_ezsigndocument_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['ezsigndocument_submit_ezsignform_v1_request'] is not None:
            _body_params = _params['ezsigndocument_submit_ezsignform_v1_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['Authorization']  # noqa: E501

        _response_types_map = {
            '200': "EzsigndocumentSubmitEzsignformV1Response",
            '404': "CommonResponseError",
            '422': "CommonResponseErrorEzsignformValidation",
        }

        return self.api_client.call_api(
            '/1/object/ezsigndocument/{pkiEzsigndocumentID}/submitEzsignform', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def ezsigndocument_unsend_v1(self, pki_ezsigndocument_id : conint(strict=True, ge=0), body : Dict[str, Any], **kwargs) -> EzsigndocumentUnsendV1Response:  # noqa: E501
        """Unsend the Ezsigndocument  # noqa: E501

        Once an Ezsigndocument has been sent to signatories, it cannot be modified.  Using this endpoint, you can unsend the Ezsigndocument and make it modifiable again.  Signatories will receive an email informing them the signature process was aborted and they might receive a new invitation to sign.  ⚠️ Warning: Any signature previously made by signatories on this Ezsigndocumentswill be lost.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsigndocument_unsend_v1(pki_ezsigndocument_id, body, async_req=True)
        >>> result = thread.get()

        :param pki_ezsigndocument_id: (required)
        :type pki_ezsigndocument_id: int
        :param body: (required)
        :type body: object
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: EzsigndocumentUnsendV1Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the ezsigndocument_unsend_v1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.ezsigndocument_unsend_v1_with_http_info(pki_ezsigndocument_id, body, **kwargs)  # noqa: E501

    @validate_arguments
    def ezsigndocument_unsend_v1_with_http_info(self, pki_ezsigndocument_id : conint(strict=True, ge=0), body : Dict[str, Any], **kwargs) -> ApiResponse:  # noqa: E501
        """Unsend the Ezsigndocument  # noqa: E501

        Once an Ezsigndocument has been sent to signatories, it cannot be modified.  Using this endpoint, you can unsend the Ezsigndocument and make it modifiable again.  Signatories will receive an email informing them the signature process was aborted and they might receive a new invitation to sign.  ⚠️ Warning: Any signature previously made by signatories on this Ezsigndocumentswill be lost.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsigndocument_unsend_v1_with_http_info(pki_ezsigndocument_id, body, async_req=True)
        >>> result = thread.get()

        :param pki_ezsigndocument_id: (required)
        :type pki_ezsigndocument_id: int
        :param body: (required)
        :type body: object
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(EzsigndocumentUnsendV1Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'pki_ezsigndocument_id',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ezsigndocument_unsend_v1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['pki_ezsigndocument_id']:
            _path_params['pkiEzsigndocumentID'] = _params['pki_ezsigndocument_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['Authorization']  # noqa: E501

        _response_types_map = {
            '200': "EzsigndocumentUnsendV1Response",
            '404': "CommonResponseError",
            '422': "CommonResponseError",
        }

        return self.api_client.call_api(
            '/1/object/ezsigndocument/{pkiEzsigndocumentID}/unsend', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
