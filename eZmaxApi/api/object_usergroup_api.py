# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.0
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from pydantic import Field, StrictStr, conint

from typing import Optional

from eZmaxApi.models.header_accept_language import HeaderAcceptLanguage
from eZmaxApi.models.usergroup_create_object_v1_request import UsergroupCreateObjectV1Request
from eZmaxApi.models.usergroup_create_object_v1_response import UsergroupCreateObjectV1Response
from eZmaxApi.models.usergroup_edit_object_v1_request import UsergroupEditObjectV1Request
from eZmaxApi.models.usergroup_edit_object_v1_response import UsergroupEditObjectV1Response
from eZmaxApi.models.usergroup_edit_permissions_v1_request import UsergroupEditPermissionsV1Request
from eZmaxApi.models.usergroup_edit_permissions_v1_response import UsergroupEditPermissionsV1Response
from eZmaxApi.models.usergroup_edit_usergroupdelegations_v1_request import UsergroupEditUsergroupdelegationsV1Request
from eZmaxApi.models.usergroup_edit_usergroupdelegations_v1_response import UsergroupEditUsergroupdelegationsV1Response
from eZmaxApi.models.usergroup_edit_usergroupmemberships_v1_request import UsergroupEditUsergroupmembershipsV1Request
from eZmaxApi.models.usergroup_edit_usergroupmemberships_v1_response import UsergroupEditUsergroupmembershipsV1Response
from eZmaxApi.models.usergroup_get_autocomplete_v2_response import UsergroupGetAutocompleteV2Response
from eZmaxApi.models.usergroup_get_list_v1_response import UsergroupGetListV1Response
from eZmaxApi.models.usergroup_get_object_v2_response import UsergroupGetObjectV2Response
from eZmaxApi.models.usergroup_get_permissions_v1_response import UsergroupGetPermissionsV1Response
from eZmaxApi.models.usergroup_get_usergroupdelegations_v1_response import UsergroupGetUsergroupdelegationsV1Response
from eZmaxApi.models.usergroup_get_usergroupmemberships_v1_response import UsergroupGetUsergroupmembershipsV1Response

from eZmaxApi.api_client import ApiClient
from eZmaxApi.api_response import ApiResponse
from eZmaxApi.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class ObjectUsergroupApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def usergroup_create_object_v1(self, usergroup_create_object_v1_request : UsergroupCreateObjectV1Request, **kwargs) -> UsergroupCreateObjectV1Response:  # noqa: E501
        """Create a new Usergroup  # noqa: E501

        The endpoint allows to create one or many elements at once.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.usergroup_create_object_v1(usergroup_create_object_v1_request, async_req=True)
        >>> result = thread.get()

        :param usergroup_create_object_v1_request: (required)
        :type usergroup_create_object_v1_request: UsergroupCreateObjectV1Request
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: UsergroupCreateObjectV1Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the usergroup_create_object_v1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.usergroup_create_object_v1_with_http_info(usergroup_create_object_v1_request, **kwargs)  # noqa: E501

    @validate_arguments
    def usergroup_create_object_v1_with_http_info(self, usergroup_create_object_v1_request : UsergroupCreateObjectV1Request, **kwargs) -> ApiResponse:  # noqa: E501
        """Create a new Usergroup  # noqa: E501

        The endpoint allows to create one or many elements at once.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.usergroup_create_object_v1_with_http_info(usergroup_create_object_v1_request, async_req=True)
        >>> result = thread.get()

        :param usergroup_create_object_v1_request: (required)
        :type usergroup_create_object_v1_request: UsergroupCreateObjectV1Request
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(UsergroupCreateObjectV1Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'usergroup_create_object_v1_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method usergroup_create_object_v1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['usergroup_create_object_v1_request'] is not None:
            _body_params = _params['usergroup_create_object_v1_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['Authorization']  # noqa: E501

        _response_types_map = {
            '201': "UsergroupCreateObjectV1Response",
        }

        return self.api_client.call_api(
            '/1/object/usergroup', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def usergroup_edit_object_v1(self, pki_usergroup_id : conint(strict=True, le=255, ge=0), usergroup_edit_object_v1_request : UsergroupEditObjectV1Request, **kwargs) -> UsergroupEditObjectV1Response:  # noqa: E501
        """Edit an existing Usergroup  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.usergroup_edit_object_v1(pki_usergroup_id, usergroup_edit_object_v1_request, async_req=True)
        >>> result = thread.get()

        :param pki_usergroup_id: (required)
        :type pki_usergroup_id: int
        :param usergroup_edit_object_v1_request: (required)
        :type usergroup_edit_object_v1_request: UsergroupEditObjectV1Request
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: UsergroupEditObjectV1Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the usergroup_edit_object_v1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.usergroup_edit_object_v1_with_http_info(pki_usergroup_id, usergroup_edit_object_v1_request, **kwargs)  # noqa: E501

    @validate_arguments
    def usergroup_edit_object_v1_with_http_info(self, pki_usergroup_id : conint(strict=True, le=255, ge=0), usergroup_edit_object_v1_request : UsergroupEditObjectV1Request, **kwargs) -> ApiResponse:  # noqa: E501
        """Edit an existing Usergroup  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.usergroup_edit_object_v1_with_http_info(pki_usergroup_id, usergroup_edit_object_v1_request, async_req=True)
        >>> result = thread.get()

        :param pki_usergroup_id: (required)
        :type pki_usergroup_id: int
        :param usergroup_edit_object_v1_request: (required)
        :type usergroup_edit_object_v1_request: UsergroupEditObjectV1Request
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(UsergroupEditObjectV1Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'pki_usergroup_id',
            'usergroup_edit_object_v1_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method usergroup_edit_object_v1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['pki_usergroup_id']:
            _path_params['pkiUsergroupID'] = _params['pki_usergroup_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['usergroup_edit_object_v1_request'] is not None:
            _body_params = _params['usergroup_edit_object_v1_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['Authorization']  # noqa: E501

        _response_types_map = {
            '200': "UsergroupEditObjectV1Response",
            '404': "CommonResponseError",
            '422': "CommonResponseError",
        }

        return self.api_client.call_api(
            '/1/object/usergroup/{pkiUsergroupID}', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def usergroup_edit_permissions_v1(self, pki_usergroup_id : conint(strict=True, le=255, ge=0), usergroup_edit_permissions_v1_request : UsergroupEditPermissionsV1Request, **kwargs) -> UsergroupEditPermissionsV1Response:  # noqa: E501
        """Edit multiple Permissions  # noqa: E501

        Using this endpoint, you can edit multiple Permissions at the same time.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.usergroup_edit_permissions_v1(pki_usergroup_id, usergroup_edit_permissions_v1_request, async_req=True)
        >>> result = thread.get()

        :param pki_usergroup_id: (required)
        :type pki_usergroup_id: int
        :param usergroup_edit_permissions_v1_request: (required)
        :type usergroup_edit_permissions_v1_request: UsergroupEditPermissionsV1Request
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: UsergroupEditPermissionsV1Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the usergroup_edit_permissions_v1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.usergroup_edit_permissions_v1_with_http_info(pki_usergroup_id, usergroup_edit_permissions_v1_request, **kwargs)  # noqa: E501

    @validate_arguments
    def usergroup_edit_permissions_v1_with_http_info(self, pki_usergroup_id : conint(strict=True, le=255, ge=0), usergroup_edit_permissions_v1_request : UsergroupEditPermissionsV1Request, **kwargs) -> ApiResponse:  # noqa: E501
        """Edit multiple Permissions  # noqa: E501

        Using this endpoint, you can edit multiple Permissions at the same time.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.usergroup_edit_permissions_v1_with_http_info(pki_usergroup_id, usergroup_edit_permissions_v1_request, async_req=True)
        >>> result = thread.get()

        :param pki_usergroup_id: (required)
        :type pki_usergroup_id: int
        :param usergroup_edit_permissions_v1_request: (required)
        :type usergroup_edit_permissions_v1_request: UsergroupEditPermissionsV1Request
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(UsergroupEditPermissionsV1Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'pki_usergroup_id',
            'usergroup_edit_permissions_v1_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method usergroup_edit_permissions_v1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['pki_usergroup_id']:
            _path_params['pkiUsergroupID'] = _params['pki_usergroup_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['usergroup_edit_permissions_v1_request'] is not None:
            _body_params = _params['usergroup_edit_permissions_v1_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['Authorization']  # noqa: E501

        _response_types_map = {
            '200': "UsergroupEditPermissionsV1Response",
            '404': "CommonResponseError",
            '422': "CommonResponseError",
        }

        return self.api_client.call_api(
            '/1/object/usergroup/{pkiUsergroupID}/editPermissions', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def usergroup_edit_usergroupdelegations_v1(self, pki_usergroup_id : conint(strict=True, le=255, ge=0), usergroup_edit_usergroupdelegations_v1_request : UsergroupEditUsergroupdelegationsV1Request, **kwargs) -> UsergroupEditUsergroupdelegationsV1Response:  # noqa: E501
        """Edit multiple Usergroupdelegations  # noqa: E501

        Edit multiple Usergroupdelegations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.usergroup_edit_usergroupdelegations_v1(pki_usergroup_id, usergroup_edit_usergroupdelegations_v1_request, async_req=True)
        >>> result = thread.get()

        :param pki_usergroup_id: (required)
        :type pki_usergroup_id: int
        :param usergroup_edit_usergroupdelegations_v1_request: (required)
        :type usergroup_edit_usergroupdelegations_v1_request: UsergroupEditUsergroupdelegationsV1Request
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: UsergroupEditUsergroupdelegationsV1Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the usergroup_edit_usergroupdelegations_v1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.usergroup_edit_usergroupdelegations_v1_with_http_info(pki_usergroup_id, usergroup_edit_usergroupdelegations_v1_request, **kwargs)  # noqa: E501

    @validate_arguments
    def usergroup_edit_usergroupdelegations_v1_with_http_info(self, pki_usergroup_id : conint(strict=True, le=255, ge=0), usergroup_edit_usergroupdelegations_v1_request : UsergroupEditUsergroupdelegationsV1Request, **kwargs) -> ApiResponse:  # noqa: E501
        """Edit multiple Usergroupdelegations  # noqa: E501

        Edit multiple Usergroupdelegations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.usergroup_edit_usergroupdelegations_v1_with_http_info(pki_usergroup_id, usergroup_edit_usergroupdelegations_v1_request, async_req=True)
        >>> result = thread.get()

        :param pki_usergroup_id: (required)
        :type pki_usergroup_id: int
        :param usergroup_edit_usergroupdelegations_v1_request: (required)
        :type usergroup_edit_usergroupdelegations_v1_request: UsergroupEditUsergroupdelegationsV1Request
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(UsergroupEditUsergroupdelegationsV1Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'pki_usergroup_id',
            'usergroup_edit_usergroupdelegations_v1_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method usergroup_edit_usergroupdelegations_v1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['pki_usergroup_id']:
            _path_params['pkiUsergroupID'] = _params['pki_usergroup_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['usergroup_edit_usergroupdelegations_v1_request'] is not None:
            _body_params = _params['usergroup_edit_usergroupdelegations_v1_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['Authorization']  # noqa: E501

        _response_types_map = {
            '200': "UsergroupEditUsergroupdelegationsV1Response",
            '404': "CommonResponseError",
            '422': "CommonResponseError",
        }

        return self.api_client.call_api(
            '/1/object/usergroup/{pkiUsergroupID}/editUsergroupdelegations', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def usergroup_edit_usergroupmemberships_v1(self, pki_usergroup_id : conint(strict=True, le=255, ge=0), usergroup_edit_usergroupmemberships_v1_request : UsergroupEditUsergroupmembershipsV1Request, **kwargs) -> UsergroupEditUsergroupmembershipsV1Response:  # noqa: E501
        """Edit multiple Usergroupmemberships  # noqa: E501

        Using this endpoint, you can edit multiple Usergroupmemberships at the same time.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.usergroup_edit_usergroupmemberships_v1(pki_usergroup_id, usergroup_edit_usergroupmemberships_v1_request, async_req=True)
        >>> result = thread.get()

        :param pki_usergroup_id: (required)
        :type pki_usergroup_id: int
        :param usergroup_edit_usergroupmemberships_v1_request: (required)
        :type usergroup_edit_usergroupmemberships_v1_request: UsergroupEditUsergroupmembershipsV1Request
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: UsergroupEditUsergroupmembershipsV1Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the usergroup_edit_usergroupmemberships_v1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.usergroup_edit_usergroupmemberships_v1_with_http_info(pki_usergroup_id, usergroup_edit_usergroupmemberships_v1_request, **kwargs)  # noqa: E501

    @validate_arguments
    def usergroup_edit_usergroupmemberships_v1_with_http_info(self, pki_usergroup_id : conint(strict=True, le=255, ge=0), usergroup_edit_usergroupmemberships_v1_request : UsergroupEditUsergroupmembershipsV1Request, **kwargs) -> ApiResponse:  # noqa: E501
        """Edit multiple Usergroupmemberships  # noqa: E501

        Using this endpoint, you can edit multiple Usergroupmemberships at the same time.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.usergroup_edit_usergroupmemberships_v1_with_http_info(pki_usergroup_id, usergroup_edit_usergroupmemberships_v1_request, async_req=True)
        >>> result = thread.get()

        :param pki_usergroup_id: (required)
        :type pki_usergroup_id: int
        :param usergroup_edit_usergroupmemberships_v1_request: (required)
        :type usergroup_edit_usergroupmemberships_v1_request: UsergroupEditUsergroupmembershipsV1Request
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(UsergroupEditUsergroupmembershipsV1Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'pki_usergroup_id',
            'usergroup_edit_usergroupmemberships_v1_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method usergroup_edit_usergroupmemberships_v1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['pki_usergroup_id']:
            _path_params['pkiUsergroupID'] = _params['pki_usergroup_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['usergroup_edit_usergroupmemberships_v1_request'] is not None:
            _body_params = _params['usergroup_edit_usergroupmemberships_v1_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['Authorization']  # noqa: E501

        _response_types_map = {
            '200': "UsergroupEditUsergroupmembershipsV1Response",
            '404': "CommonResponseError",
            '422': "CommonResponseError",
        }

        return self.api_client.call_api(
            '/1/object/usergroup/{pkiUsergroupID}/editUsergroupmemberships', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def usergroup_get_autocomplete_v2(self, s_selector : Annotated[StrictStr, Field(..., description="The type of Usergroups to return")], e_filter_active : Annotated[Optional[StrictStr], Field(description="Specify which results we want to display.")] = None, s_query : Annotated[Optional[StrictStr], Field(description="Allow to filter the returned results")] = None, accept_language : Optional[HeaderAcceptLanguage] = None, **kwargs) -> UsergroupGetAutocompleteV2Response:  # noqa: E501
        """Retrieve Usergroups and IDs  # noqa: E501

        Get the list of Usergroup to be used in a dropdown or autocomplete control.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.usergroup_get_autocomplete_v2(s_selector, e_filter_active, s_query, accept_language, async_req=True)
        >>> result = thread.get()

        :param s_selector: The type of Usergroups to return (required)
        :type s_selector: str
        :param e_filter_active: Specify which results we want to display.
        :type e_filter_active: str
        :param s_query: Allow to filter the returned results
        :type s_query: str
        :param accept_language:
        :type accept_language: HeaderAcceptLanguage
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: UsergroupGetAutocompleteV2Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the usergroup_get_autocomplete_v2_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.usergroup_get_autocomplete_v2_with_http_info(s_selector, e_filter_active, s_query, accept_language, **kwargs)  # noqa: E501

    @validate_arguments
    def usergroup_get_autocomplete_v2_with_http_info(self, s_selector : Annotated[StrictStr, Field(..., description="The type of Usergroups to return")], e_filter_active : Annotated[Optional[StrictStr], Field(description="Specify which results we want to display.")] = None, s_query : Annotated[Optional[StrictStr], Field(description="Allow to filter the returned results")] = None, accept_language : Optional[HeaderAcceptLanguage] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Usergroups and IDs  # noqa: E501

        Get the list of Usergroup to be used in a dropdown or autocomplete control.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.usergroup_get_autocomplete_v2_with_http_info(s_selector, e_filter_active, s_query, accept_language, async_req=True)
        >>> result = thread.get()

        :param s_selector: The type of Usergroups to return (required)
        :type s_selector: str
        :param e_filter_active: Specify which results we want to display.
        :type e_filter_active: str
        :param s_query: Allow to filter the returned results
        :type s_query: str
        :param accept_language:
        :type accept_language: HeaderAcceptLanguage
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(UsergroupGetAutocompleteV2Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            's_selector',
            'e_filter_active',
            's_query',
            'accept_language'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method usergroup_get_autocomplete_v2" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['s_selector']:
            _path_params['sSelector'] = _params['s_selector']


        # process the query parameters
        _query_params = []
        if _params.get('e_filter_active') is not None:  # noqa: E501
            _query_params.append(('eFilterActive', _params['e_filter_active']))

        if _params.get('s_query') is not None:  # noqa: E501
            _query_params.append(('sQuery', _params['s_query']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['accept_language']:
            _header_params['Accept-Language'] = _params['accept_language']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Authorization']  # noqa: E501

        _response_types_map = {
            '200': "UsergroupGetAutocompleteV2Response",
        }

        return self.api_client.call_api(
            '/2/object/usergroup/getAutocomplete/{sSelector}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def usergroup_get_list_v1(self, e_order_by : Annotated[Optional[StrictStr], Field(description="Specify how you want the results to be sorted")] = None, i_row_max : Optional[conint(strict=True, le=10000, ge=1)] = None, i_row_offset : Optional[conint(strict=True, ge=0)] = None, accept_language : Optional[HeaderAcceptLanguage] = None, s_filter : Optional[StrictStr] = None, **kwargs) -> UsergroupGetListV1Response:  # noqa: E501
        """Retrieve Usergroup list  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.usergroup_get_list_v1(e_order_by, i_row_max, i_row_offset, accept_language, s_filter, async_req=True)
        >>> result = thread.get()

        :param e_order_by: Specify how you want the results to be sorted
        :type e_order_by: str
        :param i_row_max:
        :type i_row_max: int
        :param i_row_offset:
        :type i_row_offset: int
        :param accept_language:
        :type accept_language: HeaderAcceptLanguage
        :param s_filter:
        :type s_filter: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: UsergroupGetListV1Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the usergroup_get_list_v1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.usergroup_get_list_v1_with_http_info(e_order_by, i_row_max, i_row_offset, accept_language, s_filter, **kwargs)  # noqa: E501

    @validate_arguments
    def usergroup_get_list_v1_with_http_info(self, e_order_by : Annotated[Optional[StrictStr], Field(description="Specify how you want the results to be sorted")] = None, i_row_max : Optional[conint(strict=True, le=10000, ge=1)] = None, i_row_offset : Optional[conint(strict=True, ge=0)] = None, accept_language : Optional[HeaderAcceptLanguage] = None, s_filter : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve Usergroup list  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.usergroup_get_list_v1_with_http_info(e_order_by, i_row_max, i_row_offset, accept_language, s_filter, async_req=True)
        >>> result = thread.get()

        :param e_order_by: Specify how you want the results to be sorted
        :type e_order_by: str
        :param i_row_max:
        :type i_row_max: int
        :param i_row_offset:
        :type i_row_offset: int
        :param accept_language:
        :type accept_language: HeaderAcceptLanguage
        :param s_filter:
        :type s_filter: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(UsergroupGetListV1Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'e_order_by',
            'i_row_max',
            'i_row_offset',
            'accept_language',
            's_filter'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method usergroup_get_list_v1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('e_order_by') is not None:  # noqa: E501
            _query_params.append(('eOrderBy', _params['e_order_by']))

        if _params.get('i_row_max') is not None:  # noqa: E501
            _query_params.append(('iRowMax', _params['i_row_max']))

        if _params.get('i_row_offset') is not None:  # noqa: E501
            _query_params.append(('iRowOffset', _params['i_row_offset']))

        if _params.get('s_filter') is not None:  # noqa: E501
            _query_params.append(('sFilter', _params['s_filter']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['accept_language']:
            _header_params['Accept-Language'] = _params['accept_language']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Authorization']  # noqa: E501

        _response_types_map = {
            '200': "UsergroupGetListV1Response",
            '406': "CommonResponseError",
        }

        return self.api_client.call_api(
            '/1/object/usergroup/getList', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def usergroup_get_object_v2(self, pki_usergroup_id : conint(strict=True, le=255, ge=0), **kwargs) -> UsergroupGetObjectV2Response:  # noqa: E501
        """Retrieve an existing Usergroup  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.usergroup_get_object_v2(pki_usergroup_id, async_req=True)
        >>> result = thread.get()

        :param pki_usergroup_id: (required)
        :type pki_usergroup_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: UsergroupGetObjectV2Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the usergroup_get_object_v2_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.usergroup_get_object_v2_with_http_info(pki_usergroup_id, **kwargs)  # noqa: E501

    @validate_arguments
    def usergroup_get_object_v2_with_http_info(self, pki_usergroup_id : conint(strict=True, le=255, ge=0), **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve an existing Usergroup  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.usergroup_get_object_v2_with_http_info(pki_usergroup_id, async_req=True)
        >>> result = thread.get()

        :param pki_usergroup_id: (required)
        :type pki_usergroup_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(UsergroupGetObjectV2Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'pki_usergroup_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method usergroup_get_object_v2" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['pki_usergroup_id']:
            _path_params['pkiUsergroupID'] = _params['pki_usergroup_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Authorization']  # noqa: E501

        _response_types_map = {
            '200': "UsergroupGetObjectV2Response",
            '404': "CommonResponseError",
        }

        return self.api_client.call_api(
            '/2/object/usergroup/{pkiUsergroupID}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def usergroup_get_permissions_v1(self, pki_usergroup_id : conint(strict=True, le=255, ge=0), **kwargs) -> UsergroupGetPermissionsV1Response:  # noqa: E501
        """Retrieve an existing Usergroup's Permissions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.usergroup_get_permissions_v1(pki_usergroup_id, async_req=True)
        >>> result = thread.get()

        :param pki_usergroup_id: (required)
        :type pki_usergroup_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: UsergroupGetPermissionsV1Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the usergroup_get_permissions_v1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.usergroup_get_permissions_v1_with_http_info(pki_usergroup_id, **kwargs)  # noqa: E501

    @validate_arguments
    def usergroup_get_permissions_v1_with_http_info(self, pki_usergroup_id : conint(strict=True, le=255, ge=0), **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve an existing Usergroup's Permissions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.usergroup_get_permissions_v1_with_http_info(pki_usergroup_id, async_req=True)
        >>> result = thread.get()

        :param pki_usergroup_id: (required)
        :type pki_usergroup_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(UsergroupGetPermissionsV1Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'pki_usergroup_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method usergroup_get_permissions_v1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['pki_usergroup_id']:
            _path_params['pkiUsergroupID'] = _params['pki_usergroup_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Authorization']  # noqa: E501

        _response_types_map = {
            '200': "UsergroupGetPermissionsV1Response",
            '404': "CommonResponseError",
        }

        return self.api_client.call_api(
            '/1/object/usergroup/{pkiUsergroupID}/getPermissions', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def usergroup_get_usergroupdelegations_v1(self, pki_usergroup_id : conint(strict=True, le=255, ge=0), **kwargs) -> UsergroupGetUsergroupdelegationsV1Response:  # noqa: E501
        """Retrieve an existing Usergroup's Usergroupdelegations  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.usergroup_get_usergroupdelegations_v1(pki_usergroup_id, async_req=True)
        >>> result = thread.get()

        :param pki_usergroup_id: (required)
        :type pki_usergroup_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: UsergroupGetUsergroupdelegationsV1Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the usergroup_get_usergroupdelegations_v1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.usergroup_get_usergroupdelegations_v1_with_http_info(pki_usergroup_id, **kwargs)  # noqa: E501

    @validate_arguments
    def usergroup_get_usergroupdelegations_v1_with_http_info(self, pki_usergroup_id : conint(strict=True, le=255, ge=0), **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve an existing Usergroup's Usergroupdelegations  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.usergroup_get_usergroupdelegations_v1_with_http_info(pki_usergroup_id, async_req=True)
        >>> result = thread.get()

        :param pki_usergroup_id: (required)
        :type pki_usergroup_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(UsergroupGetUsergroupdelegationsV1Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'pki_usergroup_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method usergroup_get_usergroupdelegations_v1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['pki_usergroup_id']:
            _path_params['pkiUsergroupID'] = _params['pki_usergroup_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Authorization']  # noqa: E501

        _response_types_map = {
            '200': "UsergroupGetUsergroupdelegationsV1Response",
            '404': "CommonResponseError",
        }

        return self.api_client.call_api(
            '/1/object/usergroup/{pkiUsergroupID}/getUsergroupdelegations', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def usergroup_get_usergroupmemberships_v1(self, pki_usergroup_id : conint(strict=True, le=255, ge=0), **kwargs) -> UsergroupGetUsergroupmembershipsV1Response:  # noqa: E501
        """Retrieve an existing Usergroup's Usergroupmemberships  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.usergroup_get_usergroupmemberships_v1(pki_usergroup_id, async_req=True)
        >>> result = thread.get()

        :param pki_usergroup_id: (required)
        :type pki_usergroup_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: UsergroupGetUsergroupmembershipsV1Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the usergroup_get_usergroupmemberships_v1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.usergroup_get_usergroupmemberships_v1_with_http_info(pki_usergroup_id, **kwargs)  # noqa: E501

    @validate_arguments
    def usergroup_get_usergroupmemberships_v1_with_http_info(self, pki_usergroup_id : conint(strict=True, le=255, ge=0), **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve an existing Usergroup's Usergroupmemberships  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.usergroup_get_usergroupmemberships_v1_with_http_info(pki_usergroup_id, async_req=True)
        >>> result = thread.get()

        :param pki_usergroup_id: (required)
        :type pki_usergroup_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(UsergroupGetUsergroupmembershipsV1Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'pki_usergroup_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method usergroup_get_usergroupmemberships_v1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['pki_usergroup_id']:
            _path_params['pkiUsergroupID'] = _params['pki_usergroup_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Authorization']  # noqa: E501

        _response_types_map = {
            '200': "UsergroupGetUsergroupmembershipsV1Response",
            '404': "CommonResponseError",
        }

        return self.api_client.call_api(
            '/1/object/usergroup/{pkiUsergroupID}/getUsergroupmemberships', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
