# coding: utf-8

"""
    eZmax API Definition (Full)

    This API expose all the functionnalities for the eZmax and eZsign applications.

    The version of the OpenAPI document: 1.2.0
    Contact: support-api@ezmax.ca
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from pydantic import conint

from typing import Any, Dict

from eZmaxApi.models.ezsigntemplatedocument_create_object_v1_request import EzsigntemplatedocumentCreateObjectV1Request
from eZmaxApi.models.ezsigntemplatedocument_create_object_v1_response import EzsigntemplatedocumentCreateObjectV1Response
from eZmaxApi.models.ezsigntemplatedocument_edit_ezsigntemplateformfieldgroups_v1_request import EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request
from eZmaxApi.models.ezsigntemplatedocument_edit_ezsigntemplateformfieldgroups_v1_response import EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Response
from eZmaxApi.models.ezsigntemplatedocument_edit_ezsigntemplatesignatures_v1_request import EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Request
from eZmaxApi.models.ezsigntemplatedocument_edit_ezsigntemplatesignatures_v1_response import EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Response
from eZmaxApi.models.ezsigntemplatedocument_edit_object_v1_request import EzsigntemplatedocumentEditObjectV1Request
from eZmaxApi.models.ezsigntemplatedocument_edit_object_v1_response import EzsigntemplatedocumentEditObjectV1Response
from eZmaxApi.models.ezsigntemplatedocument_flatten_v1_response import EzsigntemplatedocumentFlattenV1Response
from eZmaxApi.models.ezsigntemplatedocument_get_ezsigntemplatedocumentpages_v1_response import EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1Response
from eZmaxApi.models.ezsigntemplatedocument_get_ezsigntemplateformfieldgroups_v1_response import EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1Response
from eZmaxApi.models.ezsigntemplatedocument_get_ezsigntemplatesignatures_v1_response import EzsigntemplatedocumentGetEzsigntemplatesignaturesV1Response
from eZmaxApi.models.ezsigntemplatedocument_get_object_v2_response import EzsigntemplatedocumentGetObjectV2Response
from eZmaxApi.models.ezsigntemplatedocument_get_words_positions_v1_request import EzsigntemplatedocumentGetWordsPositionsV1Request
from eZmaxApi.models.ezsigntemplatedocument_get_words_positions_v1_response import EzsigntemplatedocumentGetWordsPositionsV1Response
from eZmaxApi.models.ezsigntemplatedocument_patch_object_v1_request import EzsigntemplatedocumentPatchObjectV1Request
from eZmaxApi.models.ezsigntemplatedocument_patch_object_v1_response import EzsigntemplatedocumentPatchObjectV1Response

from eZmaxApi.api_client import ApiClient
from eZmaxApi.api_response import ApiResponse
from eZmaxApi.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class ObjectEzsigntemplatedocumentApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def ezsigntemplatedocument_create_object_v1(self, ezsigntemplatedocument_create_object_v1_request : EzsigntemplatedocumentCreateObjectV1Request, **kwargs) -> EzsigntemplatedocumentCreateObjectV1Response:  # noqa: E501
        """Create a new Ezsigntemplatedocument  # noqa: E501

        The endpoint allows to create one or many elements at once.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsigntemplatedocument_create_object_v1(ezsigntemplatedocument_create_object_v1_request, async_req=True)
        >>> result = thread.get()

        :param ezsigntemplatedocument_create_object_v1_request: (required)
        :type ezsigntemplatedocument_create_object_v1_request: EzsigntemplatedocumentCreateObjectV1Request
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: EzsigntemplatedocumentCreateObjectV1Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the ezsigntemplatedocument_create_object_v1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.ezsigntemplatedocument_create_object_v1_with_http_info(ezsigntemplatedocument_create_object_v1_request, **kwargs)  # noqa: E501

    @validate_arguments
    def ezsigntemplatedocument_create_object_v1_with_http_info(self, ezsigntemplatedocument_create_object_v1_request : EzsigntemplatedocumentCreateObjectV1Request, **kwargs) -> ApiResponse:  # noqa: E501
        """Create a new Ezsigntemplatedocument  # noqa: E501

        The endpoint allows to create one or many elements at once.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsigntemplatedocument_create_object_v1_with_http_info(ezsigntemplatedocument_create_object_v1_request, async_req=True)
        >>> result = thread.get()

        :param ezsigntemplatedocument_create_object_v1_request: (required)
        :type ezsigntemplatedocument_create_object_v1_request: EzsigntemplatedocumentCreateObjectV1Request
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(EzsigntemplatedocumentCreateObjectV1Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'ezsigntemplatedocument_create_object_v1_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ezsigntemplatedocument_create_object_v1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['ezsigntemplatedocument_create_object_v1_request'] is not None:
            _body_params = _params['ezsigntemplatedocument_create_object_v1_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['Authorization']  # noqa: E501

        _response_types_map = {
            '201': "EzsigntemplatedocumentCreateObjectV1Response",
            '422': "CommonResponseErrorSTemporaryFileUrl",
        }

        return self.api_client.call_api(
            '/1/object/ezsigntemplatedocument', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def ezsigntemplatedocument_edit_ezsigntemplateformfieldgroups_v1(self, pki_ezsigntemplatedocument_id : conint(strict=True, ge=0), ezsigntemplatedocument_edit_ezsigntemplateformfieldgroups_v1_request : EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request, **kwargs) -> EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Response:  # noqa: E501
        """Edit multiple Ezsigntemplateformfieldgroups  # noqa: E501

        Using this endpoint, you can edit multiple Ezsigntemplateformfieldgroups at the same time.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsigntemplatedocument_edit_ezsigntemplateformfieldgroups_v1(pki_ezsigntemplatedocument_id, ezsigntemplatedocument_edit_ezsigntemplateformfieldgroups_v1_request, async_req=True)
        >>> result = thread.get()

        :param pki_ezsigntemplatedocument_id: (required)
        :type pki_ezsigntemplatedocument_id: int
        :param ezsigntemplatedocument_edit_ezsigntemplateformfieldgroups_v1_request: (required)
        :type ezsigntemplatedocument_edit_ezsigntemplateformfieldgroups_v1_request: EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the ezsigntemplatedocument_edit_ezsigntemplateformfieldgroups_v1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.ezsigntemplatedocument_edit_ezsigntemplateformfieldgroups_v1_with_http_info(pki_ezsigntemplatedocument_id, ezsigntemplatedocument_edit_ezsigntemplateformfieldgroups_v1_request, **kwargs)  # noqa: E501

    @validate_arguments
    def ezsigntemplatedocument_edit_ezsigntemplateformfieldgroups_v1_with_http_info(self, pki_ezsigntemplatedocument_id : conint(strict=True, ge=0), ezsigntemplatedocument_edit_ezsigntemplateformfieldgroups_v1_request : EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request, **kwargs) -> ApiResponse:  # noqa: E501
        """Edit multiple Ezsigntemplateformfieldgroups  # noqa: E501

        Using this endpoint, you can edit multiple Ezsigntemplateformfieldgroups at the same time.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsigntemplatedocument_edit_ezsigntemplateformfieldgroups_v1_with_http_info(pki_ezsigntemplatedocument_id, ezsigntemplatedocument_edit_ezsigntemplateformfieldgroups_v1_request, async_req=True)
        >>> result = thread.get()

        :param pki_ezsigntemplatedocument_id: (required)
        :type pki_ezsigntemplatedocument_id: int
        :param ezsigntemplatedocument_edit_ezsigntemplateformfieldgroups_v1_request: (required)
        :type ezsigntemplatedocument_edit_ezsigntemplateformfieldgroups_v1_request: EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'pki_ezsigntemplatedocument_id',
            'ezsigntemplatedocument_edit_ezsigntemplateformfieldgroups_v1_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ezsigntemplatedocument_edit_ezsigntemplateformfieldgroups_v1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['pki_ezsigntemplatedocument_id']:
            _path_params['pkiEzsigntemplatedocumentID'] = _params['pki_ezsigntemplatedocument_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['ezsigntemplatedocument_edit_ezsigntemplateformfieldgroups_v1_request'] is not None:
            _body_params = _params['ezsigntemplatedocument_edit_ezsigntemplateformfieldgroups_v1_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['Authorization']  # noqa: E501

        _response_types_map = {
            '200': "EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Response",
            '404': "CommonResponseError",
            '422': "CommonResponseError",
        }

        return self.api_client.call_api(
            '/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}/editEzsigntemplateformfieldgroups', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def ezsigntemplatedocument_edit_ezsigntemplatesignatures_v1(self, pki_ezsigntemplatedocument_id : conint(strict=True, ge=0), ezsigntemplatedocument_edit_ezsigntemplatesignatures_v1_request : EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Request, **kwargs) -> EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Response:  # noqa: E501
        """Edit multiple Ezsigntemplatesignatures  # noqa: E501

        Using this endpoint, you can edit multiple Ezsigntemplatesignatures at the same time.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsigntemplatedocument_edit_ezsigntemplatesignatures_v1(pki_ezsigntemplatedocument_id, ezsigntemplatedocument_edit_ezsigntemplatesignatures_v1_request, async_req=True)
        >>> result = thread.get()

        :param pki_ezsigntemplatedocument_id: (required)
        :type pki_ezsigntemplatedocument_id: int
        :param ezsigntemplatedocument_edit_ezsigntemplatesignatures_v1_request: (required)
        :type ezsigntemplatedocument_edit_ezsigntemplatesignatures_v1_request: EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Request
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the ezsigntemplatedocument_edit_ezsigntemplatesignatures_v1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.ezsigntemplatedocument_edit_ezsigntemplatesignatures_v1_with_http_info(pki_ezsigntemplatedocument_id, ezsigntemplatedocument_edit_ezsigntemplatesignatures_v1_request, **kwargs)  # noqa: E501

    @validate_arguments
    def ezsigntemplatedocument_edit_ezsigntemplatesignatures_v1_with_http_info(self, pki_ezsigntemplatedocument_id : conint(strict=True, ge=0), ezsigntemplatedocument_edit_ezsigntemplatesignatures_v1_request : EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Request, **kwargs) -> ApiResponse:  # noqa: E501
        """Edit multiple Ezsigntemplatesignatures  # noqa: E501

        Using this endpoint, you can edit multiple Ezsigntemplatesignatures at the same time.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsigntemplatedocument_edit_ezsigntemplatesignatures_v1_with_http_info(pki_ezsigntemplatedocument_id, ezsigntemplatedocument_edit_ezsigntemplatesignatures_v1_request, async_req=True)
        >>> result = thread.get()

        :param pki_ezsigntemplatedocument_id: (required)
        :type pki_ezsigntemplatedocument_id: int
        :param ezsigntemplatedocument_edit_ezsigntemplatesignatures_v1_request: (required)
        :type ezsigntemplatedocument_edit_ezsigntemplatesignatures_v1_request: EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Request
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'pki_ezsigntemplatedocument_id',
            'ezsigntemplatedocument_edit_ezsigntemplatesignatures_v1_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ezsigntemplatedocument_edit_ezsigntemplatesignatures_v1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['pki_ezsigntemplatedocument_id']:
            _path_params['pkiEzsigntemplatedocumentID'] = _params['pki_ezsigntemplatedocument_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['ezsigntemplatedocument_edit_ezsigntemplatesignatures_v1_request'] is not None:
            _body_params = _params['ezsigntemplatedocument_edit_ezsigntemplatesignatures_v1_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['Authorization']  # noqa: E501

        _response_types_map = {
            '200': "EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Response",
            '404': "CommonResponseError",
            '422': "CommonResponseError",
        }

        return self.api_client.call_api(
            '/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}/editEzsigntemplatesignatures', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def ezsigntemplatedocument_edit_object_v1(self, pki_ezsigntemplatedocument_id : conint(strict=True, ge=0), ezsigntemplatedocument_edit_object_v1_request : EzsigntemplatedocumentEditObjectV1Request, **kwargs) -> EzsigntemplatedocumentEditObjectV1Response:  # noqa: E501
        """Edit an existing Ezsigntemplatedocument  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsigntemplatedocument_edit_object_v1(pki_ezsigntemplatedocument_id, ezsigntemplatedocument_edit_object_v1_request, async_req=True)
        >>> result = thread.get()

        :param pki_ezsigntemplatedocument_id: (required)
        :type pki_ezsigntemplatedocument_id: int
        :param ezsigntemplatedocument_edit_object_v1_request: (required)
        :type ezsigntemplatedocument_edit_object_v1_request: EzsigntemplatedocumentEditObjectV1Request
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: EzsigntemplatedocumentEditObjectV1Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the ezsigntemplatedocument_edit_object_v1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.ezsigntemplatedocument_edit_object_v1_with_http_info(pki_ezsigntemplatedocument_id, ezsigntemplatedocument_edit_object_v1_request, **kwargs)  # noqa: E501

    @validate_arguments
    def ezsigntemplatedocument_edit_object_v1_with_http_info(self, pki_ezsigntemplatedocument_id : conint(strict=True, ge=0), ezsigntemplatedocument_edit_object_v1_request : EzsigntemplatedocumentEditObjectV1Request, **kwargs) -> ApiResponse:  # noqa: E501
        """Edit an existing Ezsigntemplatedocument  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsigntemplatedocument_edit_object_v1_with_http_info(pki_ezsigntemplatedocument_id, ezsigntemplatedocument_edit_object_v1_request, async_req=True)
        >>> result = thread.get()

        :param pki_ezsigntemplatedocument_id: (required)
        :type pki_ezsigntemplatedocument_id: int
        :param ezsigntemplatedocument_edit_object_v1_request: (required)
        :type ezsigntemplatedocument_edit_object_v1_request: EzsigntemplatedocumentEditObjectV1Request
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(EzsigntemplatedocumentEditObjectV1Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'pki_ezsigntemplatedocument_id',
            'ezsigntemplatedocument_edit_object_v1_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ezsigntemplatedocument_edit_object_v1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['pki_ezsigntemplatedocument_id']:
            _path_params['pkiEzsigntemplatedocumentID'] = _params['pki_ezsigntemplatedocument_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['ezsigntemplatedocument_edit_object_v1_request'] is not None:
            _body_params = _params['ezsigntemplatedocument_edit_object_v1_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['Authorization']  # noqa: E501

        _response_types_map = {
            '200': "EzsigntemplatedocumentEditObjectV1Response",
            '404': "CommonResponseError",
            '422': "CommonResponseErrorSTemporaryFileUrl",
        }

        return self.api_client.call_api(
            '/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def ezsigntemplatedocument_flatten_v1(self, pki_ezsigntemplatedocument_id : conint(strict=True, ge=0), body : Dict[str, Any], **kwargs) -> EzsigntemplatedocumentFlattenV1Response:  # noqa: E501
        """Flatten  # noqa: E501

        Flatten an Ezsigntemplatedocument signatures, forms and annotations. This process finalizes the PDF so that the forms and annotations become part of the document content and cannot be edited.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsigntemplatedocument_flatten_v1(pki_ezsigntemplatedocument_id, body, async_req=True)
        >>> result = thread.get()

        :param pki_ezsigntemplatedocument_id: (required)
        :type pki_ezsigntemplatedocument_id: int
        :param body: (required)
        :type body: object
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: EzsigntemplatedocumentFlattenV1Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the ezsigntemplatedocument_flatten_v1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.ezsigntemplatedocument_flatten_v1_with_http_info(pki_ezsigntemplatedocument_id, body, **kwargs)  # noqa: E501

    @validate_arguments
    def ezsigntemplatedocument_flatten_v1_with_http_info(self, pki_ezsigntemplatedocument_id : conint(strict=True, ge=0), body : Dict[str, Any], **kwargs) -> ApiResponse:  # noqa: E501
        """Flatten  # noqa: E501

        Flatten an Ezsigntemplatedocument signatures, forms and annotations. This process finalizes the PDF so that the forms and annotations become part of the document content and cannot be edited.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsigntemplatedocument_flatten_v1_with_http_info(pki_ezsigntemplatedocument_id, body, async_req=True)
        >>> result = thread.get()

        :param pki_ezsigntemplatedocument_id: (required)
        :type pki_ezsigntemplatedocument_id: int
        :param body: (required)
        :type body: object
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(EzsigntemplatedocumentFlattenV1Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'pki_ezsigntemplatedocument_id',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ezsigntemplatedocument_flatten_v1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['pki_ezsigntemplatedocument_id']:
            _path_params['pkiEzsigntemplatedocumentID'] = _params['pki_ezsigntemplatedocument_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['Authorization']  # noqa: E501

        _response_types_map = {
            '200': "EzsigntemplatedocumentFlattenV1Response",
            '404': "CommonResponseError",
            '422': "CommonResponseError",
        }

        return self.api_client.call_api(
            '/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}/flatten', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def ezsigntemplatedocument_get_ezsigntemplatedocumentpages_v1(self, pki_ezsigntemplatedocument_id : conint(strict=True, ge=0), **kwargs) -> EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1Response:  # noqa: E501
        """Retrieve an existing Ezsigntemplatedocument's Ezsigntemplatedocumentpages  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsigntemplatedocument_get_ezsigntemplatedocumentpages_v1(pki_ezsigntemplatedocument_id, async_req=True)
        >>> result = thread.get()

        :param pki_ezsigntemplatedocument_id: (required)
        :type pki_ezsigntemplatedocument_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the ezsigntemplatedocument_get_ezsigntemplatedocumentpages_v1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.ezsigntemplatedocument_get_ezsigntemplatedocumentpages_v1_with_http_info(pki_ezsigntemplatedocument_id, **kwargs)  # noqa: E501

    @validate_arguments
    def ezsigntemplatedocument_get_ezsigntemplatedocumentpages_v1_with_http_info(self, pki_ezsigntemplatedocument_id : conint(strict=True, ge=0), **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve an existing Ezsigntemplatedocument's Ezsigntemplatedocumentpages  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsigntemplatedocument_get_ezsigntemplatedocumentpages_v1_with_http_info(pki_ezsigntemplatedocument_id, async_req=True)
        >>> result = thread.get()

        :param pki_ezsigntemplatedocument_id: (required)
        :type pki_ezsigntemplatedocument_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'pki_ezsigntemplatedocument_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ezsigntemplatedocument_get_ezsigntemplatedocumentpages_v1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['pki_ezsigntemplatedocument_id']:
            _path_params['pkiEzsigntemplatedocumentID'] = _params['pki_ezsigntemplatedocument_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Authorization']  # noqa: E501

        _response_types_map = {
            '200': "EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1Response",
            '404': "CommonResponseError",
        }

        return self.api_client.call_api(
            '/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}/getEzsigntemplatedocumentpages', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def ezsigntemplatedocument_get_ezsigntemplateformfieldgroups_v1(self, pki_ezsigntemplatedocument_id : conint(strict=True, ge=0), **kwargs) -> EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1Response:  # noqa: E501
        """Retrieve an existing Ezsigntemplatedocument's Ezsigntemplateformfieldgroups  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsigntemplatedocument_get_ezsigntemplateformfieldgroups_v1(pki_ezsigntemplatedocument_id, async_req=True)
        >>> result = thread.get()

        :param pki_ezsigntemplatedocument_id: (required)
        :type pki_ezsigntemplatedocument_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the ezsigntemplatedocument_get_ezsigntemplateformfieldgroups_v1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.ezsigntemplatedocument_get_ezsigntemplateformfieldgroups_v1_with_http_info(pki_ezsigntemplatedocument_id, **kwargs)  # noqa: E501

    @validate_arguments
    def ezsigntemplatedocument_get_ezsigntemplateformfieldgroups_v1_with_http_info(self, pki_ezsigntemplatedocument_id : conint(strict=True, ge=0), **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve an existing Ezsigntemplatedocument's Ezsigntemplateformfieldgroups  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsigntemplatedocument_get_ezsigntemplateformfieldgroups_v1_with_http_info(pki_ezsigntemplatedocument_id, async_req=True)
        >>> result = thread.get()

        :param pki_ezsigntemplatedocument_id: (required)
        :type pki_ezsigntemplatedocument_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'pki_ezsigntemplatedocument_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ezsigntemplatedocument_get_ezsigntemplateformfieldgroups_v1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['pki_ezsigntemplatedocument_id']:
            _path_params['pkiEzsigntemplatedocumentID'] = _params['pki_ezsigntemplatedocument_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Authorization']  # noqa: E501

        _response_types_map = {
            '200': "EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1Response",
            '404': "CommonResponseError",
            '422': "CommonResponseError",
        }

        return self.api_client.call_api(
            '/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}/getEzsigntemplateformfieldgroups', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def ezsigntemplatedocument_get_ezsigntemplatesignatures_v1(self, pki_ezsigntemplatedocument_id : conint(strict=True, ge=0), **kwargs) -> EzsigntemplatedocumentGetEzsigntemplatesignaturesV1Response:  # noqa: E501
        """Retrieve an existing Ezsigntemplatedocument's Ezsigntemplatesignatures  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsigntemplatedocument_get_ezsigntemplatesignatures_v1(pki_ezsigntemplatedocument_id, async_req=True)
        >>> result = thread.get()

        :param pki_ezsigntemplatedocument_id: (required)
        :type pki_ezsigntemplatedocument_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: EzsigntemplatedocumentGetEzsigntemplatesignaturesV1Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the ezsigntemplatedocument_get_ezsigntemplatesignatures_v1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.ezsigntemplatedocument_get_ezsigntemplatesignatures_v1_with_http_info(pki_ezsigntemplatedocument_id, **kwargs)  # noqa: E501

    @validate_arguments
    def ezsigntemplatedocument_get_ezsigntemplatesignatures_v1_with_http_info(self, pki_ezsigntemplatedocument_id : conint(strict=True, ge=0), **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve an existing Ezsigntemplatedocument's Ezsigntemplatesignatures  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsigntemplatedocument_get_ezsigntemplatesignatures_v1_with_http_info(pki_ezsigntemplatedocument_id, async_req=True)
        >>> result = thread.get()

        :param pki_ezsigntemplatedocument_id: (required)
        :type pki_ezsigntemplatedocument_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(EzsigntemplatedocumentGetEzsigntemplatesignaturesV1Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'pki_ezsigntemplatedocument_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ezsigntemplatedocument_get_ezsigntemplatesignatures_v1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['pki_ezsigntemplatedocument_id']:
            _path_params['pkiEzsigntemplatedocumentID'] = _params['pki_ezsigntemplatedocument_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Authorization']  # noqa: E501

        _response_types_map = {
            '200': "EzsigntemplatedocumentGetEzsigntemplatesignaturesV1Response",
            '404': "CommonResponseError",
            '422': "CommonResponseError",
        }

        return self.api_client.call_api(
            '/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}/getEzsigntemplatesignatures', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def ezsigntemplatedocument_get_object_v2(self, pki_ezsigntemplatedocument_id : conint(strict=True, ge=0), **kwargs) -> EzsigntemplatedocumentGetObjectV2Response:  # noqa: E501
        """Retrieve an existing Ezsigntemplatedocument  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsigntemplatedocument_get_object_v2(pki_ezsigntemplatedocument_id, async_req=True)
        >>> result = thread.get()

        :param pki_ezsigntemplatedocument_id: (required)
        :type pki_ezsigntemplatedocument_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: EzsigntemplatedocumentGetObjectV2Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the ezsigntemplatedocument_get_object_v2_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.ezsigntemplatedocument_get_object_v2_with_http_info(pki_ezsigntemplatedocument_id, **kwargs)  # noqa: E501

    @validate_arguments
    def ezsigntemplatedocument_get_object_v2_with_http_info(self, pki_ezsigntemplatedocument_id : conint(strict=True, ge=0), **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve an existing Ezsigntemplatedocument  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsigntemplatedocument_get_object_v2_with_http_info(pki_ezsigntemplatedocument_id, async_req=True)
        >>> result = thread.get()

        :param pki_ezsigntemplatedocument_id: (required)
        :type pki_ezsigntemplatedocument_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(EzsigntemplatedocumentGetObjectV2Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'pki_ezsigntemplatedocument_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ezsigntemplatedocument_get_object_v2" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['pki_ezsigntemplatedocument_id']:
            _path_params['pkiEzsigntemplatedocumentID'] = _params['pki_ezsigntemplatedocument_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['Authorization']  # noqa: E501

        _response_types_map = {
            '200': "EzsigntemplatedocumentGetObjectV2Response",
            '404': "CommonResponseError",
        }

        return self.api_client.call_api(
            '/2/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def ezsigntemplatedocument_get_words_positions_v1(self, pki_ezsigntemplatedocument_id : conint(strict=True, ge=0), ezsigntemplatedocument_get_words_positions_v1_request : EzsigntemplatedocumentGetWordsPositionsV1Request, **kwargs) -> EzsigntemplatedocumentGetWordsPositionsV1Response:  # noqa: E501
        """Retrieve positions X,Y of given words from a Ezsigntemplatedocument  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsigntemplatedocument_get_words_positions_v1(pki_ezsigntemplatedocument_id, ezsigntemplatedocument_get_words_positions_v1_request, async_req=True)
        >>> result = thread.get()

        :param pki_ezsigntemplatedocument_id: (required)
        :type pki_ezsigntemplatedocument_id: int
        :param ezsigntemplatedocument_get_words_positions_v1_request: (required)
        :type ezsigntemplatedocument_get_words_positions_v1_request: EzsigntemplatedocumentGetWordsPositionsV1Request
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: EzsigntemplatedocumentGetWordsPositionsV1Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the ezsigntemplatedocument_get_words_positions_v1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.ezsigntemplatedocument_get_words_positions_v1_with_http_info(pki_ezsigntemplatedocument_id, ezsigntemplatedocument_get_words_positions_v1_request, **kwargs)  # noqa: E501

    @validate_arguments
    def ezsigntemplatedocument_get_words_positions_v1_with_http_info(self, pki_ezsigntemplatedocument_id : conint(strict=True, ge=0), ezsigntemplatedocument_get_words_positions_v1_request : EzsigntemplatedocumentGetWordsPositionsV1Request, **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieve positions X,Y of given words from a Ezsigntemplatedocument  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsigntemplatedocument_get_words_positions_v1_with_http_info(pki_ezsigntemplatedocument_id, ezsigntemplatedocument_get_words_positions_v1_request, async_req=True)
        >>> result = thread.get()

        :param pki_ezsigntemplatedocument_id: (required)
        :type pki_ezsigntemplatedocument_id: int
        :param ezsigntemplatedocument_get_words_positions_v1_request: (required)
        :type ezsigntemplatedocument_get_words_positions_v1_request: EzsigntemplatedocumentGetWordsPositionsV1Request
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(EzsigntemplatedocumentGetWordsPositionsV1Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'pki_ezsigntemplatedocument_id',
            'ezsigntemplatedocument_get_words_positions_v1_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ezsigntemplatedocument_get_words_positions_v1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['pki_ezsigntemplatedocument_id']:
            _path_params['pkiEzsigntemplatedocumentID'] = _params['pki_ezsigntemplatedocument_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['ezsigntemplatedocument_get_words_positions_v1_request'] is not None:
            _body_params = _params['ezsigntemplatedocument_get_words_positions_v1_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['Authorization']  # noqa: E501

        _response_types_map = {
            '200': "EzsigntemplatedocumentGetWordsPositionsV1Response",
            '404': "CommonResponseError",
        }

        return self.api_client.call_api(
            '/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}/getWordsPositions', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def ezsigntemplatedocument_patch_object_v1(self, pki_ezsigntemplatedocument_id : conint(strict=True, ge=0), ezsigntemplatedocument_patch_object_v1_request : EzsigntemplatedocumentPatchObjectV1Request, **kwargs) -> EzsigntemplatedocumentPatchObjectV1Response:  # noqa: E501
        """Patch an existing Ezsigntemplatedocument  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsigntemplatedocument_patch_object_v1(pki_ezsigntemplatedocument_id, ezsigntemplatedocument_patch_object_v1_request, async_req=True)
        >>> result = thread.get()

        :param pki_ezsigntemplatedocument_id: (required)
        :type pki_ezsigntemplatedocument_id: int
        :param ezsigntemplatedocument_patch_object_v1_request: (required)
        :type ezsigntemplatedocument_patch_object_v1_request: EzsigntemplatedocumentPatchObjectV1Request
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: EzsigntemplatedocumentPatchObjectV1Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the ezsigntemplatedocument_patch_object_v1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.ezsigntemplatedocument_patch_object_v1_with_http_info(pki_ezsigntemplatedocument_id, ezsigntemplatedocument_patch_object_v1_request, **kwargs)  # noqa: E501

    @validate_arguments
    def ezsigntemplatedocument_patch_object_v1_with_http_info(self, pki_ezsigntemplatedocument_id : conint(strict=True, ge=0), ezsigntemplatedocument_patch_object_v1_request : EzsigntemplatedocumentPatchObjectV1Request, **kwargs) -> ApiResponse:  # noqa: E501
        """Patch an existing Ezsigntemplatedocument  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ezsigntemplatedocument_patch_object_v1_with_http_info(pki_ezsigntemplatedocument_id, ezsigntemplatedocument_patch_object_v1_request, async_req=True)
        >>> result = thread.get()

        :param pki_ezsigntemplatedocument_id: (required)
        :type pki_ezsigntemplatedocument_id: int
        :param ezsigntemplatedocument_patch_object_v1_request: (required)
        :type ezsigntemplatedocument_patch_object_v1_request: EzsigntemplatedocumentPatchObjectV1Request
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(EzsigntemplatedocumentPatchObjectV1Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'pki_ezsigntemplatedocument_id',
            'ezsigntemplatedocument_patch_object_v1_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ezsigntemplatedocument_patch_object_v1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['pki_ezsigntemplatedocument_id']:
            _path_params['pkiEzsigntemplatedocumentID'] = _params['pki_ezsigntemplatedocument_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['ezsigntemplatedocument_patch_object_v1_request'] is not None:
            _body_params = _params['ezsigntemplatedocument_patch_object_v1_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['Authorization']  # noqa: E501

        _response_types_map = {
            '200': "EzsigntemplatedocumentPatchObjectV1Response",
            '404': "CommonResponseError",
        }

        return self.api_client.call_api(
            '/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}', 'PATCH',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
